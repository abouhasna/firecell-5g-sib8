<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;v&apos; shadows outer argument" verbose="Local variable &apos;v&apos; shadows outer argument" cwe="398">
            <location file="common/utils/T/tracer/extract_config.c" line="44" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/extract_config.c" line="18" column="24" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/configuration.c" line="45" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;T_nowait&apos; can be reduced." verbose="The scope of the variable &apos;T_nowait&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/T.c" line="192" column="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;c==10&apos; is always false" verbose="Condition &apos;c==10&apos; is always false" cwe="570">
            <location file="common/utils/T/genids.c" line="97" column="11" info="Condition &apos;c==10&apos; is always false"/>
            <location file="common/utils/T/genids.c" line="95" column="11" info="Assuming that condition &apos;c==&apos;\n&apos;&apos; is not redundant"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &apos;asctime&apos; called. It is recommended to use &apos;strftime&apos; instead." verbose="Obsolete function &apos;asctime&apos; called. It is recommended to use &apos;strftime&apos; instead." cwe="477">
            <location file="common/utils/LOG/vcd_signal_dumper.c" line="840" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nibble_value&apos; can be reduced." verbose="The scope of the variable &apos;nibble_value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/LOG/vcd_signal_dumper.c" line="620" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;binary_string&apos; can be reduced." verbose="The scope of the variable &apos;binary_string&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/LOG/vcd_signal_dumper.c" line="917" column="10"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="common/config/config_load_configmodule.c" line="249" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;T_LOCAL_buf&apos; is assigned a value that is never used." verbose="Variable &apos;T_LOCAL_buf&apos; is assigned a value that is never used." cwe="563">
            <location file="common/utils/T/local_tracer.c" line="123" column="21"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;line&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;line&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="common/utils/T/tracer/event_selector.c" line="69" column="10" info="line is overwritten"/>
            <location file="common/utils/T/tracer/event_selector.c" line="61" column="12" info="line is initialized"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;button&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;button&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="common/utils/T/tracer/event_selector.c" line="70" column="12" info="button is overwritten"/>
            <location file="common/utils/T/tracer/event_selector.c" line="62" column="14" info="button is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iqbuf&apos; can be reduced." verbose="The scope of the variable &apos;iqbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/gui.c" line="26" column="10"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;cfgparam&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;cfgparam&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="common/config/config_load_configmodule.c" line="283" column="16" info="cfgparam is overwritten"/>
            <location file="common/config/config_load_configmodule.c" line="282" column="16" info="cfgparam is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fname&apos; can be reduced." verbose="The scope of the variable &apos;fname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/config/config_load_configmodule.c" line="69" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;defval&apos; can be reduced." verbose="The scope of the variable &apos;defval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/config/config_load_configmodule.c" line="155" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="common/config/config_load_configmodule.c" line="240" column="12" info="Shadow variable"/>
            <location file="common/config/config_load_configmodule.c" line="235" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If TRACEPOINT_EVENT is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If TRACEPOINT_EVENT is a macro then please configure it.">
            <location file="common/utils/LOG/lttng-tp.h" line="43" column="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/config/config_cmdline.c" line="274" column="15"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="common/config/libconfig/config_libconfig.c" line="117" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;str&apos; can be reduced." verbose="The scope of the variable &apos;str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/config/libconfig/config_libconfig.c" line="60" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/config/libconfig/config_libconfig.c" line="507" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cfgpath&apos; can be reduced." verbose="The scope of the variable &apos;cfgpath&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/config/libconfig/config_libconfig.c" line="509" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="common/config/libconfig/config_libconfig.c" line="512" column="6"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;c==10&apos; is always false" verbose="Condition &apos;c==10&apos; is always false" cwe="570">
            <location file="common/utils/T/tracer/database.c" line="74" column="11" info="Condition &apos;c==10&apos; is always false"/>
            <location file="common/utils/T/tracer/database.c" line="73" column="11" info="Assuming that condition &apos;c==&apos;\n&apos;&apos; is not redundant"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="common/config/libconfig/config_libconfig.c" line="514" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;g&apos; can be reduced." verbose="The scope of the variable &apos;g&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/database.c" line="207" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/database.c" line="424" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;j&apos; shadows outer variable" verbose="Local variable &apos;j&apos; shadows outer variable" cwe="398">
            <location file="common/utils/T/tracer/database.c" line="370" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/database.c" line="362" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;v&apos; shadows outer argument" verbose="Local variable &apos;v&apos; shadows outer argument" cwe="398">
            <location file="common/utils/T/tracer/hacks/dump_nack_signal.c" line="96" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/hacks/dump_nack_signal.c" line="22" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;v&apos; shadows outer argument" verbose="Local variable &apos;v&apos; shadows outer argument" cwe="398">
            <location file="common/utils/T/tracer/hacks/multi-rru-clean.c" line="153" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/hacks/multi-rru-clean.c" line="84" column="24" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/gui/widget.c" line="297" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/gui/widget.c" line="312" column="18"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="common/utils/T/tracer/gui/textlist.c" line="54" column="3"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;format!=10&apos; is always true" verbose="Condition &apos;format!=10&apos; is always true" cwe="571">
            <location file="common/utils/LOG/log.c" line="175" column="21" info="Condition &apos;format!=10&apos; is always true"/>
            <location file="common/utils/LOG/log.c" line="173" column="14" info="Assuming that condition &apos;format==10&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;args&apos; can be reduced." verbose="The scope of the variable &apos;args&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/LOG/log.c" line="645" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fp&apos; can be reduced." verbose="The scope of the variable &apos;fp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/LOG/log.c" line="955" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;f_name&apos; can be reduced." verbose="The scope of the variable &apos;f_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/LOG/log.c" line="956" column="8"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398">
            <location file="common/utils/LOG/log.c" line="884" column="9" info="Shadow variable"/>
            <location file="common/utils/LOG/log.c" line="876" column="7" info="Shadowed declaration"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="common/utils/LOG/log.c" line="565" column="46"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="common/utils/LOG/log.c" line="582" column="26"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="common/utils/LOG/log.c" line="586" column="24"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;data&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;data&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="common/utils/LOG/log.c" line="203" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;xw&apos; can be reduced." verbose="The scope of the variable &apos;xw&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/gui/x.c" line="178" column="20"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;w&apos; shadows outer variable" verbose="Local variable &apos;w&apos; shadows outer variable" cwe="398">
            <location file="common/utils/T/tracer/gui/x.c" line="287" column="36" info="Shadow variable"/>
            <location file="common/utils/T/tracer/gui/x.c" line="197" column="34" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;v&apos; shadows outer argument" verbose="Local variable &apos;v&apos; shadows outer argument" cwe="398">
            <location file="common/utils/T/tracer/replay.c" line="144" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/replay.c" line="104" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;x&apos; shadows outer variable" verbose="Local variable &apos;x&apos; shadows outer variable" cwe="398">
            <location file="common/utils/T/tracer/gui/x.c" line="320" column="28" info="Shadow variable"/>
            <location file="common/utils/T/tracer/gui/x.c" line="196" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;v&apos; shadows outer argument" verbose="Local variable &apos;v&apos; shadows outer argument" cwe="398">
            <location file="common/utils/T/tracer/record.c" line="132" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/record.c" line="44" column="24" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/utils.c" line="146" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/utils.c" line="179" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/scrolltti.c" line="32" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max&apos; can be reduced." verbose="The scope of the variable &apos;max&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/scrolltti.c" line="33" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mlog&apos; can be reduced." verbose="The scope of the variable &apos;mlog&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/scrolltti.c" line="33" column="14"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: fds" verbose="Possible null pointer dereference: fds" cwe="476">
            <location file="common/utils/T/tracer/multi.c" line="264" column="5" info="Null pointer dereference"/>
            <location file="common/utils/T/tracer/multi.c" line="208" column="24" info="Assignment &apos;fds=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: fds" verbose="Possible null pointer dereference: fds" cwe="476">
            <location file="common/utils/T/tracer/multi.c" line="265" column="5" info="Null pointer dereference"/>
            <location file="common/utils/T/tracer/multi.c" line="208" column="24" info="Assignment &apos;fds=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;l&apos; shadows outer variable" verbose="Local variable &apos;l&apos; shadows outer variable" cwe="398">
            <location file="common/utils/T/tracer/multi.c" line="322" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/multi.c" line="203" column="8" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;s&apos; shadows outer variable" verbose="Local variable &apos;s&apos; shadows outer variable" cwe="398">
            <location file="common/utils/T/tracer/multi.c" line="323" column="11" info="Shadow variable"/>
            <location file="common/utils/T/tracer/multi.c" line="204" column="8" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;v&apos; shadows outer argument" verbose="Local variable &apos;v&apos; shadows outer argument" cwe="398">
            <location file="common/utils/T/tracer/multi.c" line="339" column="13" info="Shadow variable"/>
            <location file="common/utils/T/tracer/multi.c" line="191" column="24" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;T_LOCAL_buf&apos; is assigned a value that is never used." verbose="Variable &apos;T_LOCAL_buf&apos; is assigned a value that is never used." cwe="563">
            <location file="common/utils/T/tracer/multi.c" line="38" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;textlog&apos; can be reduced." verbose="The scope of the variable &apos;textlog&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/textlog.c" line="60" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dirty&apos; can be reduced." verbose="The scope of the variable &apos;dirty&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/textlist.c" line="34" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/time.c" line="84" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced." verbose="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/tti.c" line="43" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/time.c" line="85" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pixel_length&apos; can be reduced." verbose="The scope of the variable &apos;pixel_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/time.c" line="111" column="11"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="common/utils/T/tracer/vcd.c" line="98" column="28"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;start_it&apos; shadows outer argument" verbose="Local variable &apos;start_it&apos; shadows outer argument" cwe="398">
            <location file="common/utils/ds/seq_arr.c" line="126" column="11" info="Shadow variable"/>
            <location file="common/utils/ds/seq_arr.c" line="114" column="45" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ap&apos; can be reduced." verbose="The scope of the variable &apos;ap&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/xy.c" line="87" column="11"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;end_it&apos; shadows outer argument" verbose="Local variable &apos;end_it&apos; shadows outer argument" cwe="398">
            <location file="common/utils/ds/seq_arr.c" line="127" column="11" info="Shadow variable"/>
            <location file="common/utils/ds/seq_arr.c" line="114" column="61" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/ticktime.c" line="91" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/ticktime.c" line="92" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pixel_length&apos; can be reduced." verbose="The scope of the variable &apos;pixel_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/view/ticktime.c" line="118" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;textlog&apos; can be reduced." verbose="The scope of the variable &apos;textlog&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/to_vcd.c" line="255" column="11"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="common/utils/T/tracer/to_vcd.c" line="115" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/hashtable/obj_hashtable.c" line="244" column="26"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="common/utils/system.c" line="279" column="5"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n&apos; is assigned a value that is never used." verbose="Variable &apos;n&apos; is assigned a value that is never used." cwe="563">
            <location file="common/utils/hashtable/obj_hashtable.c" line="244" column="32"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;settingPriority&apos; is always true" verbose="Condition &apos;settingPriority&apos; is always true" cwe="571">
            <location file="common/utils/system.c" line="335" column="7" info="Condition &apos;settingPriority&apos; is always true"/>
            <location file="common/utils/system.c" line="309" column="25" info="Assignment &apos;settingPriority=1&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rnti&apos; can be reduced." verbose="The scope of the variable &apos;rnti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/telnetsrv/telnetsrv_ci.c" line="92" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rnti&apos; is assigned a value that is never used." verbose="Variable &apos;rnti&apos; is assigned a value that is never used." cwe="563">
            <location file="common/utils/telnetsrv/telnetsrv_ci.c" line="92" column="12"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_tasks!=NULL&apos; is redundant or there is possible null pointer dereference: tasks." verbose="Either the condition &apos;new_tasks!=NULL&apos; is redundant or there is possible null pointer dereference: tasks." cwe="476">
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="343" column="5" info="Null pointer dereference"/>
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="342" column="13" info="Assignment &apos;tasks=new_tasks&apos;, assigned value is 0"/>
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="340" column="31" info="Assignment &apos;new_tasks=(struct task_list_s**)realloc(tasks,nb_queues*sizeof(*tasks))&apos;, assigned value is 0"/>
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="341" column="27" info="Assuming that condition &apos;new_tasks!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="common/utils/threadPool/thread-pool.h" line="90" column="3" info="Null pointer dereference"/>
            <location file="common/utils/threadPool/thread-pool.h" line="88" column="29" info="Assignment &apos;ret=(struct notifiedFIFO_elt_s*)memalign(32,sizeof(struct notifiedFIFO_elt_s)+size)&apos;, assigned value is 0"/>
            <location file="common/utils/threadPool/thread-pool.h" line="89" column="20" info="Assuming that condition &apos;NULL!=ret&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_tasks!=NULL&apos; is redundant or there is possible null pointer dereference: tasks." verbose="Either the condition &apos;new_tasks!=NULL&apos; is redundant or there is possible null pointer dereference: tasks." cwe="476">
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="344" column="5" info="Null pointer dereference"/>
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="342" column="13" info="Assignment &apos;tasks=new_tasks&apos;, assigned value is 0"/>
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="340" column="31" info="Assignment &apos;new_tasks=(struct task_list_s**)realloc(tasks,nb_queues*sizeof(*tasks))&apos;, assigned value is 0"/>
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="341" column="27" info="Assuming that condition &apos;new_tasks!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="common/utils/threadPool/thread-pool.h" line="91" column="3" info="Null pointer dereference"/>
            <location file="common/utils/threadPool/thread-pool.h" line="88" column="29" info="Assignment &apos;ret=(struct notifiedFIFO_elt_s*)memalign(32,sizeof(struct notifiedFIFO_elt_s)+size)&apos;, assigned value is 0"/>
            <location file="common/utils/threadPool/thread-pool.h" line="89" column="20" info="Assuming that condition &apos;NULL!=ret&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="common/utils/threadPool/thread-pool.h" line="92" column="3" info="Null pointer dereference"/>
            <location file="common/utils/threadPool/thread-pool.h" line="88" column="29" info="Assignment &apos;ret=(struct notifiedFIFO_elt_s*)memalign(32,sizeof(struct notifiedFIFO_elt_s)+size)&apos;, assigned value is 0"/>
            <location file="common/utils/threadPool/thread-pool.h" line="89" column="20" info="Assuming that condition &apos;NULL!=ret&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="common/utils/threadPool/thread-pool.h" line="93" column="3" info="Null pointer dereference"/>
            <location file="common/utils/threadPool/thread-pool.h" line="88" column="29" info="Assignment &apos;ret=(struct notifiedFIFO_elt_s*)memalign(32,sizeof(struct notifiedFIFO_elt_s)+size)&apos;, assigned value is 0"/>
            <location file="common/utils/threadPool/thread-pool.h" line="89" column="20" info="Assuming that condition &apos;NULL!=ret&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="common/utils/threadPool/thread-pool.h" line="96" column="3" info="Null pointer dereference"/>
            <location file="common/utils/threadPool/thread-pool.h" line="88" column="29" info="Assignment &apos;ret=(struct notifiedFIFO_elt_s*)memalign(32,sizeof(struct notifiedFIFO_elt_s)+size)&apos;, assigned value is 0"/>
            <location file="common/utils/threadPool/thread-pool.h" line="89" column="20" info="Assuming that condition &apos;NULL!=ret&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;NULL!=ret&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="common/utils/threadPool/thread-pool.h" line="97" column="3" info="Null pointer dereference"/>
            <location file="common/utils/threadPool/thread-pool.h" line="88" column="29" info="Assignment &apos;ret=(struct notifiedFIFO_elt_s*)memalign(32,sizeof(struct notifiedFIFO_elt_s)+size)&apos;, assigned value is 0"/>
            <location file="common/utils/threadPool/thread-pool.h" line="89" column="20" info="Assuming that condition &apos;NULL!=ret&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;NULL!=ret&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;NULL!=ret&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682">
            <location file="common/utils/threadPool/thread-pool.h" line="96" column="35" info="Null pointer addition"/>
            <location file="common/utils/threadPool/thread-pool.h" line="88" column="29" info="Assignment &apos;ret=(struct notifiedFIFO_elt_s*)memalign(32,sizeof(struct notifiedFIFO_elt_s)+size)&apos;, assigned value is 0"/>
            <location file="common/utils/threadPool/thread-pool.h" line="89" column="20" info="Assuming that condition &apos;NULL!=ret&apos; is not redundant"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;unused&apos; is assigned a value that is never used." verbose="Variable &apos;unused&apos; is assigned a value that is never used." cwe="563">
            <location file="common/utils/ocp_itti/intertask_interface.cpp" line="447" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aline&apos; can be reduced." verbose="The scope of the variable &apos;aline&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/time_meas.c" line="245" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;start&apos; can be reduced." verbose="The scope of the variable &apos;start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/time_meas.c" line="246" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;stop&apos; can be reduced." verbose="The scope of the variable &apos;stop&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/time_meas.c" line="246" column="24"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;cpu_freq_GHz&apos; shadows outer variable" verbose="Local variable &apos;cpu_freq_GHz&apos; shadows outer variable" cwe="398">
            <location file="common/utils/time_meas.c" line="78" column="19" info="Shadow variable"/>
            <location file="common/utils/time_meas.h" line="36" column="15" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;cpu_freq_GHz&apos; shadows outer variable" verbose="Local variable &apos;cpu_freq_GHz&apos; shadows outer variable" cwe="398">
            <location file="common/utils/time_meas.c" line="123" column="17" info="Shadow variable"/>
            <location file="common/utils/time_meas.h" line="36" column="15" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;cpu_freq_GHz&apos; shadows outer variable" verbose="Local variable &apos;cpu_freq_GHz&apos; shadows outer variable" cwe="398">
            <location file="common/utils/time_meas.c" line="179" column="17" info="Shadow variable"/>
            <location file="common/utils/time_meas.h" line="36" column="15" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="common/utils/websrv/websrv_websockets.c" line="147" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;strtime&apos; can be reduced." verbose="The scope of the variable &apos;strtime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/websrv/websrv_scope.c" line="101" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gtype&apos; can be reduced." verbose="The scope of the variable &apos;gtype&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/websrv/websrv_scope.c" line="275" column="8"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;websrvparams&apos; shadows outer variable" verbose="Local variable &apos;websrvparams&apos; shadows outer variable" cwe="398">
            <location file="common/utils/websrv/websrv_scope.c" line="264" column="22" info="Shadow variable"/>
            <location file="common/utils/websrv/websrv_scope.c" line="165" column="20" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;logfname&apos; can be reduced." verbose="The scope of the variable &apos;logfname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/telnetsrv/telnetsrv.c" line="267" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;stdout_str&apos; can be reduced." verbose="The scope of the variable &apos;stdout_str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/telnetsrv/telnetsrv.c" line="268" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sock&apos; can be reduced." verbose="The scope of the variable &apos;sock&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/telnetsrv/telnetsrv.c" line="738" column="7"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;in&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;in&apos; might be accessed at non-zero index." cwe="758">
            <location file="common/utils/nr/nr_common.c" line="79" column="49"/>
            <location file="common/utils/nr/nr_common.c" line="75" column="27" info="Address of variable taken here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;count==99&apos; is always false" verbose="Condition &apos;count==99&apos; is always false" cwe="570">
            <location file="common/utils/websrv/websrv_utils.c" line="200" column="15" info="Condition &apos;count==99&apos; is always false"/>
            <location file="common/utils/websrv/websrv_utils.c" line="197" column="15" info="Assignment &apos;count=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced." verbose="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/websrv/websrv_utils.c" line="239" column="8"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="executables/lte-softmodem.c" line="507" column="18" info="Second condition"/>
            <location file="executables/lte-softmodem.c" line="490" column="18" info="First condition"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;logsdata&apos; shadows outer variable" verbose="Local variable &apos;logsdata&apos; shadows outer variable" cwe="398">
            <location file="common/utils/telnetsrv/telnetsrv_proccmd.c" line="349" column="21" info="Shadow variable"/>
            <location file="common/utils/telnetsrv/telnetsrv_proccmd.c" line="258" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;logsdata&apos; shadows outer variable" verbose="Local variable &apos;logsdata&apos; shadows outer variable" cwe="398">
            <location file="common/utils/telnetsrv/telnetsrv_proccmd.c" line="368" column="21" info="Shadow variable"/>
            <location file="common/utils/telnetsrv/telnetsrv_proccmd.c" line="258" column="17" info="Shadowed declaration"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;diff_time&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;diff_time&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="executables/lte-softmodem.c" line="231" column="13" info="diff_time is overwritten"/>
            <location file="executables/lte-softmodem.c" line="229" column="29" info="diff_time is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CC_id&apos; can be reduced." verbose="The scope of the variable &apos;CC_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-softmodem.c" line="440" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ru_id&apos; can be reduced." verbose="The scope of the variable &apos;ru_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-softmodem.c" line="441" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;CC_id&apos; shadows outer variable" verbose="Local variable &apos;CC_id&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-softmodem.c" line="549" column="14" info="Shadow variable"/>
            <location file="executables/lte-softmodem.c" line="440" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;gNB&apos; shadows outer variable" verbose="Local variable &apos;gNB&apos; shadows outer variable" cwe="398">
            <location file="executables/nr-gnb.c" line="162" column="19" info="Shadow variable"/>
            <location file="executables/nr-gnb.c" line="123" column="17" info="Shadowed declaration"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCHED_DEADLINE&apos; since the value of &apos;SCHED_DEADLINE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCHED_DEADLINE&apos; since the value of &apos;SCHED_DEADLINE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="common/utils/telnetsrv/telnetsrv_proccmd.c" line="146" column="0"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;diff_time&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;diff_time&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="executables/lte-uesoftmodem.c" line="214" column="13" info="diff_time is overwritten"/>
            <location file="executables/lte-uesoftmodem.c" line="212" column="29" info="diff_time is initialized"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;dumpframe &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="executables/lte-uesoftmodem.c" line="303" column="18"/>
            <location file="executables/lte-uesoftmodem.c" line="274" column="19" info="&apos;dumpframe&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;tddflag &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="executables/lte-uesoftmodem.c" line="311" column="15"/>
            <location file="executables/lte-uesoftmodem.c" line="273" column="15" info="&apos;tddflag&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;abstraction_flag&apos; can be reduced." verbose="The scope of the variable &apos;abstraction_flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-uesoftmodem.c" line="520" column="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tddflag&apos; shadows outer variable" verbose="Local variable &apos;tddflag&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-uesoftmodem.c" line="273" column="7" info="Shadow variable"/>
            <location file="executables/lte-uesoftmodem.c" line="85" column="5" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;abstraction_flag&apos; shadows outer variable" verbose="Local variable &apos;abstraction_flag&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-uesoftmodem.c" line="520" column="12" info="Shadow variable"/>
            <location file="executables/lte-uesoftmodem.c" line="175" column="9" info="Shadowed declaration"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;diff_time&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;diff_time&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="executables/nr-softmodem.c" line="211" column="13" info="diff_time is overwritten"/>
            <location file="executables/nr-softmodem.c" line="209" column="29" info="diff_time is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CC_id&apos; can be reduced." verbose="The scope of the variable &apos;CC_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-softmodem.c" line="621" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x2_register_gnb_pending&apos; is assigned a value that is never used." verbose="Variable &apos;x2_register_gnb_pending&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/nr-softmodem.c" line="327" column="61"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;register_gnb_pending&apos; is assigned a value that is never used." verbose="Variable &apos;register_gnb_pending&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/nr-softmodem.c" line="336" column="59"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gnb_port_for_NGU&apos; is assigned a value that is never used." verbose="Variable &apos;gnb_port_for_NGU&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/nr-softmodem.c" line="358" column="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gnb_port_for_S1U&apos; is assigned a value that is never used." verbose="Variable &apos;gnb_port_for_S1U&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/nr-softmodem.c" line="360" column="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;f_ra&apos; can be reduced." verbose="The scope of the variable &apos;f_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/lte/prach_utils.c" line="477" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CC_id&apos; can be reduced." verbose="The scope of the variable &apos;CC_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-uesoftmodem.c" line="226" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t1_ra&apos; can be reduced." verbose="The scope of the variable &apos;t1_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/lte/prach_utils.c" line="477" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nsp&apos; can be reduced." verbose="The scope of the variable &apos;Nsp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/lte/prach_utils.c" line="479" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t0_ra&apos; can be reduced." verbose="The scope of the variable &apos;t0_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/lte/prach_utils.c" line="516" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t1_ra&apos; can be reduced." verbose="The scope of the variable &apos;t1_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/lte/prach_utils.c" line="517" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t2_ra&apos; can be reduced." verbose="The scope of the variable &apos;t2_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/lte/prach_utils.c" line="518" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;unused&apos; is assigned a value that is never used." verbose="Variable &apos;unused&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/nr-uesoftmodem.c" line="412" column="40"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="executables/softmodem-common.c" line="136" column="7" info="Second condition"/>
            <location file="executables/softmodem-common.c" line="132" column="7" info="First condition"/>
            <location file="executables/softmodem-common.c" line="98" column="51" info="&apos;start_telnetclt&apos; is assigned value &apos;0&apos; here."/>
            <location file="executables/softmodem-common.c" line="98" column="30" info="&apos;start_telnetsrv&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="executables/softmodem-common.c" line="157" column="7" info="Second condition"/>
            <location file="executables/softmodem-common.c" line="153" column="7" info="First condition"/>
            <location file="executables/softmodem-common.c" line="101" column="20" info="&apos;rfsim&apos; is assigned value &apos;0&apos; here."/>
            <location file="executables/softmodem-common.c" line="100" column="46" info="&apos;nonbiot&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="executables/softmodem-common.c" line="161" column="7" info="Second condition"/>
            <location file="executables/softmodem-common.c" line="157" column="7" info="First condition"/>
            <location file="executables/softmodem-common.c" line="101" column="34" info="&apos;do_forms&apos; is assigned value &apos;0&apos; here."/>
            <location file="executables/softmodem-common.c" line="101" column="20" info="&apos;rfsim&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="executables/softmodem-common.c" line="165" column="7" info="Second condition"/>
            <location file="executables/softmodem-common.c" line="161" column="7" info="First condition"/>
            <location file="executables/softmodem-common.c" line="101" column="51" info="&apos;do_forms_qt&apos; is assigned value &apos;0&apos; here."/>
            <location file="executables/softmodem-common.c" line="101" column="34" info="&apos;do_forms&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="executables/softmodem-common.c" line="169" column="7" info="Second condition"/>
            <location file="executables/softmodem-common.c" line="165" column="7" info="First condition"/>
            <location file="executables/softmodem-common.c" line="99" column="27" info="&apos;start_websrv&apos; is assigned value &apos;0&apos; here."/>
            <location file="executables/softmodem-common.c" line="101" column="51" info="&apos;do_forms_qt&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;.s5={NULL}},{.s5&apos; depends on order of evaluation of side effects" verbose="Expression &apos;.s5={NULL}},{.s5&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/softmodem-common.c" line="107" column="42"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s5&apos; is assigned a value that is never used." verbose="Variable &apos;s5&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/softmodem-common.c" line="107" column="42"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s3a&apos; is assigned a value that is never used." verbose="Variable &apos;s3a&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/softmodem-common.c" line="107" column="42"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;us&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;us&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="common/utils/websrv/websrv.c" line="346" column="6" info="us is overwritten"/>
            <location file="common/utils/websrv/websrv.c" line="345" column="6" info="us is assigned"/>
        </error>
        <error id="redundantAssignInSwitch" severity="warning" msg="Variable &apos;oneaction&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;oneaction&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" cwe="563">
            <location file="common/utils/websrv/websrv.c" line="561" column="19" info="$symbol is overwritten"/>
            <location file="common/utils/websrv/websrv.c" line="556" column="19" info="$symbol is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/websrv/websrv.c" line="783" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_len&apos; can be reduced." verbose="The scope of the variable &apos;msg_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/ru_control.c" line="171" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/ru_control.c" line="171" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_len&apos; can be reduced." verbose="The scope of the variable &apos;msg_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/ru_control.c" line="237" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_len&apos; can be reduced." verbose="The scope of the variable &apos;msg_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/ru_control.c" line="492" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/ru_control.c" line="493" column="22"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=check_capabilities(ru,capabilities))==0,&quot;Cannot configure RRU %d, check_capabilities returned %d\n&quot;,ru-&gt;idx,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=check_capabilities(ru,capabilities))==0,&quot;Cannot configure RRU %d, check_capabilities returned %d\n&quot;,ru-&gt;idx,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/ru_control.c" line="386" column="76"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/ru_control.c" line="189" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/ru_control.c" line="301" column="14"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;obj&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;obj&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="executables/stats.c" line="46" column="26" info="obj is overwritten"/>
            <location file="executables/stats.c" line="42" column="7" info="obj is assigned"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;ret&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;ret&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="executables/nr-ue.c" line="373" column="9" info="ret is overwritten"/>
            <location file="executables/nr-ue.c" line="368" column="25" info="ret is initialized"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398">
            <location file="executables/nr-ue.c" line="922" column="9" info="Shadow variable"/>
            <location file="executables/nr-ue.c" line="747" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;fp&apos; shadows outer variable" verbose="Local variable &apos;fp&apos; shadows outer variable" cwe="398">
            <location file="executables/nr-ue.c" line="833" column="26" info="Shadow variable"/>
            <location file="executables/nr-ue.c" line="749" column="22" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398">
            <location file="executables/nr-ue.c" line="931" column="13" info="Shadow variable"/>
            <location file="executables/nr-ue.c" line="922" column="9" info="Shadowed declaration"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;(void*)&amp;UE-&gt;common_vars.rxdata[i][0]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;(void*)&amp;UE-&gt;common_vars.rxdata[i][0]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="executables/nr-ue.c" line="676" column="20"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;packedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;packedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_nvIPC.c" line="390" column="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;packedBuf+packedMsgLength&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;packedBuf+packedMsgLength&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_nvIPC.c" line="390" column="58"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;packedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;packedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_nvIPC.c" line="481" column="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;packedBuf+packedMsgLength&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;packedBuf+packedMsgLength&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_nvIPC.c" line="481" column="58"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: s" verbose="Unused variable: s" cwe="563">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p5.c" line="58" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cpuset" verbose="Unused variable: cpuset" cwe="563">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p5.c" line="59" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-enb.c" line="321" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fp&apos; can be reduced." verbose="The scope of the variable &apos;fp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-enb.c" line="484" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-enb.c" line="637" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-enb.c" line="695" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-enb.c" line="832" column="9"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB-&gt;UL_INFO_mutex))==0,&quot;error locking UL_INFO_mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB-&gt;UL_INFO_mutex))==0,&quot;error locking UL_INFO_mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="251" column="107"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB-&gt;UL_INFO_mutex))==0,&quot;error unlocking UL_INFO_mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB-&gt;UL_INFO_mutex))==0,&quot;error unlocking UL_INFO_mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="257" column="111"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex))==0,&quot;error locking L1_proc_tx mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex))==0,&quot;error locking L1_proc_tx mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="344" column="107"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_cond_signal(&amp;proc-&gt;cond))==0,&quot;ERROR pthread_cond_signal for eNB TXnp4 thread ret %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_cond_signal(&amp;proc-&gt;cond))==0,&quot;ERROR pthread_cond_signal for eNB TXnp4 thread ret %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="354" column="118"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex))==0,&quot;error unlocking L1_proc_tx mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex))==0,&quot;error unlocking L1_proc_tx mutex, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="355" column="111"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="493" column="94"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="495" column="98"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="496" column="88"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="499" column="92"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="511" column="91"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RUs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="513" column="95"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="519" column="96"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB-&gt;proc.mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="521" column="100"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;ru_proc-&gt;mutex_eNBs))==0,&quot;ERROR pthread_mutex_lock failed on mutex_eNBs L1_thread_tx with ret=%d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;ru_proc-&gt;mutex_eNBs))==0,&quot;ERROR pthread_mutex_lock failed on mutex_eNBs L1_thread_tx with ret=%d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="525" column="143"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru_proc-&gt;mutex_eNBs))==0,&quot;mutex_unlock returned %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru_proc-&gt;mutex_eNBs))==0,&quot;mutex_unlock returned %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="535" column="97"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="554" column="90"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="573" column="92"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="589" column="87"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="592" column="91"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_cond_signal(&amp;L1_proc-&gt;cond))==0,&quot;ERROR pthread_cond_signal for eNB RXn-TXnp4 thread, ret %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_cond_signal(&amp;L1_proc-&gt;cond))==0,&quot;ERROR pthread_cond_signal for eNB RXn-TXnp4 thread, ret %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="623" column="124"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="624" column="89"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RU_PRACH))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RU_PRACH))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="640" column="92"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="652" column="98"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="656" column="98"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="683" column="94"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RU_PRACH_br))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_RU_PRACH_br))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="698" column="95"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH_br))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH_br))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="713" column="101"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH_br))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_RU_PRACH_br))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="717" column="101"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach_br))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach_br))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="744" column="97"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="981" column="88"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="984" column="92"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="985" column="91"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;muex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc_tx-&gt;mutex))==0,&quot;muex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="988" column="94"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_lock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="991" column="89"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_unlock return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="994" column="93"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cyclicprefix&apos; is always true" verbose="Condition &apos;cyclicprefix&apos; is always true" cwe="571">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5_utils.c" line="279" column="20" info="Condition &apos;cyclicprefix&apos; is always true"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5_utils.c" line="278" column="26" info="Assignment &apos;cyclicprefix=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cyclicprefix&apos; is always true" verbose="Condition &apos;cyclicprefix&apos; is always true" cwe="571">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5_utils.c" line="808" column="20" info="Condition &apos;cyclicprefix&apos; is always true"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5_utils.c" line="807" column="26" info="Assignment &apos;cyclicprefix=1&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;textlog&apos; can be reduced." verbose="The scope of the variable &apos;textlog&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/enb.c" line="749" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;argv&apos; can be reduced." verbose="The scope of the variable &apos;argv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/integration_tests/main.cpp" line="31" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;argv&apos; can be reduced." verbose="The scope of the variable &apos;argv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/integration_tests/main.cpp" line="57" column="15"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="common/utils/T/tracer/enb.c" line="476" column="54"/>
        </error>
        <error id="redundantAssignInSwitch" severity="warning" msg="Variable &apos;result&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;result&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" cwe="563">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="1196" column="14" info="$symbol is overwritten"/>
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="1193" column="14" info="$symbol is assigned"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;ve&apos; shadows outer argument" verbose="Local variable &apos;ve&apos; shadows outer argument" cwe="398">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="876" column="25" info="Shadow variable"/>
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="868" column="48" info="Shadowed declaration"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="1009" column="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pDataBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pDataBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="1010" column="32"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="1013" column="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="1145" column="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/oai_integration/aerial/fapi_vnf_p7.c" line="1147" column="41"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;settingPriority&apos; is always true" verbose="Condition &apos;settingPriority&apos; is always true" cwe="571">
            <location file="executables/lte-ue.c" line="197" column="7" info="Condition &apos;settingPriority&apos; is always true"/>
            <location file="executables/lte-ue.c" line="195" column="25" info="Assignment &apos;settingPriority=1&apos;, assigned value is 1"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;proc&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;proc&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="executables/lte-ue.c" line="937" column="8" info="proc is overwritten"/>
            <location file="executables/lte-ue.c" line="929" column="24" info="proc is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ue.c" line="236" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fp&apos; can be reduced." verbose="The scope of the variable &apos;fp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ue.c" line="237" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ue.c" line="623" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rtd&apos; can be reduced." verbose="The scope of the variable &apos;rtd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ue.c" line="2035" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rtd&apos; can be reduced." verbose="The scope of the variable &apos;rtd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ue.c" line="2163" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_parms&apos; can be reduced." verbose="The scope of the variable &apos;frame_parms&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ue.c" line="2226" column="23"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-ue.c" line="1761" column="18" info="Shadow variable"/>
            <location file="executables/lte-ue.c" line="1722" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-ue.c" line="1774" column="22" info="Shadow variable"/>
            <location file="executables/lte-ue.c" line="1722" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-ue.c" line="1785" column="20" info="Shadow variable"/>
            <location file="executables/lte-ue.c" line="1722" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-ue.c" line="1809" column="18" info="Shadow variable"/>
            <location file="executables/lte-ue.c" line="1722" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;proc&apos; shadows outer variable" verbose="Local variable &apos;proc&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-ue.c" line="1875" column="29" info="Shadow variable"/>
            <location file="executables/lte-ue.c" line="1867" column="25" info="Shadowed declaration"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: _this" verbose="Memory leak: _this" cwe="401">
            <location file="nfapi/open-nFAPI/pnf/src/pnf_p7_interface.c" line="48" column="2"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: unpack_fns" verbose="Possible null pointer dereference: unpack_fns" cwe="476">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="785" column="11" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="1607" column="29" info="Calling function &apos;unpack_tlv_list&apos;, 1st argument &apos;NULL&apos; value is 0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/fapi_stub.cpp" line="315" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;last_tv_usec&apos; is assigned a value that is never used." verbose="Variable &apos;last_tv_usec&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/pnf_sim/src/fapi_stub.cpp" line="237" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;last_tv_sec&apos; is assigned a value that is never used." verbose="Variable &apos;last_tv_sec&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/pnf_sim/src/fapi_stub.cpp" line="238" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;instance&apos; is assigned a value that is never used." verbose="Variable &apos;instance&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/pnf_sim/src/fapi_stub.cpp" line="498" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;instance&apos; is assigned a value that is never used." verbose="Variable &apos;instance&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/pnf_sim/src/fapi_stub.cpp" line="502" column="31"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="589" column="11"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="615" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;r&apos; is assigned a value that is never used." verbose="Variable &apos;r&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="62" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="774" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="866" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="975" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="1067" column="16"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;ru-&gt;txfh_in_fep&gt;0&apos; is always false" verbose="Condition &apos;ru-&gt;txfh_in_fep&gt;0&apos; is always false" cwe="570">
            <location file="executables/nr-ru.c" line="1746" column="52" info="Condition &apos;ru-&gt;txfh_in_fep&gt;0&apos; is always false"/>
            <location file="executables/nr-ru.c" line="1741" column="34" info="ru-&gt;txfh_in_fep is assigned value 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;gNB0&apos; is always true" verbose="Condition &apos;gNB0&apos; is always true" cwe="571">
            <location file="executables/nr-ru.c" line="1829" column="11" info="Condition &apos;gNB0&apos; is always true"/>
            <location file="executables/nr-ru.c" line="1825" column="9" info="Assuming that condition &apos;gNB0&apos; is not redundant"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;cfg-&gt;carrier_config.dl_grid_size[mu].value&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;cfg-&gt;carrier_config.dl_grid_size[mu].value&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="executables/nr-ru.c" line="1621" column="68" info="cfg-&gt;carrier_config.dl_grid_size[mu].value is overwritten"/>
            <location file="executables/nr-ru.c" line="1620" column="68" info="cfg-&gt;carrier_config.dl_grid_size[mu].value is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_len&apos; can be reduced." verbose="The scope of the variable &apos;msg_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-ru.c" line="152" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;samples_per_slot_prev&apos; can be reduced." verbose="The scope of the variable &apos;samples_per_slot_prev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-ru.c" line="603" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-ru.c" line="949" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-ru.c" line="949" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;card&apos; can be reduced." verbose="The scope of the variable &apos;card&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-ru.c" line="950" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ant&apos; can be reduced." verbose="The scope of the variable &apos;ant&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-ru.c" line="950" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/nr-ru.c" line="1145" column="22"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="executables/nr-ru.c" line="1103" column="16" info="Shadow variable"/>
            <location file="executables/nr-ru.c" line="1080" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ret&apos; shadows outer variable" verbose="Local variable &apos;ret&apos; shadows outer variable" cwe="398">
            <location file="executables/nr-ru.c" line="1195" column="13" info="Shadow variable"/>
            <location file="executables/nr-ru.c" line="1145" column="22" info="Shadowed declaration"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;(void*)&amp;ru-&gt;common.txdata[i][fp-&gt;get_samples_slot_timestamp(slot,fp,0)]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;(void*)&amp;ru-&gt;common.txdata[i][fp-&gt;get_samples_slot_timestamp(slot,fp,0)]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="executables/nr-ru.c" line="825" column="89"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/nr-ru.c" line="137" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/nr-ru.c" line="218" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;textlog&apos; can be reduced." verbose="The scope of the variable &apos;textlog&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="common/utils/T/tracer/ue.c" line="707" column="13"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="common/utils/T/tracer/ue.c" line="465" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_buffer&apos; can be reduced." verbose="The scope of the variable &apos;header_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/pnf/src/pnf.c" line="1994" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_buffer&apos; can be reduced." verbose="The scope of the variable &apos;header_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/pnf/src/pnf.c" line="2127" column="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;events&apos; shadows outer variable" verbose="Local variable &apos;events&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="229" column="31" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="82" column="30" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="341" column="28" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="302" column="25" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="385" column="27" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="302" column="25" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="409" column="28" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="385" column="27" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;events&apos; shadows outer variable" verbose="Local variable &apos;events&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="634" column="31" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="487" column="30" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="746" column="28" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="707" column="25" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="790" column="27" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="707" column="25" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="814" column="28" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf/src/vnf_interface.c" line="790" column="27" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_buffer&apos; can be reduced." verbose="The scope of the variable &apos;header_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf.c" line="1259" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;packedMessageLength&apos; can be reduced." verbose="The scope of the variable &apos;packedMessageLength&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/vnf/src/vnf.c" line="1528" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;packedMessageLength&apos; is assigned a value that is never used." verbose="Variable &apos;packedMessageLength&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/vnf/src/vnf.c" line="1528" column="27"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;eNB0&apos; is always true" verbose="Condition &apos;eNB0&apos; is always true" cwe="571">
            <location file="executables/lte-ru.c" line="2721" column="11" info="Condition &apos;eNB0&apos; is always true"/>
            <location file="executables/lte-ru.c" line="2717" column="9" info="Assuming that condition &apos;eNB0&apos; is not redundant"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;[eNB] error locking proc mutex for eNB pre scd, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;[eNB] error locking proc mutex for eNB pre scd, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="234" column="132"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;[eNB] error unlocking proc mutex for eNB pre scd, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;[eNB] error unlocking proc mutex for eNB pre scd, return %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-enb.c" line="247" column="136"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rxs&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rxs&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="executables/lte-ru.c" line="1114" column="7" info="rxs is overwritten"/>
            <location file="executables/lte-ru.c" line="1100" column="13" info="rxs is assigned"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;fp&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;fp&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="executables/lte-ru.c" line="1936" column="6" info="fp is overwritten"/>
            <location file="executables/lte-ru.c" line="1927" column="26" info="fp is initialized"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ru-&gt;generate_dmrs_sync&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ru-&gt;generate_dmrs_sync&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="executables/lte-ru.c" line="2669" column="28" info="ru-&gt;generate_dmrs_sync is overwritten"/>
            <location file="executables/lte-ru.c" line="2659" column="28" info="ru-&gt;generate_dmrs_sync is assigned"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;numerology &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="executables/lte-ru.c" line="545" column="28"/>
            <location file="executables/lte-ru.c" line="542" column="20" info="&apos;numerology&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="duplicateExpressionTernary" severity="style" msg="Same expression in both branches of ternary operator." verbose="Finding the same expression in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="executables/lte-ru.c" line="2577" column="92"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cyclicprefix&apos; is always true" verbose="Condition &apos;cyclicprefix&apos; is always true" cwe="571">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="1145" column="20" info="Condition &apos;cyclicprefix&apos; is always true"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="1144" column="26" info="Assignment &apos;cyclicprefix=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cyclicprefix&apos; is always true" verbose="Condition &apos;cyclicprefix&apos; is always true" cwe="571">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="1343" column="30" info="Condition &apos;cyclicprefix&apos; is always true"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="1342" column="36" info="Assignment &apos;cyclicprefix=1&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="551" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txp&apos; can be reduced." verbose="The scope of the variable &apos;txp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="719" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txs&apos; can be reduced." verbose="The scope of the variable &apos;txs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="720" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="721" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="902" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ic&apos; can be reduced." verbose="The scope of the variable &apos;ic&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="1062" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="1386" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="1386" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;card&apos; can be reduced." verbose="The scope of the variable &apos;card&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="1387" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ant&apos; can be reduced." verbose="The scope of the variable &apos;ant&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="1387" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="1511" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CC_id&apos; can be reduced." verbose="The scope of the variable &apos;CC_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="2681" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="2886" column="7"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_ru))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_ru))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="437" column="89"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_ru))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_ru))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="439" column="93"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_emulateRF))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_emulateRF))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="567" column="94"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_emulateRF))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_emulateRF))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="570" column="98"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;slave_proc-&gt;mutex_FH))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;slave_proc-&gt;mutex_FH))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="924" column="99"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: header." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: header." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="76" column="11" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="144" column="46" info="Calling function &apos;fapi_nr_p5_message_body_pack&apos;, 1st argument &apos;pMessageHeader&apos; value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="131" column="36" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="133" column="15" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="152" column="10" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="158" column="7" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="159" column="10" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="160" column="10" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="161" column="10" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." verbose="Either the condition &apos;pMessageBuf!=NULL&apos; is redundant or there is possible null pointer dereference: pMessageHeader." cwe="476">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="167" column="15" info="Null pointer dereference"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="129" column="50" info="Assignment &apos;pMessageHeader=pMessageBuf&apos;, assigned value is 0"/>
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="137" column="27" info="Assuming that condition &apos;pMessageBuf!=NULL&apos; is not redundant"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_synch))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_synch))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1054" column="97"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_synch))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_synch))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1106" column="95"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_synch))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_synch))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1108" column="99"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_prach))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_prach))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1270" column="97"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_prach_br))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_prach_br))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1296" column="100"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB_proc-&gt;mutex_RU_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;eNB_proc-&gt;mutex_RU_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1564" column="96"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB_proc-&gt;mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB_proc-&gt;mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1582" column="102"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB_proc-&gt;mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;eNB_proc-&gt;mutex_RU_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1586" column="102"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc-&gt;mutex_RUs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;L1_proc-&gt;mutex_RUs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1587" column="96"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex_RUs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;L1_proc-&gt;mutex_RUs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1598" column="100"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(ru-&gt;ru_mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(ru-&gt;ru_mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1642" column="84"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(ru-&gt;ru_mutex))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(ru-&gt;ru_mutex))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1645" column="88"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(ru-&gt;ru_mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(ru-&gt;ru_mutex))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1665" column="84"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(ru-&gt;ru_mutex))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(ru-&gt;ru_mutex))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1668" column="88"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1672" column="86"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1675" column="90"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1720" column="98"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1723" column="102"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1825" column="93"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1829" column="97"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_FH))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_FH))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2368" column="85"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_FH))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_FH))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2371" column="89"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2372" column="86"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_FH1))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2375" column="90"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2376" column="88"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2379" column="92"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_prach_br))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_prach_br))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2380" column="91"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach_br))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_prach_br))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2383" column="95"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_synch))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_synch))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2384" column="88"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_synch))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_synch))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2387" column="92"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2388" column="87"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_eNBs))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2393" column="91"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2394" column="94"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_asynch_rxtx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2397" column="98"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-ru.c" line="836" column="14" info="Shadow variable"/>
            <location file="executables/lte-ru.c" line="721" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="executables/lte-ru.c" line="1067" column="12" info="Shadow variable"/>
            <location file="executables/lte-ru.c" line="1062" column="21" info="Shadowed declaration"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="nfapi/open-nFAPI/vnf/tests/vnf_cunit_main.c" line="743" column="2"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;res&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;res&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="145" column="19" info="Unsigned positive"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;addr.sin6_family&apos; is assigned a value that is never used." verbose="Variable &apos;addr.sin6_family&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/vnf/tests/vnf_cunit_main.c" line="1315" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;addr.sin6_port&apos; is assigned a value that is never used." verbose="Variable &apos;addr.sin6_port&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/vnf/tests/vnf_cunit_main.c" line="1316" column="17"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="139" column="41"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/fapi/src/nr_fapi_p5.c" line="1310" column="21"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="241" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="291" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="437" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="452" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="487" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cyclicprefix&apos; is always true" verbose="Condition &apos;cyclicprefix&apos; is always true" cwe="571">
            <location file="nfapi/tests/p5/nr_fapi_config_request_test.c" line="193" column="20" info="Condition &apos;cyclicprefix&apos; is always true"/>
            <location file="nfapi/tests/p5/nr_fapi_config_request_test.c" line="192" column="26" info="Assignment &apos;cyclicprefix=1&apos;, assigned value is 1"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="505" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="535" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="558" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="777" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="978" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="1619" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="1737" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="192" column="17" info="Shadowed declaration"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte.c" line="145" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy&apos; can be reduced." verbose="The scope of the variable &apos;dummy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte.c" line="116" column="7"/>
        </error>
        <error id="sizeofDivisionMemfunc" severity="warning" msg="Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead?" verbose="Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead?" cwe="682">
            <location file="openair1/PHY/CODING/3gpplte.c" line="453" column="76"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;flags&apos; is assigned a value that is never used." verbose="Variable &apos;flags&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/lte-ru.c" line="776" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;packedMsgLen&apos; can be reduced." verbose="The scope of the variable &apos;packedMsgLen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="1382" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;packedBodyLen&apos; can be reduced." verbose="The scope of the variable &apos;packedBodyLen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="1383" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;packedMsgLen16&apos; can be reduced." verbose="The scope of the variable &apos;packedMsgLen16&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="1384" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;packedMsgLen&apos; can be reduced." verbose="The scope of the variable &apos;packedMsgLen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="1430" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;packedMsgLen16&apos; can be reduced." verbose="The scope of the variable &apos;packedMsgLen16&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="1431" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;flags&apos; is assigned a value that is never used." verbose="Variable &apos;flags&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/lte-ru.c" line="782" column="17"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;loop&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;loop&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_sse.c" line="147" column="7" info="loop is overwritten"/>
            <location file="openair1/PHY/CODING/3gpplte_sse.c" line="112" column="15" info="loop is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur_s1&apos; can be reduced." verbose="The scope of the variable &apos;cur_s1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_sse.c" line="304" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur_s2&apos; can be reduced." verbose="The scope of the variable &apos;cur_s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_sse.c" line="304" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="executables/lte-ru.c" line="2886" column="9"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;msg_size&apos; shadows outer argument" verbose="Local variable &apos;msg_size&apos; shadows outer argument" cwe="398">
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="551" column="12" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="532" column="84" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;msg_size&apos; shadows outer argument" verbose="Local variable &apos;msg_size&apos; shadows outer argument" cwe="398">
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="621" column="12" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="602" column="95" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;addr&apos; shadows outer variable" verbose="Local variable &apos;addr&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="1514" column="22" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="1485" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;addr&apos; shadows outer variable" verbose="Local variable &apos;addr&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="1835" column="22" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="1806" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;addr&apos; shadows outer variable" verbose="Local variable &apos;addr&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="2007" column="22" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="1978" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;addr&apos; shadows outer variable" verbose="Local variable &apos;addr&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="2173" column="22" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/pnf/tests/pnf_cunit_main.c" line="2144" column="21" info="Shadowed declaration"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1035" column="29"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1035" column="24" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1036" column="24"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1036" column="19" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1047" column="29"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1047" column="24" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1048" column="24"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="1048" column="19" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1321" column="33"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1321" column="28" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1322" column="28"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1322" column="23" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1330" column="33"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1330" column="28" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1331" column="28"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1331" column="23" info="Address of variable taken here."/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1313" column="22" info="Second condition"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1268" column="22" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new4&apos; can be reduced." verbose="The scope of the variable &apos;new4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="356" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new5&apos; can be reduced." verbose="The scope of the variable &apos;new5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="356" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new6&apos; can be reduced." verbose="The scope of the variable &apos;new6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="356" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new7&apos; can be reduced." verbose="The scope of the variable &apos;new7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="356" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b4&apos; can be reduced." verbose="The scope of the variable &apos;m_b4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="357" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b5&apos; can be reduced." verbose="The scope of the variable &apos;m_b5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="357" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b6&apos; can be reduced." verbose="The scope of the variable &apos;m_b6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="357" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b7&apos; can be reduced." verbose="The scope of the variable &apos;m_b7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="357" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new0&apos; can be reduced." verbose="The scope of the variable &apos;new0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new1&apos; can be reduced." verbose="The scope of the variable &apos;new1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new2&apos; can be reduced." verbose="The scope of the variable &apos;new2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new3&apos; can be reduced." verbose="The scope of the variable &apos;new3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new4&apos; can be reduced." verbose="The scope of the variable &apos;new4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new5&apos; can be reduced." verbose="The scope of the variable &apos;new5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new6&apos; can be reduced." verbose="The scope of the variable &apos;new6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new7&apos; can be reduced." verbose="The scope of the variable &apos;new7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="555" column="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b0&apos; can be reduced." verbose="The scope of the variable &apos;m_b0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b1&apos; can be reduced." verbose="The scope of the variable &apos;m_b1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b2&apos; can be reduced." verbose="The scope of the variable &apos;m_b2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b3&apos; can be reduced." verbose="The scope of the variable &apos;m_b3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b4&apos; can be reduced." verbose="The scope of the variable &apos;m_b4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b5&apos; can be reduced." verbose="The scope of the variable &apos;m_b5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b6&apos; can be reduced." verbose="The scope of the variable &apos;m_b6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_b7&apos; can be reduced." verbose="The scope of the variable &apos;m_b7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="556" column="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11&apos; can be reduced." verbose="The scope of the variable &apos;m11&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="557" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10&apos; can be reduced." verbose="The scope of the variable &apos;m10&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="557" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta_max&apos; can be reduced." verbose="The scope of the variable &apos;beta_max&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="558" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11&apos; can be reduced." verbose="The scope of the variable &apos;m11&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="806" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10&apos; can be reduced." verbose="The scope of the variable &apos;m10&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="806" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m00_1&apos; can be reduced." verbose="The scope of the variable &apos;m00_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_1&apos; can be reduced." verbose="The scope of the variable &apos;m11_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m00_2&apos; can be reduced." verbose="The scope of the variable &apos;m00_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_2&apos; can be reduced." verbose="The scope of the variable &apos;m11_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m00_3&apos; can be reduced." verbose="The scope of the variable &apos;m00_3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_3&apos; can be reduced." verbose="The scope of the variable &apos;m11_3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m00_4&apos; can be reduced." verbose="The scope of the variable &apos;m00_4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_4&apos; can be reduced." verbose="The scope of the variable &apos;m11_4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="807" column="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m01_1&apos; can be reduced." verbose="The scope of the variable &apos;m01_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_1&apos; can be reduced." verbose="The scope of the variable &apos;m10_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m01_2&apos; can be reduced." verbose="The scope of the variable &apos;m01_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_2&apos; can be reduced." verbose="The scope of the variable &apos;m10_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m01_3&apos; can be reduced." verbose="The scope of the variable &apos;m01_3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_3&apos; can be reduced." verbose="The scope of the variable &apos;m10_3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m01_4&apos; can be reduced." verbose="The scope of the variable &apos;m01_4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_4&apos; can be reduced." verbose="The scope of the variable &apos;m10_4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="808" column="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="902" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oldcrc&apos; can be reduced." verbose="The scope of the variable &apos;oldcrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="904" column="17"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m11&apos; shadows outer variable" verbose="Local variable &apos;m11&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="354" column="9" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="143" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m10&apos; shadows outer variable" verbose="Local variable &apos;m10&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="354" column="13" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="144" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m11&apos; shadows outer variable" verbose="Local variable &apos;m11&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="557" column="9" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="143" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m10&apos; shadows outer variable" verbose="Local variable &apos;m10&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="557" column="13" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="144" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m11&apos; shadows outer variable" verbose="Local variable &apos;m11&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="806" column="9" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="143" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m10&apos; shadows outer variable" verbose="Local variable &apos;m10&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="806" column="13" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="144" column="7" info="Shadowed declaration"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;m10&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;m10&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="480" column="6" info="m10 is overwritten"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="470" column="6" info="m10 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="931" column="21"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;udp&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;udp&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="104" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi4_p&apos; can be reduced." verbose="The scope of the variable &apos;pi4_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1002" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi5_p&apos; can be reduced." verbose="The scope of the variable &apos;pi5_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1002" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi6_p&apos; can be reduced." verbose="The scope of the variable &apos;pi6_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1002" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="1004" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="149" column="4"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="1391" column="41"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new0&apos; is assigned a value that is never used." verbose="Variable &apos;new0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="481" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new1&apos; is assigned a value that is never used." verbose="Variable &apos;new1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="482" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new2&apos; is assigned a value that is never used." verbose="Variable &apos;new2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="483" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new3&apos; is assigned a value that is never used." verbose="Variable &apos;new3&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="484" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="408" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new4&apos; is assigned a value that is never used." verbose="Variable &apos;new4&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="485" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="578" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new5&apos; is assigned a value that is never used." verbose="Variable &apos;new5&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="486" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="611" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new6&apos; is assigned a value that is never used." verbose="Variable &apos;new6&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="487" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="839" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new7&apos; is assigned a value that is never used." verbose="Variable &apos;new7&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="488" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="853" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new0&apos; is assigned a value that is never used." verbose="Variable &apos;new0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="544" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta0_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta0_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="508" column="11"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="886" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new1&apos; is assigned a value that is never used." verbose="Variable &apos;new1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="545" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta1_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta1_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="509" column="11"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="894" column="6"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new2&apos; is assigned a value that is never used." verbose="Variable &apos;new2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="546" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta2_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta2_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="510" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new3&apos; is assigned a value that is never used." verbose="Variable &apos;new3&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="547" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta3_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta3_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="511" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new0&apos; is assigned a value that is never used." verbose="Variable &apos;new0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="780" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta4_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta4_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="512" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new1&apos; is assigned a value that is never used." verbose="Variable &apos;new1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="781" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta5_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta5_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="513" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new2&apos; is assigned a value that is never used." verbose="Variable &apos;new2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="782" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta6_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta6_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="514" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new3&apos; is assigned a value that is never used." verbose="Variable &apos;new3&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="783" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta7_16&apos; is assigned a value that is never used." verbose="Variable &apos;beta7_16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="515" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new4&apos; is assigned a value that is never used." verbose="Variable &apos;new4&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="784" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new5&apos; is assigned a value that is never used." verbose="Variable &apos;new5&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="785" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new6&apos; is assigned a value that is never used." verbose="Variable &apos;new6&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="786" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new7&apos; is assigned a value that is never used." verbose="Variable &apos;new7&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="787" column="9"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="1438" column="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p5.c" line="2311" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rotation_bits&apos; can be reduced." verbose="The scope of the variable &apos;rotation_bits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="628" column="11"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1068" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1077" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1120" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1193" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1201" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1260" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1268" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1298" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1306" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1336" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1344" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1394" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1402" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1437" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1445" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1478" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1486" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1515" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1555" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1591" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1625" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1700" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1711" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1722" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1732" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1880" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1941" column="4"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1370" column="33"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1370" column="28" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1371" column="28"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1371" column="23" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1379" column="33"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1379" column="28" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1380" column="28"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1380" column="23" info="Address of variable taken here."/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pnf_phy_user_data_t::config&apos; is never used." verbose="struct member &apos;pnf_phy_user_data_t::config&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="187" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta0&apos; can be reduced." verbose="The scope of the variable &apos;beta0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="528" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta1&apos; can be reduced." verbose="The scope of the variable &apos;beta1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="528" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta2&apos; can be reduced." verbose="The scope of the variable &apos;beta2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="529" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta3&apos; can be reduced." verbose="The scope of the variable &apos;beta3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="529" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta4&apos; can be reduced." verbose="The scope of the variable &apos;beta4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="529" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta5&apos; can be reduced." verbose="The scope of the variable &apos;beta5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="529" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta6&apos; can be reduced." verbose="The scope of the variable &apos;beta6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="529" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta7&apos; can be reduced." verbose="The scope of the variable &apos;beta7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="529" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="856" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi4_p&apos; can be reduced." verbose="The scope of the variable &apos;pi4_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="932" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi5_p&apos; can be reduced." verbose="The scope of the variable &apos;pi5_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="932" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi6_p&apos; can be reduced." verbose="The scope of the variable &apos;pi6_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="932" column="22"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pnf_phy_user_data_t::p7_config&apos; is never used." verbose="struct member &apos;pnf_phy_user_data_t::p7_config&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="189" column="26"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="202" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: loopval" verbose="Unused variable: loopval" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="202" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rerun_flag" verbose="Unused variable: rerun_flag" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="202" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;beta0&apos; is assigned a value that is never used." verbose="Variable &apos;beta0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="561" column="13"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: decoded_bytes_interl" verbose="Unused variable: decoded_bytes_interl" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1172" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;proc&apos; is assigned a value that is never used." verbose="Variable &apos;proc&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_pnf.c" line="1112" column="10"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;item&apos; can be declared with const" verbose="Parameter &apos;item&apos; can be declared with const" cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="582" column="79"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;item&apos; can be declared with const" verbose="Parameter &apos;item&apos; can be declared with const" cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1593" column="78"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;item&apos; can be declared with const" verbose="Parameter &apos;item&apos; can be declared with const" cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1627" column="78"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;item&apos; can be declared with const" verbose="Parameter &apos;item&apos; can be declared with const" cwe="398">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1882" column="78"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;ve&apos; shadows outer argument" verbose="Local variable &apos;ve&apos; shadows outer argument" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="185" column="25" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="178" column="41" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="309" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="319" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="355" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;ve&apos; shadows outer argument" verbose="Local variable &apos;ve&apos; shadows outer argument" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1336" column="25" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1329" column="41" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;config&apos; shadows outer variable" verbose="Local variable &apos;config&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1395" column="26" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1740" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;config&apos; shadows outer variable" verbose="Local variable &apos;config&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1403" column="26" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1740" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1486" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1510" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1538" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1601" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1679" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vnf&apos; shadows outer variable" verbose="Local variable &apos;vnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1689" column="13" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1756" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;config&apos; shadows outer variable" verbose="Local variable &apos;config&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1771" column="23" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1740" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;config&apos; shadows outer variable" verbose="Local variable &apos;config&apos; shadows outer variable" cwe="398">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1820" column="23" info="Shadow variable"/>
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="1740" column="21" info="Shadowed declaration"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;iind&apos; is used before limits check." verbose="Defensive programming: The variable &apos;iind&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2049" column="23"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2467" column="33"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2467" column="28" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2468" column="28"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2468" column="23" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2476" column="33"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2476" column="28" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2477" column="28"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2477" column="23" info="Address of variable taken here."/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2459" column="22" info="Second condition"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2356" column="22" info="First condition"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;m10&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;m10&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1216" column="6" info="m10 is overwritten"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1211" column="6" info="m10 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11p&apos; can be reduced." verbose="The scope of the variable &apos;m11p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10p&apos; can be reduced." verbose="The scope of the variable &apos;m10p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta_ptr&apos; can be reduced." verbose="The scope of the variable &apos;beta_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1196" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_128&apos; can be reduced." verbose="The scope of the variable &apos;m11_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1757" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_128&apos; can be reduced." verbose="The scope of the variable &apos;m10_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1757" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext_128&apos; can be reduced." verbose="The scope of the variable &apos;ext_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1757" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1934" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n2&apos; can be reduced." verbose="The scope of the variable &apos;n2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1934" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi4_p&apos; can be reduced." verbose="The scope of the variable &apos;pi4_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2016" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi5_p&apos; can be reduced." verbose="The scope of the variable &apos;pi5_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2016" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2019" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rotation_bits&apos; is assigned a value that is never used." verbose="Variable &apos;rotation_bits&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/common/src/nfapi.c" line="628" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;alpha128&apos; is assigned a value that is never used." verbose="Variable &apos;alpha128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="375" column="26"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;uerr==1&apos; is always false" verbose="Condition &apos;uerr==1&apos; is always false" cwe="570">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="291" column="13" info="Condition &apos;uerr==1&apos; is always false"/>
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="228" column="10" info="Assignment &apos;uerr=0&apos;, assigned value is 0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;req&apos; is assigned a value that is never used." verbose="Variable &apos;req&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/pnf_sim/src/main.cpp" line="1785" column="26"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="339" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max&apos; is assigned a value that is never used." verbose="Variable &apos;max&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="219" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max&apos; is assigned a value that is never used." verbose="Variable &apos;max&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder.c" line="279" column="11"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="433" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="436" column="3"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;done1 == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="482" column="29"/>
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="361" column="14" info="&apos;done1&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;&amp;&amp;&apos; because &apos;done2==1&apos; and &apos;done1==1&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="482" column="34"/>
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="361" column="14" info="&apos;done1&apos; is assigned value &apos;1&apos; here."/>
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="362" column="14" info="&apos;done2&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;done2 == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="482" column="43"/>
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="362" column="14" info="&apos;done2&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="193" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uerr&apos; can be reduced." verbose="The scope of the variable &apos;uerr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="194" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;errors2&apos; can be reduced." verbose="The scope of the variable &apos;errors2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="356" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;errors3&apos; can be reduced." verbose="The scope of the variable &apos;errors3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="356" column="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sigma&apos; can be reduced." verbose="The scope of the variable &apos;sigma&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="357" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ind" verbose="Unused variable: ind" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="65" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;crc&apos; is assigned a value that is never used." verbose="Variable &apos;crc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="192" column="19"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: decoded_output" verbose="Unused variable: decoded_output" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="190" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: crc_type" verbose="Unused variable: crc_type" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="195" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rate&apos; is assigned a value that is never used." verbose="Variable &apos;rate&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="357" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errors2&apos; is assigned a value that is never used." verbose="Variable &apos;errors2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="450" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errors3&apos; is assigned a value that is never used." verbose="Variable &apos;errors3&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="451" column="12"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ret2" verbose="Unused variable: ret2" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="355" column="11"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: trials2" verbose="Unused variable: trials2" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="356" column="68"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: trials3" verbose="Unused variable: trials3" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="356" column="97"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;shifted_slot&apos; is less than zero." verbose="The unsigned expression &apos;shifted_slot&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="nfapi/open-nFAPI/pnf/src/pnf_p7.c" line="961" column="20" info="Unsigned less than zero"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/TESTBENCH/ldpctest.c" line="528" column="11" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/TESTBENCH/ldpctest.c" line="525" column="17" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/TESTBENCH/ldpctest.c" line="526" column="17" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369">
            <location file="openair1/PHY/CODING/TESTBENCH/ldpctest.c" line="251" column="107" info="Division by zero"/>
            <location file="openair1/PHY/CODING/TESTBENCH/ldpctest.c" line="238" column="12" info="Assignment &apos;Zc=0&apos;, assigned value is 0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="235" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="680" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="704" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="907" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="930" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="953" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="978" column="12"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;one_measurement_t::crc_misses&apos; is never used." verbose="struct member &apos;one_measurement_t::crc_misses&apos; is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/ldpctest.c" line="94" column="16"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="304" column="9"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="304" column="9"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;udp&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;udp&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="123" column="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crc&apos; can be reduced." verbose="The scope of the variable &apos;crc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="139" column="16"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/CODING/TESTBENCH/ltetest.c" line="235" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SNR_lin&apos; can be reduced." verbose="The scope of the variable &apos;SNR_lin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/polartest.c" line="28" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fileName&apos; can be reduced." verbose="The scope of the variable &apos;fileName&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/polartest.c" line="140" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;currentTimeInfo&apos; can be reduced." verbose="The scope of the variable &apos;currentTimeInfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/polartest.c" line="140" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;folderName&apos; can be reduced." verbose="The scope of the variable &apos;folderName&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/polartest.c" line="141" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crce&apos; can be reduced." verbose="The scope of the variable &apos;crce&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="139" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sigma&apos; can be reduced." verbose="The scope of the variable &apos;sigma&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="229" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;crce&apos; is assigned a value that is never used." verbose="Variable &apos;crce&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="187" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;crc&apos; is assigned a value that is never used." verbose="Variable &apos;crc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="188" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ret2" verbose="Unused variable: ret2" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="227" column="11"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rate" verbose="Unused variable: rate" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="229" column="20"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: qbits" verbose="Unused variable: qbits" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="230" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iind" verbose="Unused variable: iind" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="235" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: coded_bits" verbose="Unused variable: coded_bits" cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/pdcch_test.c" line="236" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SNR_lin&apos; can be reduced." verbose="The scope of the variable &apos;SNR_lin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/smallblocktest.c" line="24" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/ccoding_byte.c" line="52" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sigma&apos; can be reduced." verbose="The scope of the variable &apos;sigma&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/smallblocktest.c" line="24" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nBitError&apos; is assigned a value that is never used." verbose="Variable &apos;nBitError&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/smallblocktest.c" line="152" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;blockErrorState&apos; is assigned a value that is never used." verbose="Variable &apos;blockErrorState&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/smallblocktest.c" line="153" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crc_dec&apos; can be reduced." verbose="The scope of the variable &apos;crc_dec&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/viterbi_test.c" line="87" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/viterbi_test.c" line="88" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/viterbi_test.c" line="209" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sigma&apos; can be reduced." verbose="The scope of the variable &apos;sigma&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/viterbi_test.c" line="214" column="10"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;decoded_output&apos; shadows outer variable" verbose="Local variable &apos;decoded_output&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/TESTBENCH/viterbi_test.c" line="85" column="47" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/TESTBENCH/viterbi_test.c" line="70" column="22" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/viterbi_test.c" line="227" column="9"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;udp_data::enabled&apos; is never used." verbose="struct member &apos;udp_data::enabled&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="57" column="11"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;udp_data::rx_port&apos; is never used." verbose="struct member &apos;udp_data::rx_port&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="58" column="12"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;udp_data::tx_port&apos; is never used." verbose="struct member &apos;udp_data::tx_port&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="59" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;currentPtr&apos; is assigned a value that is never used." verbose="Variable &apos;currentPtr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/polartest.c" line="188" column="32"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;decoderState&apos; is assigned a value that is never used." verbose="Variable &apos;decoderState&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/TESTBENCH/polartest.c" line="223" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="294" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="299" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="304" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="309" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="315" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="320" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="325" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="330" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="335" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="340" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="345" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="350" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="355" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="360" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="365" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="427" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="462" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="472" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="489" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="535" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="574" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="952" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="980" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="1011" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="1547" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c16&apos; can be reduced." verbose="The scope of the variable &apos;c16&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/ccoding_byte_lte.c" line="59" column="12"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;udp_data::tx_addr&apos; is never used." verbose="struct member &apos;udp_data::tx_addr&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="60" column="8"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;ve&apos; shadows outer argument" verbose="Local variable &apos;ve&apos; shadows outer argument" cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="196" column="25" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="189" column="41" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;ve&apos; shadows outer argument" verbose="Local variable &apos;ve&apos; shadows outer argument" cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="218" column="25" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="211" column="45" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="558" column="14" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="554" column="13" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pnf&apos; shadows outer variable" verbose="Local variable &apos;pnf&apos; shadows outer variable" cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="998" column="17" info="Shadow variable"/>
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="995" column="15" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index3&apos; can be reduced." verbose="The scope of the variable &apos;index3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="51" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="123" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index3&apos; can be reduced." verbose="The scope of the variable &apos;index3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="124" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index3&apos; can be reduced." verbose="The scope of the variable &apos;index3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="181" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="227" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index3&apos; can be reduced." verbose="The scope of the variable &apos;index3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="229" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="269" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="356" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;index&apos; is assigned a value that is never used." verbose="Variable &apos;index&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="167" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;index&apos; is assigned a value that is never used." verbose="Variable &apos;index&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="261" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Nir&apos; is assigned a value that is never used." verbose="Variable &apos;Nir&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="674" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/crc_byte.c" line="70" column="24"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;item&apos; can be declared with const" verbose="Parameter &apos;item&apos; can be declared with const" cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="582" column="77"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;item&apos; can be declared with const" verbose="Parameter &apos;item&apos; can be declared with const" cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="1016" column="79"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;item&apos; can be declared with const" verbose="Parameter &apos;item&apos; can be declared with const" cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/main.cpp" line="1556" column="79"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="153" column="58"/>
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="153" column="53" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="154" column="62"/>
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="154" column="57" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="42" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Kr&apos; can be reduced." verbose="The scope of the variable &apos;Kr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="42" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="42" column="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_segmentation.c" line="42" column="44"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="1492" column="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="1628" column="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="1655" column="30"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::band&apos; is never used." verbose="struct member &apos;rf_info::band&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="99" column="12"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::max_transmit_power&apos; is never used." verbose="struct member &apos;rf_info::max_transmit_power&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="100" column="11"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::min_transmit_power&apos; is never used." verbose="struct member &apos;rf_info::min_transmit_power&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="101" column="11"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::num_antennas_supported&apos; is never used." verbose="struct member &apos;rf_info::num_antennas_supported&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="102" column="11"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::min_downlink_frequency&apos; is never used." verbose="struct member &apos;rf_info::min_downlink_frequency&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="103" column="12"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::max_downlink_frequency&apos; is never used." verbose="struct member &apos;rf_info::max_downlink_frequency&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="104" column="12"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::max_uplink_frequency&apos; is never used." verbose="struct member &apos;rf_info::max_uplink_frequency&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="105" column="12"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="110" column="9" info="Second condition"/>
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="105" column="9" info="First condition"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;rf_info::min_uplink_frequency&apos; is never used." verbose="struct member &apos;rf_info::min_uplink_frequency&apos; is never used." cwe="563">
            <location file="nfapi/oai_integration/nfapi_vnf.c" line="106" column="12"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="344" column="9" info="Second condition"/>
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="339" column="9" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iBlkCol&apos; can be reduced." verbose="The scope of the variable &apos;iBlkCol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="88" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iCol&apos; can be reduced." verbose="The scope of the variable &apos;iCol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="90" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift_t&apos; can be reduced." verbose="The scope of the variable &apos;shift_t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="92" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="97" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q_abs&apos; can be reduced." verbose="The scope of the variable &apos;Q_abs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="97" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;R_temp&apos; can be reduced." verbose="The scope of the variable &apos;R_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="98" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iBlkCol&apos; can be reduced." verbose="The scope of the variable &apos;iBlkCol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="160" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iCol&apos; can be reduced." verbose="The scope of the variable &apos;iCol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="162" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift_t&apos; can be reduced." verbose="The scope of the variable &apos;shift_t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="164" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="169" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q_abs&apos; can be reduced." verbose="The scope of the variable &apos;Q_abs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="169" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iBlkRow&apos; can be reduced." verbose="The scope of the variable &apos;iBlkRow&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="235" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iRow&apos; can be reduced." verbose="The scope of the variable &apos;iRow&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="237" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift_t&apos; can be reduced." verbose="The scope of the variable &apos;shift_t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="240" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sf&apos; can be reduced." verbose="The scope of the variable &apos;sf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="240" column="15"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;dev_llr[tid]&apos; is less than zero." verbose="The unsigned expression &apos;dev_llr[tid]&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_kernels_CL.c" line="281" column="18" info="Unsigned less than zero"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="680" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="704" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="907" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="930" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="953" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p4.c" line="978" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ptr&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="210" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11p&apos; can be reduced." verbose="The scope of the variable &apos;m11p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="211" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10p&apos; can be reduced." verbose="The scope of the variable &apos;m10p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="211" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta128&apos; can be reduced." verbose="The scope of the variable &apos;beta128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="525" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_128&apos; can be reduced." verbose="The scope of the variable &apos;m11_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="731" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_128&apos; can be reduced." verbose="The scope of the variable &apos;m10_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="731" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext_128&apos; can be reduced." verbose="The scope of the variable &apos;ext_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="731" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;decoded_bytes_interl&apos; can be reduced." verbose="The scope of the variable &apos;decoded_bytes_interl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1172" column="14"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1032" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="945" column="13" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1303" column="22" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="945" column="13" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;j&apos; shadows outer variable" verbose="Local variable &apos;j&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1306" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="934" column="18" info="Shadowed declaration"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;mac_private&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;mac_private&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="nfapi/open-nFAPI/vnf_sim/src/mac.cpp" line="59" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;code_block&apos; can be reduced." verbose="The scope of the variable &apos;code_block&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="450" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;round&apos; can be reduced." verbose="The scope of the variable &apos;round&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="450" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;counter_buffer&apos; can be reduced." verbose="The scope of the variable &apos;counter_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="457" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zeroed&apos; is assigned a value that is never used." verbose="Variable &apos;zeroed&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="452" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;oned&apos; is assigned a value that is never used." verbose="Variable &apos;oned&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="453" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;twoed&apos; is assigned a value that is never used." verbose="Variable &apos;twoed&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="454" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;threed&apos; is assigned a value that is never used." verbose="Variable &apos;threed&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="455" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nulled&apos; is assigned a value that is never used." verbose="Variable &apos;nulled&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="456" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cnt" verbose="Unused variable: cnt" cwe="563">
            <location file="openair1/PHY/CODING/lte_rate_matching.c" line="451" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ptr&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="204" column="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11p&apos; can be reduced." verbose="The scope of the variable &apos;m11p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="205" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10p&apos; can be reduced." verbose="The scope of the variable &apos;m10p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="205" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta128&apos; can be reduced." verbose="The scope of the variable &apos;beta128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="519" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_128&apos; can be reduced." verbose="The scope of the variable &apos;m11_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="722" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_128&apos; can be reduced." verbose="The scope of the variable &apos;m10_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="722" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext_128&apos; can be reduced." verbose="The scope of the variable &apos;ext_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="722" column="37"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="996" column="18" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="941" column="16" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1279" column="24" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="941" column="16" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;j&apos; shadows outer variable" verbose="Local variable &apos;j&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="1286" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_8bit.c" line="934" column="18" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cnOffsetInGroup&apos; is assigned a value that is never used." verbose="Variable &apos;cnOffsetInGroup&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_tools/generator_bnProc_avx512/bnProcPc_gen_BG2_avx512.c" line="104" column="25"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2459" column="22" info="Second condition"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2430" column="22" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ptr&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="375" column="52"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a0" verbose="Unused variable: a0" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="16"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a1" verbose="Unused variable: a1" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="20"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a2" verbose="Unused variable: a2" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="24"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a3" verbose="Unused variable: a3" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="28"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a4" verbose="Unused variable: a4" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="32"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a5" verbose="Unused variable: a5" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="36"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a6" verbose="Unused variable: a6" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="40"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a7" verbose="Unused variable: a7" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="376" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i2" verbose="Unused variable: i2" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1934" column="13"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i3" verbose="Unused variable: i3" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="1934" column="16"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tmpe" verbose="Unused variable: tmpe" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2028" column="25"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: decoded_bytes_interl" verbose="Unused variable: decoded_bytes_interl" cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2376" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse.c" line="2566" column="7"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!oai_exit&apos; and inner condition is &apos;oai_exit&apos;)." cwe="398">
            <location file="executables/lte-ru.c" line="2068" column="9" info="opposite inner condition: oai_exit"/>
            <location file="executables/lte-ru.c" line="2067" column="10" info="outer condition: !oai_exit"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!oai_exit&apos; and inner condition is &apos;oai_exit&apos;)." cwe="398">
            <location file="executables/lte-ru.c" line="2123" column="9" info="opposite inner condition: oai_exit"/>
            <location file="executables/lte-ru.c" line="2122" column="10" info="outer condition: !oai_exit"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc192_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc192_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="2064" column="7"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_phy_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_phy_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="1762" column="104"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_rf_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_rf_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2101" column="99"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_phy_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_phy_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2345" column="89"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_phy_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_phy_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2348" column="93"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_rf_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_rf_tx))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2352" column="88"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_rf_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_rf_tx))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2355" column="92"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1157" column="31"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1157" column="26" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1158" column="26"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1158" column="21" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1166" column="31"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1166" column="26" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1167" column="26"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1167" column="21" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1198" column="35"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1198" column="26" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1199" column="30"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1199" column="21" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1207" column="35"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1207" column="26" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc_cw2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1208" column="30"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1208" column="21" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc176_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc176_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc192_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc192_byte.c" line="7" column="21"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1148" column="22" info="Second condition"/>
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="1110" column="22" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc256_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc256_byte.c" line="7" column="21"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: filename" verbose="Unused variable: filename" cwe="563">
            <location file="executables/lte-ru.c" line="1620" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc224_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc224_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc240_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc240_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc208_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc208_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc224_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc224_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11p&apos; can be reduced." verbose="The scope of the variable &apos;m11p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="174" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10p&apos; can be reduced." verbose="The scope of the variable &apos;m10p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="174" column="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11p&apos; can be reduced." verbose="The scope of the variable &apos;m11p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="386" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10p&apos; can be reduced." verbose="The scope of the variable &apos;m10p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="386" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timein&apos; can be reduced." verbose="The scope of the variable &apos;timein&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="399" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timeout&apos; can be reduced." verbose="The scope of the variable &apos;timeout&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="399" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_128&apos; can be reduced." verbose="The scope of the variable &apos;m11_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="689" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_128&apos; can be reduced." verbose="The scope of the variable &apos;m10_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="689" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext_128&apos; can be reduced." verbose="The scope of the variable &apos;ext_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="689" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="835" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi4_p&apos; can be reduced." verbose="The scope of the variable &apos;pi4_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="917" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi5_p&apos; can be reduced." verbose="The scope of the variable &apos;pi5_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="917" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc256_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc256_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc240_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc240_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11p&apos; can be reduced." verbose="The scope of the variable &apos;m11p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="176" column="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10p&apos; can be reduced." verbose="The scope of the variable &apos;m10p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="176" column="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_128&apos; can be reduced." verbose="The scope of the variable &apos;m11_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="734" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_128&apos; can be reduced." verbose="The scope of the variable &apos;m10_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="734" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext_128&apos; can be reduced." verbose="The scope of the variable &apos;ext_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="734" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc320_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc320_byte.c" line="7" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;alpha128&apos; is assigned a value that is never used." verbose="Variable &apos;alpha128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="176" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc288_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc288_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc288_byte_128.c" line="7" column="17"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;upack_result&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;upack_result&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="280" column="15" info="upack_result is overwritten"/>
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="278" column="19" info="upack_result is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc288_byte_128.c" line="7" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;alpha128&apos; is assigned a value that is never used." verbose="Variable &apos;alpha128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_avx2_16bit.c" line="173" column="26"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;in.t2&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;in.t2&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="5097" column="8" info="in.t2 is overwritten"/>
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="5096" column="8" info="in.t2 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="112" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc104_byte.c" line="6" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc104_byte.c" line="6" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ptr&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="190" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11p&apos; can be reduced." verbose="The scope of the variable &apos;m11p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="191" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10p&apos; can be reduced." verbose="The scope of the variable &apos;m10p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="191" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta_ptr&apos; can be reduced." verbose="The scope of the variable &apos;beta_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="457" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m11_128&apos; can be reduced." verbose="The scope of the variable &apos;m11_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="743" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m10_128&apos; can be reduced." verbose="The scope of the variable &apos;m10_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="743" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext_128&apos; can be reduced." verbose="The scope of the variable &apos;ext_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="743" column="32"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;alpha128&apos; is assigned a value that is never used." verbose="Variable &apos;alpha128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="190" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beta_ptr&apos; can be reduced." verbose="The scope of the variable &apos;beta_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/3gpplte_turbo_decoder_sse_16bit.c" line="451" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc120_byte.c" line="6" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc128_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc120_byte.c" line="6" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc128_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc112_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc112_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc384_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc384_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc352_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc352_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc384_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc384_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc320_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc320_byte_128.c" line="7" column="21"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!oai_exit&apos; and inner condition is &apos;oai_exit&apos;)." cwe="398">
            <location file="executables/lte-ru.c" line="2008" column="8" info="opposite inner condition: oai_exit"/>
            <location file="executables/lte-ru.c" line="2007" column="10" info="outer condition: !oai_exit"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="112" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx2&apos; is assigned a value that is never used." verbose="Variable &apos;idx2&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="2296" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc352_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc352_byte.c" line="7" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_tlv&apos; is assigned a value that is never used." verbose="Variable &apos;num_tlv&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="3454" column="2"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_tlv&apos; is assigned a value that is never used." verbose="Variable &apos;num_tlv&apos; is assigned a value that is never used." cwe="563">
            <location file="nfapi/open-nFAPI/nfapi/tests/nfapi_cunit_main.c" line="3487" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc144_byte.c" line="5" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc144_byte.c" line="5" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="1995" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="2800" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CC_id&apos; can be reduced." verbose="The scope of the variable &apos;CC_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="executables/lte-ru.c" line="2801" column="7"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2012" column="96"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2018" column="99"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2039" column="96"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;ru-&gt;proc.mutex_pre_scd))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2041" column="99"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_pre_scd))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_lock(&amp;proc-&gt;mutex_pre_scd))==0,&quot;mutex_lock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2336" column="90"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_pre_scd))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(ret=pthread_mutex_unlock(&amp;proc-&gt;mutex_pre_scd))==0,&quot;mutex_unlock returns %d\n&quot;,ret&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="executables/lte-ru.c" line="2339" column="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc128_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc128_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc160_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc160_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc16_byte.c" line="5" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc16_byte.c" line="5" column="21"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p7.c" line="3261" column="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pPackedBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p7.c" line="3310" column="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p7.c" line="6165" column="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p7.c" line="6212" column="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p7.c" line="8190" column="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pMessageBuf&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="nfapi/open-nFAPI/nfapi/src/nfapi_p7.c" line="8421" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc160_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc160_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc224_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc224_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc192_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc192_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc240_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc240_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc176_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc176_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc192_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc192_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc288_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc288_byte.c" line="7" column="21"/>
        </error>
        <error id="internalAstError" severity="error" msg="Syntax Error: AST broken, binary operator &apos;=&apos; doesn&apos;t have two operands." verbose="Syntax Error: AST broken, binary operator &apos;=&apos; doesn&apos;t have two operands.">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc2_byte.c" line="36" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc208_byte.c" line="5" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc208_byte.c" line="5" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc320_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc320_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc288_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc288_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc32_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc32_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc256_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc256_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc64_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc64_byte.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc352_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc352_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc256_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc256_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc224_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc224_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc320_byte.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc320_byte.c" line="6" column="21"/>
        </error>
        <error id="internalAstError" severity="error" msg="Syntax Error: AST broken, binary operator &apos;=&apos; doesn&apos;t have two operands." verbose="Syntax Error: AST broken, binary operator &apos;=&apos; doesn&apos;t have two operands.">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc4_byte.c" line="36" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc352_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc352_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc32_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc32_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc384_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc384_byte.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc88_byte.c" line="5" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc88_byte.c" line="5" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc384_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc384_byte_128.c" line="7" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc96_byte_128.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc96_byte_128.c" line="7" column="21"/>
        </error>
        <error id="unpreciseMathCall" severity="style" msg="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision." verbose="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="127" column="22"/>
        </error>
        <error id="unpreciseMathCall" severity="style" msg="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision." verbose="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="144" column="22"/>
        </error>
        <error id="unpreciseMathCall" severity="style" msg="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision." verbose="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="149" column="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="245" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="245" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;absa&apos; can be reduced." verbose="The scope of the variable &apos;absa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="245" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;absb&apos; can be reduced." verbose="The scope of the variable &apos;absb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="245" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;maska&apos; can be reduced." verbose="The scope of the variable &apos;maska&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="245" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;maskb&apos; can be reduced." verbose="The scope of the variable &apos;maskb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="245" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;minabs&apos; can be reduced." verbose="The scope of the variable &apos;minabs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="245" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp_alpha_r&apos; can be reduced." verbose="The scope of the variable &apos;temp_alpha_r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoding_tools.c" line="345" column="13"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="522" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="522" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="523" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="523" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="524" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="524" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="540" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="540" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="541" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="541" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="769" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="769" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="770" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="770" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="771" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="771" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="785" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="785" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="786" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="786" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="787" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="787" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="788" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="788" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="789" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="789" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="790" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="790" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="791" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_decoder.c" line="791" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="542" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="542" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="543" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="543" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="544" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="544" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="545" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="545" column="36" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." verbose="The address of local variable &apos;Aprime&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="546" column="44"/>
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_encoder.c" line="546" column="36" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc72_byte.c" line="5" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc80_byte.c" line="5" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc72_byte.c" line="5" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc80_byte.c" line="5" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc64_byte_128.c" line="6" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc64_byte_128.c" line="6" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_procedures.c" line="198" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc8_byte.c" line="6" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc8_byte.c" line="6" column="20"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;)&apos;. Configuration: &apos;&apos;." verbose="Unmatched &apos;)&apos;. Configuration: &apos;&apos;.">
            <location file="openair1/PHY/CODING/nrPolar_tools/nr_polar_rate_match.c" line="34" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc96_byte.c" line="7" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_BG2_Zc96_byte.c" line="7" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DmatrixElementVal&apos; is assigned a value that is never used." verbose="Variable &apos;DmatrixElementVal&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/nrSmallBlock/decodeSmallBlock.c" line="87" column="25"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nr_segmentation.c" line="164" column="60"/>
            <location file="openair1/PHY/CODING/nr_segmentation.c" line="164" column="55" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/CODING/nr_segmentation.c" line="165" column="64"/>
            <location file="openair1/PHY/CODING/nr_segmentation.c" line="165" column="59" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nr_polar_init.c" line="257" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nr_segmentation.c" line="42" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nr_segmentation.c" line="42" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nr_segmentation.c" line="42" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_metric&apos; can be reduced." verbose="The scope of the variable &apos;max_metric&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/viterbi.c" line="50" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m0_ptr&apos; can be reduced." verbose="The scope of the variable &apos;m0_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/viterbi.c" line="193" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m1_ptr&apos; can be reduced." verbose="The scope of the variable &apos;m1_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/viterbi.c" line="193" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_state0&apos; can be reduced." verbose="The scope of the variable &apos;prev_state0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/viterbi.c" line="196" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;TB_ptr2&apos; can be reduced." verbose="The scope of the variable &apos;TB_ptr2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/viterbi.c" line="197" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;table_offset&apos; can be reduced." verbose="The scope of the variable &apos;table_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/viterbi.c" line="198" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nref&apos; can be reduced." verbose="The scope of the variable &apos;Nref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nr_rate_matching.c" line="435" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nref&apos; can be reduced." verbose="The scope of the variable &apos;Nref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nr_rate_matching.c" line="519" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/init_top.c" line="56" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TB_ptr&apos; is assigned a value that is never used." verbose="Variable &apos;TB_ptr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/viterbi_lte.c" line="129" column="42"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;in&apos; is assigned a value that is never used." verbose="Variable &apos;in&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/viterbi_lte.c" line="136" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ru.c" line="40" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ru.c" line="40" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re&apos; can be reduced." verbose="The scope of the variable &apos;re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ru.c" line="40" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ru.c" line="187" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ru.c" line="187" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nulled&apos; is assigned a value that is never used." verbose="Variable &apos;nulled&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/nr_rate_matching.c" line="522" column="13"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;eNB&apos; shadows outer variable" verbose="Local variable &apos;eNB&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/lte_param_init.c" line="62" column="17" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/lte_param_init.c" line="38" column="22" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UE&apos; shadows outer variable" verbose="Local variable &apos;UE&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/lte_param_init.c" line="63" column="17" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/lte_param_init.c" line="39" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ru&apos; shadows outer variable" verbose="Local variable &apos;ru&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/lte_param_init.c" line="64" column="17" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/lte_param_init.c" line="40" column="14" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="35" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="36" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re&apos; can be reduced." verbose="The scope of the variable &apos;re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="37" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;beam_count&apos; can be reduced." verbose="The scope of the variable &apos;beam_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="125" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="169" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="170" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;p&apos; shadows outer variable" verbose="Local variable &apos;p&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="177" column="16" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/nr_init_ru.c" line="170" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init.c" line="57" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init.c" line="57" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init.c" line="394" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;amp&apos; can be reduced." verbose="The scope of the variable &apos;amp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/freq_equalization.c" line="298" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_adjust_sync_eNB.c" line="117" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count_max_pos_ok&apos; can be reduced." verbose="The scope of the variable &apos;count_max_pos_ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_adjust_sync_ue.c" line="44" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_time&apos; can be reduced." verbose="The scope of the variable &apos;first_time&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_adjust_sync_ue.c" line="45" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_adjust_sync_ue.c" line="47" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n0_power_tot&apos; can be reduced." verbose="The scope of the variable &apos;n0_power_tot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_eNB_measurements.c" line="73" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dmrs_corr&apos; can be reduced." verbose="The scope of the variable &apos;dmrs_corr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_sync_time.c" line="256" column="11"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (gNB_id!=i) gNB_id=i&apos; is logically equivalent to &apos;gNB_id=i&apos;." verbose="The statement &apos;if (gNB_id!=i) gNB_id=i&apos; is logically equivalent to &apos;gNB_id=i&apos;." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="69" column="19" info="Condition &apos;gNB_id!=i&apos; is redundant"/>
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="69" column="33" info="Assignment &apos;gNB_id=i&apos;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="718" column="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;slot&apos; shadows outer variable" verbose="Local variable &apos;slot&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="314" column="12" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="203" column="10" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;symb&apos; shadows outer variable" verbose="Local variable &apos;symb&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="318" column="14" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="203" column="16" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;slot&apos; shadows outer variable" verbose="Local variable &apos;slot&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="331" column="12" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="203" column="10" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;symb&apos; shadows outer variable" verbose="Local variable &apos;symb&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="335" column="14" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="203" column="16" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;slot&apos; shadows outer variable" verbose="Local variable &apos;slot&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="362" column="14" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="203" column="10" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;symb&apos; shadows outer variable" verbose="Local variable &apos;symb&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="365" column="16" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="203" column="16" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="41" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gNB_id&apos; is assigned a value that is never used." verbose="Variable &apos;gNB_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="41" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="718" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;delta_phase&apos; can be reduced." verbose="The scope of the variable &apos;delta_phase&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="84" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_phase1&apos; can be reduced." verbose="The scope of the variable &apos;current_phase1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="87" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_phase2&apos; can be reduced." verbose="The scope of the variable &apos;current_phase2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="87" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="88" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="90" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ch_estimates_re&apos; can be reduced." verbose="The scope of the variable &apos;ul_ch_estimates_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="92" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ch_estimates_im&apos; can be reduced." verbose="The scope of the variable &apos;ul_ch_estimates_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="92" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ind&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="96" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="99" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="99" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="103" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ref128&apos; can be reduced." verbose="The scope of the variable &apos;ul_ref128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="103" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ch128&apos; can be reduced." verbose="The scope of the variable &apos;ul_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="103" column="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp_in_ifft_0&apos; can be reduced." verbose="The scope of the variable &apos;temp_in_ifft_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="105" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ind&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="383" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="389" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ref128&apos; can be reduced." verbose="The scope of the variable &apos;ul_ref128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="389" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ch128&apos; can be reduced." verbose="The scope of the variable &apos;ul_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ul_channel_estimation.c" line="389" column="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pil&apos; can be reduced." verbose="The scope of the variable &apos;pil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_bf_channel_estimation.c" line="44" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF&apos; can be reduced." verbose="The scope of the variable &apos;rxF&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_bf_channel_estimation.c" line="44" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_bf_ch&apos; can be reduced." verbose="The scope of the variable &apos;dl_bf_ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_bf_channel_estimation.c" line="44" column="29"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ue-&gt;measurements.n0_power[aarx]&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ue-&gt;measurements.n0_power[aarx]&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ue_measurements.c" line="251" column="47" info="ue-&gt;measurements.n0_power[aarx] is overwritten"/>
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ue_measurements.c" line="249" column="47" info="ue-&gt;measurements.n0_power[aarx] is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nushift&apos; can be reduced." verbose="The scope of the variable &apos;nushift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_ue_measurements.c" line="186" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="70" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="166" column="9"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="736" column="14" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="623" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="774" column="18" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="623" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;j&apos; shadows outer variable" verbose="Local variable &apos;j&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="775" column="20" info="Shadow variable"/>
            <location file="openair1/PHY/INIT/lte_init_ue.c" line="623" column="9" info="Shadowed declaration"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: (Ns&gt;&gt;1)==0. &apos;(Ns&gt;&gt;1)!=0 || ((Ns&gt;&gt;1)==0 &amp;&amp; interpolateS11S12)&apos; is equivalent to &apos;(Ns&gt;&gt;1)!=0 || interpolateS11S12&apos;" verbose="The condition &apos;(Ns&gt;&gt;1)!=0 || (Ns&gt;&gt;1)==0 &amp;&amp; interpolateS11S12&apos; is equivalent to &apos;(Ns&gt;&gt;1)!=0 || interpolateS11S12&apos;." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_channel_estimation.c" line="561" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_dword&apos; can be reduced." verbose="The scope of the variable &apos;mprime_dword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_cell_spec.c" line="43" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pil&apos; can be reduced." verbose="The scope of the variable &apos;pil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_channel_estimation.c" line="42" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced." verbose="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_cell_spec.c" line="43" column="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_dword&apos; can be reduced." verbose="The scope of the variable &apos;mprime_dword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_cell_spec.c" line="123" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced." verbose="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_cell_spec.c" line="123" column="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_dword&apos; can be reduced." verbose="The scope of the variable &apos;mprime_dword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_cell_spec.c" line="203" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced." verbose="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_cell_spec.c" line="203" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF&apos; can be reduced." verbose="The scope of the variable &apos;rxF&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_channel_estimation.c" line="42" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_channel_estimation.c" line="42" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_dword&apos; can be reduced." verbose="The scope of the variable &apos;mprime_dword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="39" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced." verbose="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="39" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_dword&apos; can be reduced." verbose="The scope of the variable &apos;mprime_dword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="97" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced." verbose="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="97" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_dword&apos; can be reduced." verbose="The scope of the variable &apos;mprime_dword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="137" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced." verbose="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="137" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_dword&apos; can be reduced." verbose="The scope of the variable &apos;mprime_dword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="177" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced." verbose="The scope of the variable &apos;mprime_qpsk_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="177" column="36"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_mbsfn.c" line="138" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_uespec.c" line="136" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_uespec.c" line="136" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nPRB&apos; can be reduced." verbose="The scope of the variable &apos;nPRB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_dl_uespec.c" line="136" column="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x1&apos; can be reduced." verbose="The scope of the variable &apos;x1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_gold.c" line="137" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x2&apos; can be reduced." verbose="The scope of the variable &apos;x2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_gold.c" line="137" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x1&apos; can be reduced." verbose="The scope of the variable &apos;x1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_gold_mbsfn.c" line="89" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x2&apos; can be reduced." verbose="The scope of the variable &apos;x2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_REFSIG/lte_gold_mbsfn.c" line="89" column="21"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/INIT/nr_init_ue.c" line="733" column="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pil&apos; can be reduced." verbose="The scope of the variable &apos;pil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_mbsfn_channel_estimation.c" line="49" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF&apos; can be reduced." verbose="The scope of the variable &apos;rxF&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_mbsfn_channel_estimation.c" line="49" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pil&apos; can be reduced." verbose="The scope of the variable &apos;pil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_mbsfn_channel_estimation.c" line="775" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF&apos; can be reduced." verbose="The scope of the variable &apos;rxF&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_mbsfn_channel_estimation.c" line="775" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_dl_mbsfn_channel_estimation.c" line="775" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxp&apos; can be reduced." verbose="The scope of the variable &apos;rxp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_sync_timefreq.c" line="55" column="12"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;e_ptr&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;e_ptr&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci.c" line="340" column="9" info="e_ptr is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci.c" line="295" column="9" info="e_ptr is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;e_ptr&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;e_ptr&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci.c" line="340" column="9" info="e_ptr is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci.c" line="309" column="17" info="e_ptr is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/transport_proto.h" line="635" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci.c" line="147" column="24"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: spectrum_p5ms" verbose="Unused variable: spectrum_p5ms" cwe="563">
            <location file="openair1/PHY/LTE_ESTIMATION/lte_sync_timefreq.c" line="50" column="11"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="328" column="32"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="328" column="27" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="329" column="36"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="329" column="31" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="434" column="32"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="434" column="27" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="435" column="36"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="435" column="31" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="65" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="65" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="65" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;layer&apos; can be reduced." verbose="The scope of the variable &apos;layer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="65" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="107" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="107" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="107" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;layer&apos; can be reduced." verbose="The scope of the variable &apos;layer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="107" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re&apos; can be reduced." verbose="The scope of the variable &apos;re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="108" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Mdlharq&apos; can be reduced." verbose="The scope of the variable &apos;Mdlharq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="214" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="215" column="17"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;harq_pid&apos; is less than zero." verbose="The unsigned expression &apos;harq_pid&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="297" column="16" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;harq_pid&apos; is less than zero." verbose="The unsigned expression &apos;harq_pid&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_coding.c" line="405" column="16" info="Unsigned less than zero"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nulled&apos; is assigned a value that is never used." verbose="Variable &apos;nulled&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci.c" line="150" column="17"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;yIQ&apos; is accessed at non-zero index." verbose="The address of local variable &apos;yIQ&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/edci.c" line="369" column="26"/>
            <location file="openair1/PHY/LTE_TRANSPORT/edci.c" line="369" column="20" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;yIQ&apos; is accessed at non-zero index." verbose="The address of local variable &apos;yIQ&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/edci.c" line="431" column="32"/>
            <location file="openair1/PHY/LTE_TRANSPORT/edci.c" line="431" column="26" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j0&apos; can be reduced." verbose="The scope of the variable &apos;j0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/edci.c" line="271" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/edci.c" line="271" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i0&apos; can be reduced." verbose="The scope of the variable &apos;i0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/edci.c" line="272" column="19"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;s&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;s&apos; might be accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/group_hopping.c" line="65" column="95"/>
            <location file="openair1/PHY/LTE_TRANSPORT/group_hopping.c" line="65" column="92" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;s&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;s&apos; might be accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/group_hopping.c" line="66" column="95"/>
            <location file="openair1/PHY/LTE_TRANSPORT/group_hopping.c" line="66" column="92" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;s&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;s&apos; might be accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/group_hopping.c" line="138" column="90"/>
            <location file="openair1/PHY/LTE_TRANSPORT/group_hopping.c" line="138" column="87" info="Address of variable taken here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;I_MCS==10&apos; is always false" verbose="Condition &apos;I_MCS==10&apos; is always false" cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/lte_mcs.c" line="71" column="18" info="Condition &apos;I_MCS==10&apos; is always false"/>
            <location file="openair1/PHY/LTE_TRANSPORT/lte_mcs.c" line="69" column="13" info="Assuming that condition &apos;I_MCS&lt;=10&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;TBS&apos; can be reduced." verbose="The scope of the variable &apos;TBS&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/lte_mcs.c" line="128" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;TBS&apos; can be reduced." verbose="The scope of the variable &apos;TBS&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/lte_mcs.c" line="140" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;G_adj&apos; can be reduced." verbose="The scope of the variable &apos;G_adj&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/lte_mcs.c" line="328" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TBS&apos; is assigned a value that is never used." verbose="Variable &apos;TBS&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/lte_mcs.c" line="140" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;diffNew&apos; is assigned a value that is never used." verbose="Variable &apos;diffNew&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/lte_mcs.c" line="409" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reg_offset&apos; can be reduced." verbose="The scope of the variable &apos;reg_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pcfich.c" line="71" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first_reg&apos; is assigned a value that is never used." verbose="Variable &apos;first_reg&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pcfich_common.c" line="65" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp&apos; can be reduced." verbose="The scope of the variable &apos;dp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="58" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i2&apos; can be reduced." verbose="The scope of the variable &apos;i2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="67" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i3&apos; can be reduced." verbose="The scope of the variable &apos;i3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="67" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ngroup_PHICH&apos; can be reduced." verbose="The scope of the variable &apos;ngroup_PHICH&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="711" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nseq_PHICH&apos; can be reduced." verbose="The scope of the variable &apos;nseq_PHICH&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="711" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="715" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;phich&apos; can be reduced." verbose="The scope of the variable &apos;phich&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="717" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;harq_pid&apos; is assigned a value that is never used." verbose="Variable &apos;harq_pid&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/phich.c" line="715" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tti_offset&apos; can be reduced." verbose="The scope of the variable &apos;tti_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pilots.c" line="43" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot_offset&apos; can be reduced." verbose="The scope of the variable &apos;slot_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pilots.c" line="43" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;samples_per_symbol&apos; can be reduced." verbose="The scope of the variable &apos;samples_per_symbol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pilots.c" line="43" column="45"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;slot&apos; is less than zero." verbose="The unsigned expression &apos;slot&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/pilots.c" line="142" column="11" info="Unsigned less than zero"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;period&apos; can be reduced." verbose="The scope of the variable &apos;period&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pmch_common.c" line="68" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;period&apos; can be reduced." verbose="The scope of the variable &apos;period&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pmch_common.c" line="119" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;period&apos; can be reduced." verbose="The scope of the variable &apos;period&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pmch_common.c" line="194" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="324" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="324" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inv_u&apos; can be reduced." verbose="The scope of the variable &apos;inv_u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="378" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="383" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="383" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d_start&apos; can be reduced." verbose="The scope of the variable &apos;d_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="383" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numshift&apos; can be reduced." verbose="The scope of the variable &apos;numshift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="383" column="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;not_found&apos; can be reduced." verbose="The scope of the variable &apos;not_found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach_common.c" line="384" column="11"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;dlsch0==NULL&apos; is always true" verbose="Condition &apos;dlsch0==NULL&apos; is always true" cwe="571">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools.c" line="1339" column="26" info="Condition &apos;dlsch0==NULL&apos; is always true"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools.c" line="1331" column="18" info="Assuming that condition &apos;dlsch0!=NULL&apos; is not redundant"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;fft_size&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;fft_size&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/prach.c" line="318" column="19" info="fft_size is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/prach.c" line="311" column="21" info="fft_size is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;log2_ifft_size&apos; can be reduced." verbose="The scope of the variable &apos;log2_ifft_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach.c" line="83" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach.c" line="699" column="7"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="100" column="33"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="100" column="20" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="107" column="33"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="107" column="20" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="112" column="86"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="112" column="73" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="114" column="86"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="114" column="73" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prach_mask&apos; can be reduced." verbose="The scope of the variable &apos;prach_mask&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/prach.c" line="700" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tti_offset&apos; can be reduced." verbose="The scope of the variable &apos;tti_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="62" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="176" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_a&apos; can be reduced." verbose="The scope of the variable &apos;pbch_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="179" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;RCC&apos; can be reduced." verbose="The scope of the variable &apos;RCC&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="180" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pilots&apos; can be reduced." verbose="The scope of the variable &apos;pilots&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="183" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="190" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="190" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;amask&apos; can be reduced." verbose="The scope of the variable &apos;amask&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="191" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="456" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_a&apos; can be reduced." verbose="The scope of the variable &apos;pbch_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="459" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prach_mask&apos; is assigned a value that is never used." verbose="Variable &apos;prach_mask&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/prach.c" line="700" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;RCC&apos; can be reduced." verbose="The scope of the variable &apos;RCC&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="460" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pilots&apos; can be reduced." verbose="The scope of the variable &apos;pilots&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="463" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="470" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="470" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;amask&apos; can be reduced." verbose="The scope of the variable &apos;amask&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="471" column="12"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;vrb&lt;12&apos; and inner condition is &apos;vrb&lt;12&apos;)." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="505" column="20" info="identical inner condition: vrb&lt;12"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="502" column="12" info="outer condition: vrb&lt;12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pss.c" line="49" column="18"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;use_srs == 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools.c" line="2027" column="109"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools.c" line="2005" column="17" info="&apos;use_srs&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;DL_pmi_single&apos; can be reduced." verbose="The scope of the variable &apos;DL_pmi_single&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools.c" line="296" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;UE_id&apos; can be reduced." verbose="The scope of the variable &apos;UE_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools.c" line="1820" column="12"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;UE_id&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;UE_id&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools.c" line="1966" column="14" info="Unsigned positive"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="512" column="8" info="ret is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="504" column="6" info="ret is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="512" column="8" info="ret is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="506" column="6" info="ret is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="512" column="8" info="ret is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="509" column="10" info="ret is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="512" column="8" info="ret is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="511" column="10" info="ret is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="103" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift&apos; can be reduced." verbose="The scope of the variable &apos;shift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="239" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subset&apos; can be reduced." verbose="The scope of the variable &apos;subset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="239" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alloc2&apos; can be reduced." verbose="The scope of the variable &apos;alloc2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="600" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist2_0_even&apos; can be reduced." verbose="The scope of the variable &apos;allocdist2_0_even&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="600" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist2_0_odd&apos; can be reduced." verbose="The scope of the variable &apos;allocdist2_0_odd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="600" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist2_1_even&apos; can be reduced." verbose="The scope of the variable &apos;allocdist2_1_even&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="600" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist2_1_odd&apos; can be reduced." verbose="The scope of the variable &apos;allocdist2_1_odd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="600" column="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alloc3&apos; can be reduced." verbose="The scope of the variable &apos;alloc3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="601" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist3_0_even&apos; can be reduced." verbose="The scope of the variable &apos;allocdist3_0_even&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="601" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist3_0_odd&apos; can be reduced." verbose="The scope of the variable &apos;allocdist3_0_odd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="601" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist3_1_even&apos; can be reduced." verbose="The scope of the variable &apos;allocdist3_1_even&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="601" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocdist3_1_odd&apos; can be reduced." verbose="The scope of the variable &apos;allocdist3_1_odd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="601" column="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first_rb&apos; is assigned a value that is never used." verbose="Variable &apos;first_rb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dci_tools_common.c" line="225" column="13"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1882" column="35"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1882" column="22" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1889" column="35"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1889" column="22" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1895" column="87"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1895" column="74" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1897" column="87"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1897" column="74" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2210" column="35"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2210" column="22" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2226" column="77"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2226" column="64" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2231" column="79"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2231" column="66" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2258" column="36"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2258" column="23" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2261" column="79"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2261" column="66" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2266" column="79"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2266" column="66" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2295" column="35"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2295" column="22" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2298" column="78"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2298" column="65" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2303" column="79"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2303" column="66" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2331" column="35"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2331" column="22" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2339" column="88"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2339" column="75" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2346" column="90"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2346" column="77" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2371" column="36"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2371" column="23" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2377" column="90"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2377" column="77" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2382" column="90"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2382" column="77" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2412" column="35"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2412" column="22" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2414" column="89"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2414" column="76" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2419" column="90"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2419" column="77" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2432" column="37"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2432" column="24" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2437" column="90"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2437" column="77" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2442" column="92"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2442" column="79" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2468" column="38"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2468" column="25" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2470" column="92"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2470" column="79" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2475" column="92"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2475" column="79" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2504" column="37"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2504" column="24" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample1&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2506" column="91"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2506" column="78" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;tmp_sample2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2511" column="92"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2511" column="79" info="Address of variable taken here."/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rdata-&gt;eNB&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rdata-&gt;eNB&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="349" column="15" info="rdata-&gt;eNB is overwritten"/>
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="341" column="15" info="rdata-&gt;eNB is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="50" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="50" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="82" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="82" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="156" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="369" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;O_RCC&apos; can be reduced." verbose="The scope of the variable &apos;O_RCC&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="414" column="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;metric&apos; can be reduced." verbose="The scope of the variable &apos;metric&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="417" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;metric_new&apos; can be reduced." verbose="The scope of the variable &apos;metric_new&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="417" column="14"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="469" column="12" info="Shadow variable"/>
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="407" column="16" info="Shadowed declaration"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;(m&amp;1)==0&apos; is always false" verbose="Condition &apos;(m&amp;1)==0&apos; is always false" cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="844" column="26" info="Condition &apos;(m&amp;1)==0&apos; is always false"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="825" column="9" info="Assignment &apos;m=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;do_sr == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="1619" column="15"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="950" column="19" info="&apos;do_sr&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sltNo&apos; can be reduced." verbose="The scope of the variable &apos;sltNo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="464" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="899" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="899" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="899" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="899" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="900" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zptr&apos; can be reduced." verbose="The scope of the variable &apos;zptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="901" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxcomp&apos; can be reduced." verbose="The scope of the variable &apos;rxcomp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="902" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ns&apos; can be reduced." verbose="The scope of the variable &apos;ns&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="903" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;metric&apos; is assigned a value that is never used." verbose="Variable &apos;metric&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_decoding.c" line="1036" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_UL_symb&apos; can be reduced." verbose="The scope of the variable &apos;N_UL_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="903" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nsymb&apos; can be reduced." verbose="The scope of the variable &apos;nsymb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="903" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_oc&apos; can be reduced." verbose="The scope of the variable &apos;n_oc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="903" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_oc0&apos; can be reduced." verbose="The scope of the variable &apos;n_oc0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="903" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_oc1&apos; can be reduced." verbose="The scope of the variable &apos;n_oc1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="903" column="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nprime&apos; can be reduced." verbose="The scope of the variable &apos;nprime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="905" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nprime0&apos; can be reduced." verbose="The scope of the variable &apos;nprime0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="905" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nprime1&apos; can be reduced." verbose="The scope of the variable &apos;nprime1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="905" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="906" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;thres&apos; can be reduced." verbose="The scope of the variable &apos;thres&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="906" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;h&apos; can be reduced." verbose="The scope of the variable &apos;h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="906" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;off&apos; can be reduced." verbose="The scope of the variable &apos;off&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="906" column="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nprime_div_deltaPUCCH_Shift&apos; can be reduced." verbose="The scope of the variable &apos;Nprime_div_deltaPUCCH_Shift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="907" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nprime&apos; can be reduced." verbose="The scope of the variable &apos;Nprime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="907" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="907" column="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="908" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="908" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;refs&apos; can be reduced." verbose="The scope of the variable &apos;refs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="908" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;phase&apos; can be reduced." verbose="The scope of the variable &apos;phase&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="908" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re&apos; can be reduced." verbose="The scope of the variable &apos;re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="908" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l2&apos; can be reduced." verbose="The scope of the variable &apos;l2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="908" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;phase_max&apos; can be reduced." verbose="The scope of the variable &apos;phase_max&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="908" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_cs&apos; can be reduced." verbose="The scope of the variable &apos;n_cs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="909" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;S&apos; can be reduced." verbose="The scope of the variable &apos;S&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="909" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ind&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="909" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rem&apos; can be reduced." verbose="The scope of the variable &apos;rem&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="909" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_re&apos; can be reduced." verbose="The scope of the variable &apos;tmp_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="910" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_im&apos; can be reduced." verbose="The scope of the variable &apos;tmp_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="910" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;W_re&apos; can be reduced." verbose="The scope of the variable &apos;W_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="910" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;W_im&apos; can be reduced." verbose="The scope of the variable &apos;W_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="910" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxptr&apos; can be reduced." verbose="The scope of the variable &apos;rxptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="911" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="912" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;chest_mag&apos; can be reduced." verbose="The scope of the variable &apos;chest_mag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="916" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;log2_maxh&apos; can be reduced." verbose="The scope of the variable &apos;log2_maxh&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="919" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;chL&apos; can be reduced." verbose="The scope of the variable &apos;chL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="928" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Ret&apos; can be reduced." verbose="The scope of the variable &apos;Ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="930" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SubCarrierDeMapData&apos; can be reduced." verbose="The scope of the variable &apos;SubCarrierDeMapData&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="931" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CshData_fmt3&apos; can be reduced." verbose="The scope of the variable &apos;CshData_fmt3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="932" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;delta_theta&apos; can be reduced." verbose="The scope of the variable &apos;delta_theta&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="933" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ChestValue&apos; can be reduced." verbose="The scope of the variable &apos;ChestValue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="934" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ChdetAfterValue_fmt3&apos; can be reduced." verbose="The scope of the variable &apos;ChdetAfterValue_fmt3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="935" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;RemoveFrqDev_fmt3&apos; can be reduced." verbose="The scope of the variable &apos;RemoveFrqDev_fmt3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="936" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Fmt3xDataRmvOrth&apos; can be reduced." verbose="The scope of the variable &apos;Fmt3xDataRmvOrth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="937" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Fmt3xDataAvgAnt&apos; can be reduced." verbose="The scope of the variable &apos;Fmt3xDataAvgAnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="938" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Fmt3xDataAvgSym&apos; can be reduced." verbose="The scope of the variable &apos;Fmt3xDataAvgSym&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="939" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IFFTOutData_Fmt3&apos; can be reduced." verbose="The scope of the variable &apos;IFFTOutData_Fmt3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="940" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="941" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;payload_entity&apos; can be reduced." verbose="The scope of the variable &apos;payload_entity&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="942" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;payload_max&apos; can be reduced." verbose="The scope of the variable &apos;payload_max&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="944" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;do_sr&apos; can be reduced." verbose="The scope of the variable &apos;do_sr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="950" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crnti&apos; can be reduced." verbose="The scope of the variable &apos;crnti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="951" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;DTXthreshold&apos; can be reduced." verbose="The scope of the variable &apos;DTXthreshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="952" column="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="971" column="14" info="Shadow variable"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="906" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;aa&apos; shadows outer variable" verbose="Local variable &apos;aa&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="1279" column="18" info="Shadow variable"/>
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="899" column="18" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zptr&apos; is assigned a value that is never used." verbose="Variable &apos;zptr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="779" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Ret&apos; is assigned a value that is never used." verbose="Variable &apos;Ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="930" column="16"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;dlsch1!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch1." verbose="Either the condition &apos;dlsch1!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch1." cwe="476">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3397" column="39" info="Null pointer dereference"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3324" column="35" info="Assuming that condition &apos;dlsch1!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;dlsch1!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch1." verbose="Either the condition &apos;dlsch1!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch1." cwe="476">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3398" column="39" info="Null pointer dereference"/>
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3324" column="35" info="Assuming that condition &apos;dlsch1!=NULL&apos; is not redundant"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;payload_entity&apos; is assigned a value that is never used." verbose="Variable &apos;payload_entity&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="942" column="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;phase_max&apos; is assigned a value that is never used." verbose="Variable &apos;phase_max&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="1242" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;off&apos; is assigned a value that is never used." verbose="Variable &apos;off&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="1447" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;off&apos; is assigned a value that is never used." verbose="Variable &apos;off&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="1464" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;off&apos; is assigned a value that is never used." verbose="Variable &apos;off&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="1486" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;off&apos; is assigned a value that is never used." verbose="Variable &apos;off&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/pucch.c" line="1503" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tti_offset&apos; can be reduced." verbose="The scope of the variable &apos;tti_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1673" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tti_offset&apos; can be reduced." verbose="The scope of the variable &apos;tti_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="2752" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3270" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3271" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;allocate_REs&apos; can be reduced." verbose="The scope of the variable &apos;allocate_REs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3284" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3309" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nushiftmod3&apos; can be reduced." verbose="The scope of the variable &apos;nushiftmod3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3309" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Ns&apos; can be reduced." verbose="The scope of the variable &apos;Ns&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3314" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3929" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3930" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="4183" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="4184" column="17"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;harq_pid&apos; is less than zero." verbose="The unsigned expression &apos;harq_pid&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3327" column="18" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;harq_pid&apos; is less than zero." verbose="The unsigned expression &apos;harq_pid&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3348" column="18" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;harq_pid&apos; is less than zero." verbose="The unsigned expression &apos;harq_pid&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3369" column="18" info="Unsigned less than zero"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qpsk_table_offset_re&apos; is assigned a value that is never used." verbose="Variable &apos;qpsk_table_offset_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="162" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qpsk_table_offset_im&apos; is assigned a value that is never used." verbose="Variable &apos;qpsk_table_offset_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="163" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qpsk_table_offset_re&apos; is assigned a value that is never used." verbose="Variable &apos;qpsk_table_offset_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="252" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qpsk_table_offset_im&apos; is assigned a value that is never used." verbose="Variable &apos;qpsk_table_offset_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="253" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam16_table_offset_re&apos; is assigned a value that is never used." verbose="Variable &apos;qam16_table_offset_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="347" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam16_table_offset_im&apos; is assigned a value that is never used." verbose="Variable &apos;qam16_table_offset_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="348" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam16_table_offset_re&apos; is assigned a value that is never used." verbose="Variable &apos;qam16_table_offset_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="443" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam16_table_offset_im&apos; is assigned a value that is never used." verbose="Variable &apos;qam16_table_offset_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="444" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam64_table_offset_re&apos; is assigned a value that is never used." verbose="Variable &apos;qam64_table_offset_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="546" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam64_table_offset_im&apos; is assigned a value that is never used." verbose="Variable &apos;qam64_table_offset_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="547" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam64_table_offset_re&apos; is assigned a value that is never used." verbose="Variable &apos;qam64_table_offset_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1218" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qam64_table_offset_im&apos; is assigned a value that is never used." verbose="Variable &apos;qam64_table_offset_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="1219" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pilots&apos; is assigned a value that is never used." verbose="Variable &apos;pilots&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3275" column="17"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc16&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc16&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="79" column="24"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="79" column="17" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc16&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc16&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="82" column="24"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="82" column="17" info="Address of variable taken here."/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="988" column="19" info="Second condition"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="968" column="20" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="214" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aatx&apos; can be reduced." verbose="The scope of the variable &apos;aatx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="402" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_i0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_i0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_i1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_i1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_0&apos; can be reduced." verbose="The scope of the variable &apos;rho128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="95"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_1&apos; can be reduced." verbose="The scope of the variable &apos;rho128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_i0&apos; can be reduced." verbose="The scope of the variable &apos;rho128_i0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_i1&apos; can be reduced." verbose="The scope of the variable &apos;rho128_i1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="404" column="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="405" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="451" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="451" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="655" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch1_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch1_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="655" column="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="655" column="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128_2&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="900" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128&apos; can be reduced." verbose="The scope of the variable &apos;rho128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="900" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aatx&apos; can be reduced." verbose="The scope of the variable &apos;aatx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1090" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1092" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1092" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1093" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1554" column="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Yk&apos; can be reduced." verbose="The scope of the variable &apos;Yk&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1555" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CCEind&apos; can be reduced." verbose="The scope of the variable &apos;CCEind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1674" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1677" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CCEmap_cand&apos; can be reduced." verbose="The scope of the variable &apos;CCEmap_cand&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1678" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;old_dci_cnt&apos; can be reduced." verbose="The scope of the variable &apos;old_dci_cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1932" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zptr&apos; is assigned a value that is never used." verbose="Variable &apos;zptr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="290" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pilots_2&apos; can be reduced." verbose="The scope of the variable &apos;pilots_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="185" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pilots_2&apos; can be reduced." verbose="The scope of the variable &apos;pilots_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/pbch.c" line="465" column="12"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="537" column="32"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="537" column="27" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="538" column="36"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="538" column="31" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="44" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="44" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="76" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="76" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Kr&apos; can be reduced." verbose="The scope of the variable &apos;Kr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="505" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Kr_bytes&apos; can be reduced." verbose="The scope of the variable &apos;Kr_bytes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="505" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;subframe_rx_prev&apos; is assigned a value that is never used." verbose="Variable &apos;subframe_rx_prev&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="401" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;frame_rx_prev&apos; is assigned a value that is never used." verbose="Variable &apos;frame_rx_prev&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="404" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;crc&apos; is assigned a value that is never used." verbose="Variable &apos;crc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="499" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Kr&apos; is assigned a value that is never used." verbose="Variable &apos;Kr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="505" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_decoding.c" line="171" column="12"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;deltaMCS == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="834" column="15"/>
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="831" column="16" info="&apos;deltaMCS&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="507" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_rb1&apos; can be reduced." verbose="The scope of the variable &apos;nb_rb1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="562" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_rb2&apos; can be reduced." verbose="The scope of the variable &apos;nb_rb2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="562" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="564" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext2&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="604" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ch128&apos; can be reduced." verbose="The scope of the variable &apos;ul_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="629" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ch_mag128&apos; can be reduced." verbose="The scope of the variable &apos;ul_ch_mag128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="629" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="629" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="629" column="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_ch128&apos; can be reduced." verbose="The scope of the variable &apos;ul_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_TRANSPORT/ulsch_demodulation.c" line="738" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;runtime&apos; is assigned a value that is never used." verbose="Variable &apos;runtime&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_CL.c" line="186" column="25"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1522" column="14" info="Shadow variable"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_ue.c" line="1491" column="11" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_pss_sss_re&apos; can be reduced." verbose="The scope of the variable &apos;pbch_pss_sss_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="1331" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;granted_re&apos; can be reduced." verbose="The scope of the variable &apos;granted_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="1333" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data_re&apos; can be reduced." verbose="The scope of the variable &apos;data_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="1334" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;llr_offset&apos; can be reduced." verbose="The scope of the variable &apos;llr_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="1335" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_mod&apos; can be reduced." verbose="The scope of the variable &apos;symbol_mod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="1337" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmi_old&apos; can be reduced." verbose="The scope of the variable &apos;pmi_old&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="2775" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmi_re&apos; can be reduced." verbose="The scope of the variable &apos;pmi_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="2825" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmi_im&apos; can be reduced." verbose="The scope of the variable &apos;pmi_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="2825" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmi_re&apos; can be reduced." verbose="The scope of the variable &apos;pmi_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="2945" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmi_im&apos; can be reduced." verbose="The scope of the variable &apos;pmi_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="2945" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff_cqi&apos; can be reduced." verbose="The scope of the variable &apos;diff_cqi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3069" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3356" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cqi_req&apos; can be reduced." verbose="The scope of the variable &apos;cqi_req&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3374" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dai&apos; can be reduced." verbose="The scope of the variable &apos;dai&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3375" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cshift&apos; can be reduced." verbose="The scope of the variable &apos;cshift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3376" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;TPC&apos; can be reduced." verbose="The scope of the variable &apos;TPC&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3377" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ndi&apos; can be reduced." verbose="The scope of the variable &apos;ndi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3378" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mcs&apos; can be reduced." verbose="The scope of the variable &apos;mcs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3379" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rballoc&apos; can be reduced." verbose="The scope of the variable &apos;rballoc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3380" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;RIV_max&apos; can be reduced." verbose="The scope of the variable &apos;RIV_max&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3380" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;abs_channel&apos; can be reduced." verbose="The scope of the variable &apos;abs_channel&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="4937" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;channelx_i&apos; can be reduced." verbose="The scope of the variable &apos;channelx_i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="4940" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;channely_i&apos; can be reduced." verbose="The scope of the variable &apos;channely_i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="4941" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;drs_offset&apos; can be reduced." verbose="The scope of the variable &apos;drs_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/drs_modulation.c" line="52" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframe_offset&apos; can be reduced." verbose="The scope of the variable &apos;subframe_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/drs_modulation.c" line="54" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/drs_modulation.c" line="54" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/drs_modulation.c" line="54" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha_ind&apos; can be reduced." verbose="The scope of the variable &apos;alpha_ind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/drs_modulation.c" line="65" column="16"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ue-&gt;proc.proc_rxtx[i].frame_rx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ue-&gt;proc.proc_rxtx[i].frame_rx&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="241" column="40" info="ue-&gt;proc.proc_rxtx[i].frame_rx is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="240" column="40" info="ue-&gt;proc.proc_rxtx[i].frame_rx is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;sync_pos2&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;sync_pos2&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="449" column="21" info="sync_pos2 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="446" column="19" info="sync_pos2 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy&apos; can be reduced." verbose="The scope of the variable &apos;dummy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="49" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;phich_resource&apos; can be reduced." verbose="The scope of the variable &apos;phich_resource&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="51" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aarx&apos; can be reduced." verbose="The scope of the variable &apos;aarx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="289" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_power&apos; can be reduced." verbose="The scope of the variable &apos;rx_power&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="289" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_power&apos; is assigned a value that is never used." verbose="Variable &apos;rx_power&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/initial_sync.c" line="289" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offset&apos; is assigned a value that is never used." verbose="Variable &apos;offset&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3066" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;diff_cqi&apos; is assigned a value that is never used." verbose="Variable &apos;diff_cqi&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="3069" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x&apos; is assigned a value that is never used." verbose="Variable &apos;x&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="5133" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reg_offset&apos; can be reduced." verbose="The scope of the variable &apos;reg_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pcfich_ue.c" line="70" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;metric&apos; can be reduced." verbose="The scope of the variable &apos;metric&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pcfich_ue.c" line="74" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bitOffsetInGroup&apos; can be reduced." verbose="The scope of the variable &apos;bitOffsetInGroup&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_mPass.h" line="198" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bitOffsetInGroup&apos; can be reduced." verbose="The scope of the variable &apos;bitOffsetInGroup&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_mPass.h" line="231" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bitOffsetInGroup&apos; can be reduced." verbose="The scope of the variable &apos;bitOffsetInGroup&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_mPass.h" line="311" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="476" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="596" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="612" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="666" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_to_enq&apos; can be reduced." verbose="The scope of the variable &apos;num_to_enq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="668" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_to_enq&apos; can be reduced." verbose="The scope of the variable &apos;num_to_enq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="745" column="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ret&apos; shadows outer variable" verbose="Local variable &apos;ret&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="1005" column="11" info="Shadow variable"/>
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_decoder_offload.c" line="940" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="59" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aatx&apos; can be reduced." verbose="The scope of the variable &apos;aatx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="287" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="288" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_rb&apos; can be reduced." verbose="The scope of the variable &apos;nb_rb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="288" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="289" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="289" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;log2_maxh&apos; can be reduced." verbose="The scope of the variable &apos;log2_maxh&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="388" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_h&apos; can be reduced." verbose="The scope of the variable &apos;max_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="389" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;log2_maxh&apos; can be reduced." verbose="The scope of the variable &apos;log2_maxh&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="547" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_h&apos; can be reduced." verbose="The scope of the variable &apos;max_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="548" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;avg1&apos; is assigned a value that is never used." verbose="Variable &apos;avg1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="153" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_h&apos; is assigned a value that is never used." verbose="Variable &apos;max_h&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="389" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_h&apos; is assigned a value that is never used." verbose="Variable &apos;max_h&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pbch_ue.c" line="548" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i2&apos; can be reduced." verbose="The scope of the variable &apos;i2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/phich_ue.c" line="84" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i3&apos; can be reduced." verbose="The scope of the variable &apos;i3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/phich_ue.c" line="84" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Ngroup_PHICH&apos; can be reduced." verbose="The scope of the variable &apos;Ngroup_PHICH&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/phich_ue.c" line="86" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;NSF_PHICH&apos; can be reduced." verbose="The scope of the variable &apos;NSF_PHICH&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/phich_ue.c" line="87" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pusch_subframe&apos; can be reduced." verbose="The scope of the variable &apos;pusch_subframe&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/phich_ue.c" line="88" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="221" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nre&apos; can be reduced." verbose="The scope of the variable &apos;nre&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="256" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pcRes&apos; is assigned a value that is never used." verbose="Variable &apos;pcRes&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_cnProc.h" line="899" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="257" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="304" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="304" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="304" column="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="304" column="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="412" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="412" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="412" column="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="412" column="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="515" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="516" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="516" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="516" column="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="516" column="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="516" column="91"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="516" column="109"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="546" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="547" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="547" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="547" column="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="547" column="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="547" column="91"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pmch_ue.c" line="547" column="109"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pcRes&apos; is assigned a value that is never used." verbose="Variable &apos;pcRes&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/nrLDPC_decoder/nrLDPC_cnProc.h" line="1540" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;preamble_index0&apos; can be reduced." verbose="The scope of the variable &apos;preamble_index0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="68" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="68" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="68" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d_start&apos; can be reduced." verbose="The scope of the variable &apos;d_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="69" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numshift&apos; can be reduced." verbose="The scope of the variable &apos;numshift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="69" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;not_found&apos; can be reduced." verbose="The scope of the variable &apos;not_found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="74" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="77" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Xu_re&apos; can be reduced." verbose="The scope of the variable &apos;Xu_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="78" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Xu_im&apos; can be reduced." verbose="The scope of the variable &apos;Xu_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/prach_ue.c" line="78" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: Nl1" verbose="Unused variable: Nl1" cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/dlsch_modulation.c" line="3802" column="11"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ulsch-&gt;uci_format&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ulsch-&gt;uci_format&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/rar_tools_ue.c" line="149" column="23" info="ulsch-&gt;uci_format is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/rar_tools_ue.c" line="140" column="50" info="ulsch-&gt;uci_format is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ulsch-&gt;uci_format&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ulsch-&gt;uci_format&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/rar_tools_ue.c" line="149" column="23" info="ulsch-&gt;uci_format is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/rar_tools_ue.c" line="144" column="50" info="ulsch-&gt;uci_format is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;h&apos; can be reduced." verbose="The scope of the variable &apos;h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="64" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="65" column="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txptr&apos; can be reduced." verbose="The scope of the variable &apos;txptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="69" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="70" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="345" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="404" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txptr&apos; can be reduced." verbose="The scope of the variable &apos;txptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="405" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txptr&apos; can be reduced." verbose="The scope of the variable &apos;txptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="608" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="609" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="623" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_slot&apos; can be reduced." verbose="The scope of the variable &apos;first_slot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="634" column="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="653" column="18" info="Shadow variable"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="600" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="673" column="18" info="Shadow variable"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="600" column="12" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first_slot&apos; is assigned a value that is never used." verbose="Variable &apos;first_slot&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="634" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rot_re&apos; is assigned a value that is never used." verbose="Variable &apos;rot_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="635" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rot_im&apos; is assigned a value that is never used." verbose="Variable &apos;rot_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="636" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;alpha_idx&apos; is assigned a value that is never used." verbose="Variable &apos;alpha_idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="644" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;m_alpha_idx&apos; is assigned a value that is never used." verbose="Variable &apos;m_alpha_idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/pucch_ue.c" line="645" column="22"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/srs_modulation.c" line="118" column="24" info="Division by zero"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/srs_modulation.c" line="75" column="23" info="Assignment &apos;Nb=0&apos;, assigned value is 0"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="287" column="34"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="287" column="29" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="288" column="38"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="288" column="33" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="57" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="58" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;A&apos; can be reduced." verbose="The scope of the variable &apos;A&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="174" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Kr&apos; can be reduced." verbose="The scope of the variable &apos;Kr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="176" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Kr_bytes&apos; can be reduced." verbose="The scope of the variable &apos;Kr_bytes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="176" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r_offset&apos; can be reduced." verbose="The scope of the variable &apos;r_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="176" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L&apos; can be reduced." verbose="The scope of the variable &apos;L&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="180" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;G&apos; can be reduced." verbose="The scope of the variable &apos;G&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="180" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ack_parity&apos; can be reduced." verbose="The scope of the variable &apos;ack_parity&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="183" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o_RCC&apos; can be reduced." verbose="The scope of the variable &apos;o_RCC&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_coding.c" line="185" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pss_ext2&apos; can be reduced." verbose="The scope of the variable &apos;pss_ext2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/sss_ue.c" line="48" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sss_ext2&apos; can be reduced." verbose="The scope of the variable &apos;sss_ext2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/sss_ue.c" line="48" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pss_rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;pss_rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/sss_ue.c" line="117" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sss_rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;sss_rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/sss_ue.c" line="118" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re_offset&apos; can be reduced." verbose="The scope of the variable &apos;re_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_modulation.c" line="389" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txptr&apos; can be reduced." verbose="The scope of the variable &apos;txptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_modulation.c" line="393" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_offset&apos; can be reduced." verbose="The scope of the variable &apos;symbol_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/ulsch_modulation.c" line="394" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/compute_bf_weights.c" line="9" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/compute_bf_weights.c" line="9" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;poff&apos; can be reduced." verbose="The scope of the variable &apos;poff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/nr_modulation.c" line="592" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;exp_re&apos; can be reduced." verbose="The scope of the variable &apos;exp_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/nr_modulation.c" line="593" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;exp_im&apos; can be reduced." verbose="The scope of the variable &apos;exp_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/nr_modulation.c" line="594" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;poff&apos; is assigned a value that is never used." verbose="Variable &apos;poff&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/MODULATION/nr_modulation.c" line="592" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;exp_re&apos; is assigned a value that is never used." verbose="Variable &apos;exp_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/MODULATION/nr_modulation.c" line="593" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;exp_im&apos; is assigned a value that is never used." verbose="Variable &apos;exp_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/MODULATION/nr_modulation.c" line="594" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eNB_id&apos; can be reduced." verbose="The scope of the variable &apos;eNB_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="38" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="45" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_offset&apos; can be reduced." verbose="The scope of the variable &apos;rx_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="47" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_offset&apos; can be reduced." verbose="The scope of the variable &apos;rx_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="228" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eNB_id&apos; can be reduced." verbose="The scope of the variable &apos;eNB_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="362" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="363" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="365" column="7"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;l&apos; is less than zero." verbose="The unsigned expression &apos;l&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="95" column="8" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;Ns&apos; is less than zero." verbose="The unsigned expression &apos;Ns&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="100" column="9" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;l&apos; is less than zero." verbose="The unsigned expression &apos;l&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="277" column="8" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;Ns&apos; is less than zero." verbose="The unsigned expression &apos;Ns&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/MODULATION/slot_fep.c" line="282" column="9" info="Unsigned less than zero"/>
        </error>
        <error id="duplicateAssignExpression" severity="style" msg="Same expression used in consecutive assignments of &apos;nb_prefix_samples&apos; and &apos;nb_prefix_samples0&apos;." verbose="Finding variables &apos;nb_prefix_samples&apos; and &apos;nb_prefix_samples0&apos; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep_mbsfn.c" line="40" column="16"/>
            <location file="openair1/PHY/MODULATION/slot_fep_mbsfn.c" line="41" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eNB_id&apos; can be reduced." verbose="The scope of the variable &apos;eNB_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep_mbsfn.c" line="37" column="11"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;l&apos; is less than zero." verbose="The unsigned expression &apos;l&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/MODULATION/slot_fep_mbsfn.c" line="83" column="8" info="Unsigned less than zero"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;rot2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;rot2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/MODULATION/slot_fep_nr.c" line="98" column="23"/>
            <location file="openair1/PHY/MODULATION/slot_fep_nr.c" line="98" column="17" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;rot2&apos; is accessed at non-zero index." verbose="The address of local variable &apos;rot2&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/MODULATION/slot_fep_nr.c" line="109" column="29"/>
            <location file="openair1/PHY/MODULATION/slot_fep_nr.c" line="109" column="23" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_offset&apos; can be reduced." verbose="The scope of the variable &apos;rx_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/slot_fep_ul.c" line="51" column="16"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;l&apos; is less than zero." verbose="The unsigned expression &apos;l&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/MODULATION/slot_fep_ul.c" line="91" column="8" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;Ns&apos; is less than zero." verbose="The unsigned expression &apos;Ns&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/PHY/MODULATION/slot_fep_ul.c" line="96" column="9" info="Unsigned less than zero"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fname" verbose="Unused variable: fname" cwe="563">
            <location file="openair1/PHY/MODULATION/slot_fep_ul.c" line="35" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: vname" verbose="Unused variable: vname" cwe="563">
            <location file="openair1/PHY/MODULATION/slot_fep_ul.c" line="35" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxptr128&apos; can be reduced." verbose="The scope of the variable &apos;rxptr128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/ul_7_5_kHz.c" line="35" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxptr128_7_5kHz&apos; can be reduced." verbose="The scope of the variable &apos;rxptr128_7_5kHz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/ul_7_5_kHz.c" line="35" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;kHz7_5ptr128&apos; can be reduced." verbose="The scope of the variable &apos;kHz7_5ptr128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/MODULATION/ul_7_5_kHz.c" line="35" column="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n0_subband_tot_perPRB&apos; can be reduced." verbose="The scope of the variable &apos;n0_subband_tot_perPRB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_ESTIMATION/nr_measurements_gNB.c" line="169" column="13"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;rb&apos; shadows outer variable" verbose="Local variable &apos;rb&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_ESTIMATION/nr_measurements_gNB.c" line="168" column="12" info="Shadow variable"/>
            <location file="openair1/PHY/NR_ESTIMATION/nr_measurements_gNB.c" line="122" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_REFSIG/dmrs_nr.c" line="115" column="12" info="Shadow variable"/>
            <location file="openair1/PHY/NR_REFSIG/dmrs_nr.c" line="83" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="77" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_dmrs&apos; can be reduced." verbose="The scope of the variable &apos;nb_dmrs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="77" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="78" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="79" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="132" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="133" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="180" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="208" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="250" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="275" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_dmrs&apos; can be reduced." verbose="The scope of the variable &apos;nb_dmrs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="275" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="276" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="78" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="133" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="180" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_dmrs_rx.c" line="208" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nid&apos; can be reduced." verbose="The scope of the variable &apos;Nid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_gold.c" line="122" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x2&apos; is assigned a value that is never used." verbose="Variable &apos;x2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_gold.c" line="26" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x2&apos; is assigned a value that is never used." verbose="Variable &apos;x2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_gold.c" line="121" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reset&apos; can be reduced." verbose="The scope of the variable &apos;reset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/nr_gold_ue.c" line="154" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum_re&apos; can be reduced." verbose="The scope of the variable &apos;sum_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="876" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum_re2&apos; can be reduced." verbose="The scope of the variable &apos;sum_re2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="877" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum_im&apos; can be reduced." verbose="The scope of the variable &apos;sum_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="878" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum_im2&apos; can be reduced." verbose="The scope of the variable &apos;sum_im2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="879" column="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ch0&apos; shadows outer variable" verbose="Local variable &apos;ch0&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="385" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="346" column="13" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n&apos; is assigned a value that is never used." verbose="Variable &apos;n&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_gold_ue.c" line="26" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x2&apos; is assigned a value that is never used." verbose="Variable &apos;x2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_gold_ue.c" line="26" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x2&apos; is assigned a value that is never used." verbose="Variable &apos;x2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/nr_gold_ue.c" line="115" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sum_re&apos; is assigned a value that is never used." verbose="Variable &apos;sum_re&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="876" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sum_re2&apos; is assigned a value that is never used." verbose="Variable &apos;sum_re2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="877" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sum_im&apos; is assigned a value that is never used." verbose="Variable &apos;sum_im&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="878" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sum_im2&apos; is assigned a value that is never used." verbose="Variable &apos;sum_im2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_ESTIMATION/nr_ul_channel_estimation.c" line="879" column="20"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;is_dmrs_symbol&apos; shadows outer function" verbose="Local variable &apos;is_dmrs_symbol&apos; shadows outer function" cwe="398">
            <location file="openair1/PHY/NR_REFSIG/ptrs_nr.c" line="71" column="9" info="Shadow variable"/>
            <location file="openair1/PHY/NR_REFSIG/dmrs_nr.h" line="75" column="23" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmp&apos; is assigned a value that is never used." verbose="Variable &apos;tmp&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_REFSIG/ptrs_nr.c" line="292" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_REFSIG/ul_ref_seq_nr.c" line="300" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cset_start_symb&apos; can be reduced." verbose="The scope of the variable &apos;cset_start_symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dci.c" line="77" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cset_nsymb&apos; can be reduced." verbose="The scope of the variable &apos;cset_nsymb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dci.c" line="77" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dci_idx&apos; can be reduced." verbose="The scope of the variable &apos;dci_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dci.c" line="78" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symb&apos; can be reduced." verbose="The scope of the variable &apos;symb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_csi_rs.c" line="88" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x2&apos; is assigned a value that is never used." verbose="Variable &apos;x2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_csi_rs.c" line="31" column="23"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch_coding.c" line="298" column="32"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch_coding.c" line="298" column="27" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch_coding.c" line="299" column="36"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch_coding.c" line="299" column="31" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch_coding.c" line="314" column="32"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch_coding.c" line="314" column="27" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k_prime&apos; can be reduced." verbose="The scope of the variable &apos;k_prime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch.c" line="237" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch.c" line="238" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ptrs_idx&apos; can be reduced." verbose="The scope of the variable &apos;ptrs_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch.c" line="271" column="13"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch.c" line="423" column="19" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_dlsch.c" line="392" column="17" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_pbch.c" line="59" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_pbch.c" line="173" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_pbch.c" line="235" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_pbch.c" line="59" column="14"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;log2_ifft_size&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;log2_ifft_size&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach.c" line="649" column="24" info="log2_ifft_size is overwritten"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach.c" line="634" column="26" info="log2_ifft_size is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;preamble_shift2&apos; can be reduced." verbose="The scope of the variable &apos;preamble_shift2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach.c" line="451" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach.c" line="706" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach.c" line="708" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach.c" line="709" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach.c" line="710" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach_common.c" line="85" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach_common.c" line="85" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inv_u&apos; can be reduced." verbose="The scope of the variable &apos;inv_u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach_common.c" line="103" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prach_common.c" line="107" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prs.c" line="20" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_prs.c" line="20" column="22"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;s&apos; is accessed at non-zero index." verbose="The address of local variable &apos;s&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/nr_scrambling.c" line="91" column="28"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_scrambling.c" line="87" column="26" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;s&apos; is accessed at non-zero index." verbose="The address of local variable &apos;s&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/nr_scrambling.c" line="92" column="28"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_scrambling.c" line="87" column="26" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;s&apos; is accessed at non-zero index." verbose="The address of local variable &apos;s&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/nr_scrambling.c" line="93" column="28"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_scrambling.c" line="87" column="26" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpShift&apos; can be reduced." verbose="The scope of the variable &apos;tmpShift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_uci_tools_common.c" line="145" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c_init&apos; is assigned a value that is never used." verbose="Variable &apos;c_init&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_uci_tools_common.c" line="67" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmpShift&apos; is assigned a value that is never used." verbose="Variable &apos;tmpShift&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_uci_tools_common.c" line="70" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmpShift&apos; is assigned a value that is never used." verbose="Variable &apos;tmpShift&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_uci_tools_common.c" line="145" column="16"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="78" column="88"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="85" column="81"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="86" column="79"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="135" column="88"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="142" column="84"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="143" column="82"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="219" column="58"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="220" column="43"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="223" column="49"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="239" column="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tx_buffer_prach&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="243" column="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="324" column="50"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="325" column="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="328" column="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="404" column="38"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;rx_buffer&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="408" column="38"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1968" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1838" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;stream0_128i_out&apos; shadows outer variable" verbose="Local variable &apos;stream0_128i_out&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="678" column="22" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="669" column="20" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1954" column="13" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1767" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1958" column="13" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1767" column="12" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch20_ch20&apos; can be reduced." verbose="The scope of the variable &apos;conjch20_ch20&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="899" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch21_ch21&apos; can be reduced." verbose="The scope of the variable &apos;conjch21_ch21&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="900" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch30_ch30&apos; can be reduced." verbose="The scope of the variable &apos;conjch30_ch30&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="901" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch31_ch31&apos; can be reduced." verbose="The scope of the variable &apos;conjch31_ch31&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="902" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch20_ch21&apos; can be reduced." verbose="The scope of the variable &apos;conjch20_ch21&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="903" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch30_ch31&apos; can be reduced." verbose="The scope of the variable &apos;conjch30_ch31&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="904" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch21_ch20&apos; can be reduced." verbose="The scope of the variable &apos;conjch21_ch20&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="905" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conjch31_ch30&apos; can be reduced." verbose="The scope of the variable &apos;conjch31_ch30&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="906" column="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;chF_256&apos; shadows outer variable" verbose="Local variable &apos;chF_256&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="552" column="25" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_demodulation.c" line="515" column="21" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;element_id&apos; is assigned a value that is never used." verbose="Variable &apos;element_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="58" column="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;slotoffsetF&apos; is assigned a value that is never used." verbose="Variable &apos;slotoffsetF&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="60" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;blockoffsetF&apos; is assigned a value that is never used." verbose="Variable &apos;blockoffsetF&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="60" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;data_block&apos; is assigned a value that is never used." verbose="Variable &apos;data_block&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="220" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;data_block&apos; is assigned a value that is never used." verbose="Variable &apos;data_block&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="223" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;slotoffsetF&apos; is assigned a value that is never used." verbose="Variable &apos;slotoffsetF&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="286" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;blockoffsetF&apos; is assigned a value that is never used." verbose="Variable &apos;blockoffsetF&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_TRANSPORT/if4_tools.c" line="286" column="34"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;sGold&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;sGold&apos; might be accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1257" column="37"/>
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1248" column="32" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;sGold&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;sGold&apos; might be accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1258" column="37"/>
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1248" column="32" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_sss&apos; can be reduced." verbose="The scope of the variable &apos;rxF_sss&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_ue_measurements.c" line="245" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;corr_re&apos; can be reduced." verbose="The scope of the variable &apos;corr_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1428" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;corr_im&apos; can be reduced." verbose="The scope of the variable &apos;corr_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1428" column="29"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: r_re_ext" verbose="Uninitialized variable: r_re_ext" cwe="908">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1107" column="16"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: r_im_ext" verbose="Uninitialized variable: r_im_ext" cwe="908">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1108" column="16"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: rd_re_ext" verbose="Uninitialized variable: rd_re_ext" cwe="908">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1109" column="16"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: rd_im_ext" verbose="Uninitialized variable: rd_im_ext" cwe="908">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1110" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;corr_dB&apos; is assigned a value that is never used." verbose="Variable &apos;corr_dB&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1461" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;csi_rs_ls_estimated_channel&apos; can be reduced." verbose="The scope of the variable &apos;csi_rs_ls_estimated_channel&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/csi_rx.c" line="926" column="11"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1620" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1490" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;abs_val&apos; can be reduced." verbose="The scope of the variable &apos;abs_val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="53" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mean_val&apos; can be reduced." verbose="The scope of the variable &apos;mean_val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="100" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch_pwr_dbm&apos; can be reduced." verbose="The scope of the variable &apos;ch_pwr_dbm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="101" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="853" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pil&apos; can be reduced." verbose="The scope of the variable &apos;pil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="855" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF&apos; can be reduced." verbose="The scope of the variable &apos;rxF&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="855" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="855" column="28"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;rxF&apos; shadows outer variable" verbose="Local variable &apos;rxF&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="256" column="17" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="219" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ch_mag&apos; shadows outer variable" verbose="Local variable &apos;ch_mag&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="257" column="17" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="222" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ch_magb&apos; shadows outer variable" verbose="Local variable &apos;ch_magb&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="258" column="17" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="223" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ch_magc&apos; shadows outer variable" verbose="Local variable &apos;ch_magc&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="259" column="17" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="224" column="17" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1606" column="13" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1419" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1610" column="13" info="Shadow variable"/>
            <location file="openair1/PHY/NR_TRANSPORT/nr_ulsch_llr_computation.c" line="1419" column="12" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;abs_val&apos; is assigned a value that is never used." verbose="Variable &apos;abs_val&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="53" column="45"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="99" column="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;snr&apos; is assigned a value that is never used." verbose="Variable &apos;snr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="100" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rsrp&apos; is assigned a value that is never used." verbose="Variable &apos;rsrp&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_ESTIMATION/nr_dl_channel_estimation.c" line="100" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;log2_maxh&apos; can be reduced." verbose="The scope of the variable &apos;log2_maxh&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/dci_nr.c" line="538" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avgs&apos; can be reduced." verbose="The scope of the variable &apos;avgs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/dci_nr.c" line="539" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;f_bundle_j&apos; is assigned a value that is never used." verbose="Variable &apos;f_bundle_j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/dci_nr.c" line="140" column="32"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation_avx2.c" line="952" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation_avx2.c" line="298" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="portability" msg="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;ptrdiff_t {aka signed int}&apos;." verbose="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;ptrdiff_t {aka signed int}&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/dci_nr.c" line="222" column="3"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_decoding.c" line="127" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;LDPCoutput&apos; can be reduced." verbose="The scope of the variable &apos;LDPCoutput&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_decoding.c" line="189" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nr_gold_pbch_ref&apos; can be reduced." verbose="The scope of the variable &apos;nr_gold_pbch_ref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync.c" line="280" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg&apos; can be reduced." verbose="The scope of the variable &apos;avg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="103" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_0&apos; can be reduced." verbose="The scope of the variable &apos;avg_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="104" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_1&apos; can be reduced." verbose="The scope of the variable &apos;avg_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="105" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avgs&apos; can be reduced." verbose="The scope of the variable &apos;avgs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="112" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128_2&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1265" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128&apos; can be reduced." verbose="The scope of the variable &apos;rho128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1265" column="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128_2&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1505" column="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128&apos; can be reduced." verbose="The scope of the variable &apos;rho128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1505" column="99"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nre&apos; can be reduced." verbose="The scope of the variable &apos;Nre&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1805" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1806" column="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1806" column="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1806" column="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nre&apos; can be reduced." verbose="The scope of the variable &apos;Nre&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2046" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag0_128b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag0_128b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2047" column="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag1_128b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag1_128b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2047" column="90"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2047" column="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp0_128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp0_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2047" column="119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp1_128&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp1_128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2047" column="138"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2375" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_rho128&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_rho128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2375" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aatx&apos; can be reduced." verbose="The scope of the variable &apos;aatx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2473" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2474" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_i0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_i0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_i1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_i1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="95"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="144"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_0&apos; can be reduced." verbose="The scope of the variable &apos;rho128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="161"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_1&apos; can be reduced." verbose="The scope of the variable &apos;rho128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="171"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_i0&apos; can be reduced." verbose="The scope of the variable &apos;rho128_i0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128_i1&apos; can be reduced." verbose="The scope of the variable &apos;rho128_i1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2475" column="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_i0&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_i0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2476" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_i1&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_i1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2476" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_i0b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_i0b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2476" column="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_i1b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_i1b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2476" column="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_00&apos; can be reduced." verbose="The scope of the variable &apos;avg_00&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2876" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_01&apos; can be reduced." verbose="The scope of the variable &apos;avg_01&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2877" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3778" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3778" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4357" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch1_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch1_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4357" column="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4357" column="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmi_loc&apos; can be reduced." verbose="The scope of the variable &apos;pmi_loc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4359" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4793" column="16"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;y0r_over2&apos; shadows outer variable" verbose="Local variable &apos;y0r_over2&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="419" column="19" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="334" column="15" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;y0i_over2&apos; shadows outer variable" verbose="Local variable &apos;y0i_over2&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="420" column="19" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="335" column="15" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;y1r_over2&apos; shadows outer variable" verbose="Local variable &apos;y1r_over2&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="436" column="18" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="336" column="15" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;y1i_over2&apos; shadows outer variable" verbose="Local variable &apos;y1i_over2&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="437" column="18" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_llr_computation.c" line="337" column="15" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4793" column="33"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation_avx2.c" line="2782" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation_avx2.c" line="1864" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pss_ext2&apos; can be reduced." verbose="The scope of the variable &apos;pss_ext2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync_sl.c" line="227" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sss_ext2&apos; can be reduced." verbose="The scope of the variable &apos;sss_ext2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync_sl.c" line="227" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;psss_corr_value&apos; is assigned a value that is never used." verbose="Variable &apos;psss_corr_value&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync_sl.c" line="55" column="43"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync_sl.c" line="91" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="213" column="17"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3284" column="83"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync_sl.c" line="92" column="9"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3327" column="61"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync_sl.c" line="92" column="9"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_initial_sync_sl.c" line="104" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="268" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_rb&apos; can be reduced." verbose="The scope of the variable &apos;nb_rb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="268" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="269" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="269" column="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_h&apos; is assigned a value that is never used." verbose="Variable &apos;max_h&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="385" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;not_found&apos; can be reduced." verbose="The scope of the variable &apos;not_found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_prach.c" line="61" column="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;preamble_index0&apos; can be reduced." verbose="The scope of the variable &apos;preamble_index0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_prach.c" line="64" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_prach.c" line="64" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_prach.c" line="64" column="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d_start&apos; can be reduced." verbose="The scope of the variable &apos;d_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_prach.c" line="64" column="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numshift&apos; can be reduced." verbose="The scope of the variable &apos;numshift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_prach.c" line="64" column="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_prach.c" line="64" column="112"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="547" column="3"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="80" column="14" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_pbch.c" line="62" column="11" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch0_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_rx.c" line="42" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxF_ext&apos; can be reduced." verbose="The scope of the variable &apos;rxF_ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_rx.c" line="42" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_h&apos; can be reduced." verbose="The scope of the variable &apos;max_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_rx.c" line="159" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_tx.c" line="113" column="20"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_rx.c" line="100" column="5"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_rx.c" line="101" column="5"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_rx.c" line="103" column="5"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_rx.c" line="104" column="5"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_tx.c" line="45" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_tx.c" line="338" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_tx.c" line="338" column="3"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_tx.c" line="78" column="12" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_psbch_tx.c" line="61" column="7" info="Shadowed declaration"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="91" column="59"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="91" column="54" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="92" column="65"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="92" column="60" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;crc&apos; is accessed at non-zero index." verbose="The address of local variable &apos;crc&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="99" column="59"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="99" column="54" info="Address of variable taken here."/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;crc&apos; is assigned a value that is never used." verbose="Variable &apos;crc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="55" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pss_nr.c" line="667" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pss_nr.c" line="713" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;m&apos; is assigned a value that is never used." verbose="Variable &apos;m&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pss_nr.c" line="667" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pss_nr.c" line="713" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Kr_bytes&apos; is assigned a value that is never used." verbose="Variable &apos;Kr_bytes&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_coding.c" line="134" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b_idx&apos; can be reduced." verbose="The scope of the variable &apos;b_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="60" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;delta&apos; can be reduced." verbose="The scope of the variable &apos;delta&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="111" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L_ptrs&apos; can be reduced." verbose="The scope of the variable &apos;L_ptrs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="163" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="272" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="272" column="18"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="147" column="12" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="113" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="550" column="20" info="Shadow variable"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="113" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;temp_out&apos; is assigned a value that is never used." verbose="Variable &apos;temp_out&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_ulsch_ue.c" line="61" column="44"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;M_sc_b_SRS_index&apos; is used before limits check." verbose="Defensive programming: The variable &apos;M_sc_b_SRS_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/srs_modulation_nr.c" line="278" column="25"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="439" column="9" info="Second condition"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="425" column="9" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="487" column="9" info="Second condition"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="468" column="9" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="563" column="7" info="Second condition"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="552" column="7" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;(ctx&amp;1)==1&apos; is always false" verbose="Condition &apos;(ctx&amp;1)==1&apos; is always false" cwe="570">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1402" column="58" info="Condition &apos;(ctx&amp;1)==1&apos; is always false"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1384" column="15" info="Assignment &apos;ctx=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;(ctx&amp;1)==1&apos; is always false" verbose="Condition &apos;(ctx&amp;1)==1&apos; is always false" cwe="570">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1441" column="73" info="Condition &apos;(ctx&amp;1)==1&apos; is always false"/>
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1426" column="15" info="Assignment &apos;ctx=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch128_2&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch128_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="778" column="28"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;sGold&apos; is accessed at non-zero index." verbose="The address of local variable &apos;sGold&apos; is accessed at non-zero index." cwe="758">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1207" column="34"/>
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="1207" column="27" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rho128&apos; can be reduced." verbose="The scope of the variable &apos;rho128&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="778" column="119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aatx&apos; can be reduced." verbose="The scope of the variable &apos;aatx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1218" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aarx&apos; can be reduced." verbose="The scope of the variable &apos;aarx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1218" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1219" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced." verbose="The scope of the variable &apos;rxdataF_comp128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_0r&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_0r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="121"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_ch_mag128_1r&apos; can be reduced." verbose="The scope of the variable &apos;dl_ch_mag128_1r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1220" column="138"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1379" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;outtemp&apos; can be reduced." verbose="The scope of the variable &apos;outtemp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1416" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;outtemp1&apos; can be reduced." verbose="The scope of the variable &apos;outtemp1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1416" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1423" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;determin_cpx&apos; can be reduced." verbose="The scope of the variable &apos;determin_cpx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="1516" column="20"/>
        </error>
        <error id="duplicateExpressionTernary" severity="style" msg="Same expression in both branches of ternary operator." verbose="Finding the same expression in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="559" column="76"/>
        </error>
        <error id="duplicateExpressionTernary" severity="style" msg="Same expression in both branches of ternary operator." verbose="Finding the same expression in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="584" column="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="488" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;B&apos; can be reduced." verbose="The scope of the variable &apos;B&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="500" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="726" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alpha&apos; can be reduced." verbose="The scope of the variable &apos;alpha&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="1118" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dlsch1_harq&apos; is assigned a value that is never used." verbose="Variable &apos;dlsch1_harq&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_demodulation.c" line="317" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="488" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x2&apos; is assigned a value that is never used." verbose="Variable &apos;x2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="724" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;m&apos; is assigned a value that is never used." verbose="Variable &apos;m&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="726" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;re_offset&apos; is assigned a value that is never used." verbose="Variable &apos;re_offset&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/NR_UE_TRANSPORT/pucch_nr.c" line="1121" column="22"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="112" column="49"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="122" column="49"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;antennas*sizeof(c16_t*)&apos; to function malloc16 is always 8" verbose="Argument &apos;antennas*sizeof(c16_t*)&apos; to function malloc16 is always 8" cwe="570">
            <location file="openair1/PHY/TOOLS/calibration_test.c" line="307" column="49" info="Argument &apos;antennas*sizeof(c16_t*)&apos; to function malloc16 is always 8"/>
            <location file="openair1/PHY/TOOLS/calibration_test.c" line="54" column="16" info="Assignment &apos;antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;antennas*sizeof(c16_t*)&apos; to function malloc16 is always 8" verbose="Argument &apos;antennas*sizeof(c16_t*)&apos; to function malloc16 is always 8" cwe="570">
            <location file="openair1/PHY/TOOLS/calibration_test.c" line="308" column="49" info="Argument &apos;antennas*sizeof(c16_t*)&apos; to function malloc16 is always 8"/>
            <location file="openair1/PHY/TOOLS/calibration_test.c" line="54" column="16" info="Assignment &apos;antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FD_stats_form::stats_form&apos; is never used." verbose="struct member &apos;FD_stats_form::stats_form&apos; is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="52" column="15"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FD_stats_form::vdata&apos; is never used." verbose="struct member &apos;FD_stats_form::vdata&apos; is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="53" column="15"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FD_stats_form::cdata&apos; is never used." verbose="struct member &apos;FD_stats_form::cdata&apos; is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="54" column="15"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FD_stats_form::ldata&apos; is never used." verbose="struct member &apos;FD_stats_form::ldata&apos; is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="55" column="15"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FD_stats_form::stats_text&apos; is never used." verbose="struct member &apos;FD_stats_form::stats_text&apos; is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="56" column="14"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FD_stats_form::stats_button&apos; is never used." verbose="struct member &apos;FD_stats_form::stats_button&apos; is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="57" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;curY&apos; is assigned a value that is never used." verbose="Variable &apos;curY&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="339" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;curY&apos; is assigned a value that is never used." verbose="Variable &apos;curY&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/calibration_scope.c" line="341" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;aarx&apos; is assigned a value that is never used." verbose="Variable &apos;aarx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="1507" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max&apos; is assigned a value that is never used." verbose="Variable &apos;max&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2826" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;min&apos; is assigned a value that is never used." verbose="Variable &apos;min&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2826" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;norm128D&apos; is assigned a value that is never used." verbose="Variable &apos;norm128D&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="2834" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nre&apos; is assigned a value that is never used." verbose="Variable &apos;nre&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3638" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;skip_half&apos; is assigned a value that is never used." verbose="Variable &apos;skip_half&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3777" column="41"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3779" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;skip_half&apos; is assigned a value that is never used." verbose="Variable &apos;skip_half&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4355" column="29"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4358" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;skip_half&apos; is assigned a value that is never used." verbose="Variable &apos;skip_half&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4393" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;skip_half&apos; is assigned a value that is never used." verbose="Variable &apos;skip_half&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4792" column="41"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="4794" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation_avx2.c" line="196" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation_avx2.c" line="1751" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;input2[15]&apos; is assigned a value that is never used." verbose="Variable &apos;input2[15]&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/cmult_sv.c" line="239" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: output" verbose="Unused variable: output" cwe="563">
            <location file="openair1/PHY/TOOLS/cmult_sv.c" line="202" column="11"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;." cwe="783">
            <location file="openair1/PHY/NR_TRANSPORT/pucch_rx.c" line="591" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="104" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Exponent&apos; can be reduced." verbose="The scope of the variable &apos;Exponent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="105" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Mantissa&apos; can be reduced." verbose="The scope of the variable &apos;Mantissa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="106" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift_right&apos; can be reduced." verbose="The scope of the variable &apos;shift_right&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="107" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tbl_resolution&apos; can be reduced." verbose="The scope of the variable &apos;tbl_resolution&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="108" column="12"/>
        </error>
        <error id="shiftTooManyBits" severity="error" msg="Shifting 32-bit value by 4294967289 bits is undefined behaviour" verbose="Shifting 32-bit value by 4294967289 bits is undefined behaviour" cwe="758">
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="126" column="26" info="Shift"/>
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="125" column="28" info="Assignment &apos;shift_right=Exponent-tbl_resolution&apos;, assigned value is 4294967289"/>
            <location file="openair1/PHY/TOOLS/dB_routines.c" line="117" column="16" info="Assignment &apos;Exponent=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;format!=10&apos; is always true" verbose="Condition &apos;format!=10&apos; is always true" cwe="571">
            <location file="openair1/PHY/TOOLS/file_output.c" line="39" column="21" info="Condition &apos;format!=10&apos; is always true"/>
            <location file="openair1/PHY/TOOLS/file_output.c" line="37" column="14" info="Assuming that condition &apos;format==10&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ue_cnt&apos; can be reduced." verbose="The scope of the variable &apos;ue_cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_enb_scope.c" line="73" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ue_cnt&apos; is assigned a value that is never used." verbose="Variable &apos;ue_cnt&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_enb_scope.c" line="73" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i2&apos; can be reduced." verbose="The scope of the variable &apos;i2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="143" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;atx&apos; can be reduced." verbose="The scope of the variable &apos;atx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="143" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Re&apos; can be reduced." verbose="The scope of the variable &apos;Re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="155" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Im&apos; can be reduced." verbose="The scope of the variable &apos;Im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="155" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ymax&apos; can be reduced." verbose="The scope of the variable &apos;ymax&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="155" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;I&apos; can be reduced." verbose="The scope of the variable &apos;I&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="157" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="157" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;I_pucch&apos; can be reduced." verbose="The scope of the variable &apos;I_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="158" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q_pucch&apos; can be reduced." verbose="The scope of the variable &apos;Q_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="158" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;A_pucch&apos; can be reduced." verbose="The scope of the variable &apos;A_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="158" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;B_pucch&apos; can be reduced." verbose="The scope of the variable &apos;B_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="158" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;C_pucch&apos; can be reduced." verbose="The scope of the variable &apos;C_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="158" column="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced." verbose="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="159" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time2&apos; can be reduced." verbose="The scope of the variable &apos;time2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="163" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="168" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;atx&apos; can be reduced." verbose="The scope of the variable &apos;atx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="457" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Re&apos; can be reduced." verbose="The scope of the variable &apos;Re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="472" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Im&apos; can be reduced." verbose="The scope of the variable &apos;Im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="472" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ymax&apos; can be reduced." verbose="The scope of the variable &apos;ymax&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="472" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;llr_pbch&apos; can be reduced." verbose="The scope of the variable &apos;llr_pbch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="474" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bit_pbch&apos; can be reduced." verbose="The scope of the variable &apos;bit_pbch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="474" column="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced." verbose="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="476" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ymax&apos; is assigned a value that is never used." verbose="Variable &apos;ymax&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope.c" line="472" column="19"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="257" column="7"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="266" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i2&apos; can be reduced." verbose="The scope of the variable &apos;i2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="145" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;atx&apos; can be reduced." verbose="The scope of the variable &apos;atx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="145" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Re&apos; can be reduced." verbose="The scope of the variable &apos;Re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="158" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Im&apos; can be reduced." verbose="The scope of the variable &apos;Im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="158" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ymax&apos; can be reduced." verbose="The scope of the variable &apos;ymax&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="158" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;I&apos; can be reduced." verbose="The scope of the variable &apos;I&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="160" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="160" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;I_pucch&apos; can be reduced." verbose="The scope of the variable &apos;I_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="161" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q_pucch&apos; can be reduced." verbose="The scope of the variable &apos;Q_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="161" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;A_pucch&apos; can be reduced." verbose="The scope of the variable &apos;A_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="161" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;B_pucch&apos; can be reduced." verbose="The scope of the variable &apos;B_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="161" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;C_pucch&apos; can be reduced." verbose="The scope of the variable &apos;C_pucch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="161" column="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced." verbose="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="162" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time2&apos; can be reduced." verbose="The scope of the variable &apos;time2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="166" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="171" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;atx&apos; can be reduced." verbose="The scope of the variable &apos;atx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="462" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Re&apos; can be reduced." verbose="The scope of the variable &apos;Re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="477" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Im&apos; can be reduced." verbose="The scope of the variable &apos;Im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="477" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ymax&apos; can be reduced." verbose="The scope of the variable &apos;ymax&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="477" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced." verbose="The scope of the variable &apos;rxsig_t_dB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="481" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ymax&apos; is assigned a value that is never used." verbose="Variable &apos;ymax&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="477" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;total_dlsch_bitrate&apos; is assigned a value that is never used." verbose="Variable &apos;total_dlsch_bitrate&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="486" column="32"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mod0&apos; is assigned a value that is never used." verbose="Variable &apos;mod0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="527" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mod0&apos; is assigned a value that is never used." verbose="Variable &apos;mod0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="539" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mod1&apos; is assigned a value that is never used." verbose="Variable &apos;mod1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="543" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mod1&apos; is assigned a value that is never used." verbose="Variable &apos;mod1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="555" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pbch_llr&apos; is assigned a value that is never used." verbose="Variable &apos;pbch_llr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="580" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pbch_comp&apos; is assigned a value that is never used." verbose="Variable &apos;pbch_comp&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="581" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pdcch_llr&apos; is assigned a value that is never used." verbose="Variable &apos;pdcch_llr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="582" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pdcch_comp&apos; is assigned a value that is never used." verbose="Variable &apos;pdcch_comp&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="583" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: llr_pbch" verbose="Unused variable: llr_pbch" cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="479" column="51"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: bit_pbch" verbose="Unused variable: bit_pbch" cwe="563">
            <location file="openair1/PHY/TOOLS/lte_phy_scope_tm4.c" line="479" column="67"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &apos;PainterWidgetGnb&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &apos;PainterWidgetGnb&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_qt_scope.cpp" line="723" column="9"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &apos;PainterWidgetGnb&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &apos;PainterWidgetGnb&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_qt_scope.cpp" line="723" column="9"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &apos;PainterWidgetUE&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &apos;PainterWidgetUE&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_qt_scope.cpp" line="912" column="9"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &apos;PainterWidgetUE&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &apos;PainterWidgetUE&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_qt_scope.cpp" line="912" column="9"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ConfigBoxFloat&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ConfigBoxFloat&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_qt_scope.h" line="122" column="3"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;KPIPlot&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;KPIPlot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_qt_scope.h" line="391" column="3"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RTXPlot&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RTXPlot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="openair1/PHY/TOOLS/nr_phy_qt_scope.h" line="443" column="3"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;(void*)(newData+1)&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;(void*)(newData+1)&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="openair1/PHY/TOOLS/phy_scope_interface.c" line="96" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/read_F.c" line="7" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/read_F.c" line="7" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: l" verbose="Unused variable: l" cwe="563">
            <location file="openair1/PHY/TOOLS/read_F.c" line="7" column="11"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="0" column="0"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="541" column="10" info="nx is overwritten"/>
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="539" column="14" info="nx is initialized"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="863" column="6" info="nx is overwritten"/>
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="861" column="10" info="nx is initialized"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;newsz&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;newsz&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="886" column="9" info="newsz is overwritten"/>
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="883" column="13" info="newsz is initialized"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="912" column="6" info="nx is overwritten"/>
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="908" column="10" info="nx is initialized"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;newsz&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;newsz&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="934" column="9" info="newsz is overwritten"/>
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="928" column="13" info="newsz is initialized"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;nx&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="956" column="6" info="nx is overwritten"/>
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="952" column="10" info="nx is initialized"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;newsz&apos; is assigned a value that is never used." verbose="Variable &apos;newsz&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/nr_phy_scope.c" line="557" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/fapi_l1.c" line="768" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ulsch_harq&apos; can be reduced." verbose="The scope of the variable &apos;ulsch_harq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/fapi_l1.c" line="769" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi_dci0_req_pdu&apos; can be reduced." verbose="The scope of the variable &apos;hi_dci0_req_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/fapi_l1.c" line="787" column="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_config_pdu&apos; can be reduced." verbose="The scope of the variable &apos;ul_config_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/fapi_l1.c" line="788" column="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/smbv.c" line="301" column="7"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;wakeup_thread(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;wakeup_thread(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1079" column="116"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;wakeup_thread(): error unlocking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;wakeup_thread(): error unlocking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1082" column="122"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;wakeup_thread(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;wakeup_thread(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1088" column="118"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;wakeup_thread(): error unlocking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;wakeup_thread(): error unlocking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1092" column="120"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;wakeup_thread(): error unlocking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;wakeup_thread(): error unlocking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1101" column="120"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] timedwait_on_condition(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] timedwait_on_condition(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1114" column="138"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] timedwait_on_condition(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] timedwait_on_condition(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1131" column="136"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] wait_on_condition(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] wait_on_condition(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1141" column="133"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] wait_on_condition(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] wait_on_condition(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1149" column="129"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] wait_on_busy_condition(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] wait_on_busy_condition(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1159" column="138"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] wait_on_busy_condition(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] wait_on_busy_condition(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1167" column="134"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] release_thread(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_lock(mutex))==0,&quot;[SCHED][eNB] release_thread(): error locking mutex for %s (%d %s, %p)\n&quot;,name,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1176" column="130"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] release_thread(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" verbose="Expression &apos;(rc=pthread_mutex_unlock(mutex))==0,&quot;[SCHED][eNB] release_thread(): error unlocking mutex return %d for %s\n&quot;,rc&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair1/PHY/defs_common.h" line="1178" column="126"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bytes_sent&apos; is assigned a value that is never used." verbose="Variable &apos;bytes_sent&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/smbv.c" line="478" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: status" verbose="Unused variable: status" cwe="563">
            <location file="openair1/PHY/TOOLS/smbv.c" line="506" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid_value&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid_value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_mac_stub.c" line="47" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rballoc&apos; can be reduced." verbose="The scope of the variable &apos;rballoc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_mac_stub.c" line="53" column="12"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="openair1/SCHED/phy_procedures_lte_common.c" line="371" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframe_ul&apos; can be reduced." verbose="The scope of the variable &apos;subframe_ul&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_common.c" line="442" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframe_dl1&apos; can be reduced." verbose="The scope of the variable &apos;subframe_dl1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_common.c" line="442" column="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframe_dl2&apos; can be reduced." verbose="The scope of the variable &apos;subframe_dl2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_common.c" line="442" column="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframe_dl3&apos; can be reduced." verbose="The scope of the variable &apos;subframe_dl3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_common.c" line="442" column="85"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;subframe&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;subframe&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair1/SCHED/phy_procedures_lte_common.c" line="842" column="21" info="Unsigned positive"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ru&apos; can be reduced." verbose="The scope of the variable &apos;ru&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/prach_procedures.c" line="70" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ce_level&apos; can be reduced." verbose="The scope of the variable &apos;ce_level&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/prach_procedures.c" line="80" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ind&apos; can be reduced." verbose="The scope of the variable &apos;ind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/prach_procedures.c" line="110" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ce_level&apos; can be reduced." verbose="The scope of the variable &apos;ce_level&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/prach_procedures.c" line="111" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;aa&apos; is assigned a value that is never used." verbose="Variable &apos;aa&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED/prach_procedures.c" line="71" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="306" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_tx_b&apos; can be reduced." verbose="The scope of the variable &apos;dummy_tx_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="307" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="308" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="308" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tx_offset&apos; can be reduced." verbose="The scope of the variable &apos;tx_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="308" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="310" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len2&apos; can be reduced." verbose="The scope of the variable &apos;len2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="310" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txdata&apos; can be reduced." verbose="The scope of the variable &apos;txdata&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="311" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="458" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;check_sync_pos&apos; can be reduced." verbose="The scope of the variable &apos;check_sync_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/ru_procedures.c" line="658" column="7"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;slot_offset&apos; is less than zero." verbose="The unsigned expression &apos;slot_offset&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/SCHED/ru_procedures.c" line="379" column="22" info="Unsigned less than zero"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_preamble_energy&apos; can be reduced." verbose="The scope of the variable &apos;max_preamble_energy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_prach_procedures.c" line="103" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdu_index&apos; can be reduced." verbose="The scope of the variable &apos;pdu_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_prach_procedures.c" line="106" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_prach_procedures.c" line="108" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ru_aa&apos; can be reduced." verbose="The scope of the variable &apos;ru_aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_prach_procedures.c" line="109" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prachStartSymbol&apos; can be reduced." verbose="The scope of the variable &apos;prachStartSymbol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_prach_procedures.c" line="125" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;aa&apos; is assigned a value that is never used." verbose="Variable &apos;aa&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_NR/nr_prach_procedures.c" line="108" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair1/PHY/TOOLS/smbv.c" line="572" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="175" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="175" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bw&apos; can be reduced." verbose="The scope of the variable &apos;bw&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="179" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="180" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;req&apos; shadows outer variable" verbose="Local variable &apos;req&apos; shadows outer variable" cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="345" column="30" info="Shadow variable"/>
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="335" column="28" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;feptx_cmd&apos; shadows outer variable" verbose="Local variable &apos;feptx_cmd&apos; shadows outer variable" cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="346" column="23" info="Shadow variable"/>
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="336" column="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;req&apos; shadows outer variable" verbose="Local variable &apos;req&apos; shadows outer variable" cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="409" column="30" info="Shadow variable"/>
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="399" column="28" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;feprx_cmd&apos; shadows outer variable" verbose="Local variable &apos;feprx_cmd&apos; shadows outer variable" cwe="398">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="410" column="23" info="Shadow variable"/>
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="400" column="21" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_NR/nr_ru_procedures.c" line="180" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;next&apos; can be reduced." verbose="The scope of the variable &apos;next&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR/phy_frame_config_nr.c" line="393" column="7"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ulsch-&gt;last_iteration_cnt&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ulsch-&gt;last_iteration_cnt&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SCHED_NR/phy_procedures_nr_gNB.c" line="379" column="31" info="ulsch-&gt;last_iteration_cnt is overwritten"/>
            <location file="openair1/SCHED_NR/phy_procedures_nr_gNB.c" line="341" column="31" info="ulsch-&gt;last_iteration_cnt is assigned"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;slot_prs&apos; is assigned a value that is never used." verbose="Variable &apos;slot_prs&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_NR/phy_procedures_nr_gNB.c" line="164" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rb&apos; is assigned a value that is never used." verbose="Variable &apos;rb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_NR/phy_procedures_nr_gNB.c" line="546" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rb2&apos; is assigned a value that is never used." verbose="Variable &apos;rb2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_NR/phy_procedures_nr_gNB.c" line="547" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prbpos&apos; is assigned a value that is never used." verbose="Variable &apos;prbpos&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_NR/phy_procedures_nr_gNB.c" line="548" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sl_rx_action&apos; can be reduced." verbose="The scope of the variable &apos;sl_rx_action&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR_UE/fapi_nr_ue_l1.c" line="586" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret1&apos; can be reduced." verbose="The scope of the variable &apos;ret1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR_UE/phy_procedures_nr_ue.c" line="656" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prach_power&apos; can be reduced." verbose="The scope of the variable &apos;prach_power&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_NR_UE/phy_procedures_nr_ue.c" line="1181" column="65"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;gNB_id&apos; shadows outer variable" verbose="Local variable &apos;gNB_id&apos; shadows outer variable" cwe="398">
            <location file="openair1/SCHED_NR_UE/phy_procedures_nr_ue.c" line="920" column="11" info="Shadow variable"/>
            <location file="openair1/SCHED_NR_UE/phy_procedures_nr_ue.c" line="829" column="7" info="Shadowed declaration"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: dlsch1_harq!=NULL. &apos;A || (!A &amp;&amp; B)&apos; is equivalent to &apos;A || B&apos;" verbose="The condition &apos;dlsch1_harq==NULL || dlsch1_harq!=NULL &amp;&amp; dlsch1_harq-&gt;status==SCH_IDLE&apos; is equivalent to &apos;dlsch1_harq==NULL || dlsch1_harq-&gt;status==SCH_IDLE&apos;." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1639" column="37"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="456" column="14" info="Second condition"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="455" column="14" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="569" column="14" info="Second condition"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="567" column="14" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="650" column="14" info="Second condition"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="648" column="14" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;dlsch0==NULL&apos; is always true" verbose="Condition &apos;dlsch0==NULL&apos; is always true" cwe="571">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1674" column="16" info="Condition &apos;dlsch0==NULL&apos; is always true"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1659" column="27" info="Assignment &apos;dlsch0=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &apos;sizeof&apos; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &apos;sizeof(10)&apos; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &apos;sizeof(&apos;A&apos;)&apos; and &apos;sizeof(char)&apos; can return different results." cwe="682">
            <location file="openair1/SCHED_NR_UE/phy_procedures_nr_ue_sl.c" line="85" column="62"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;dlsch0_harq!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch0_harq." verbose="Either the condition &apos;dlsch0_harq!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch0_harq." cwe="476">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1587" column="9" info="Null pointer dereference"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1564" column="41" info="Assignment &apos;dlsch0_harq=dlsch0-&gt;harq_processes[harq_pid]&apos;, assigned value is 0"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1566" column="29" info="Assuming that condition &apos;dlsch0_harq!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;dlsch0_harq!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch0_harq." verbose="Either the condition &apos;dlsch0_harq!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch0_harq." cwe="476">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1636" column="13" info="Null pointer dereference"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1613" column="45" info="Assignment &apos;dlsch0_harq=dlsch0-&gt;harq_processes[harq_pid]&apos;, assigned value is 0"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1615" column="33" info="Assuming that condition &apos;dlsch0_harq!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;dlsch0_harq!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch0_harq." verbose="Either the condition &apos;dlsch0_harq!=NULL&apos; is redundant or there is possible null pointer dereference: dlsch0_harq." cwe="476">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1686" column="11" info="Null pointer dereference"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1682" column="47" info="Assignment &apos;dlsch0_harq=dlsch0-&gt;harq_processes[harq_pid]&apos;, assigned value is 0"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1684" column="30" info="Assuming that condition &apos;dlsch0_harq!=NULL&apos; is not redundant"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;==&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="83" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_mdci&apos; can be reduced." verbose="The scope of the variable &apos;num_mdci&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="444" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dlsch1&apos; can be reduced." verbose="The scope of the variable &apos;dlsch1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="584" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="659" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1661" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframe_tx&apos; can be reduced." verbose="The scope of the variable &apos;subframe_tx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1662" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_tx&apos; can be reduced." verbose="The scope of the variable &apos;frame_tx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1662" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;M&apos; can be reduced." verbose="The scope of the variable &apos;M&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1746" column="7"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;harq_pid&apos; is less than zero." verbose="The unsigned expression &apos;harq_pid&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="601" column="20" info="Unsigned less than zero"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;(beta_offset_pusch)&gt;&gt;3&apos; to function dB_fixed_x10 is always 1" verbose="Argument &apos;(beta_offset_pusch)&gt;&gt;3&apos; to function dB_fixed_x10 is always 1" cwe="570">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="87" column="84" info="Argument &apos;(beta_offset_pusch)&gt;&gt;3&apos; to function dB_fixed_x10 is always 1"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="77" column="23" info="Assignment &apos;beta_offset_pusch=8&apos;, assigned value is 8"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;(beta_offset_pusch)&gt;&gt;3&apos; to function dB_fixed_x10 is always 1" verbose="Argument &apos;(beta_offset_pusch)&gt;&gt;3&apos; to function dB_fixed_x10 is always 1" cwe="570">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="89" column="84" info="Argument &apos;(beta_offset_pusch)&gt;&gt;3&apos; to function dB_fixed_x10 is always 1"/>
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="77" column="23" info="Assignment &apos;beta_offset_pusch=8&apos;, assigned value is 8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_mdci&apos; is assigned a value that is never used." verbose="Variable &apos;num_mdci&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="444" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dlsch1_harq&apos; is assigned a value that is never used." verbose="Variable &apos;dlsch1_harq&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED/phy_procedures_lte_eNb.c" line="1565" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_dci&apos; can be reduced." verbose="The scope of the variable &apos;n_dci&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="263" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_dci_dl&apos; can be reduced." verbose="The scope of the variable &apos;n_dci_dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="263" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;payload_offset&apos; can be reduced." verbose="The scope of the variable &apos;payload_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="264" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="265" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dlsch_eNB&apos; can be reduced." verbose="The scope of the variable &apos;dlsch_eNB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="266" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ue_id&apos; can be reduced." verbose="The scope of the variable &apos;ue_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="267" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;enb_id&apos; can be reduced." verbose="The scope of the variable &apos;enb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="410" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rnti&apos; can be reduced." verbose="The scope of the variable &apos;rnti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="413" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="414" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n_dci&apos; is assigned a value that is never used." verbose="Variable &apos;n_dci&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/emu_transport.c" line="263" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/netlink_init.c" line="136" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/netlink_init.c" line="130" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/netlink_init.c" line="194" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_bytes&apos; can be reduced." verbose="The scope of the variable &apos;num_bytes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/ETH_TRANSPORT/multicast_link.c" line="200" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dci_tools_ue.c" line="5205" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="137" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aatx&apos; can be reduced." verbose="The scope of the variable &apos;aatx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="138" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;channelx&apos; can be reduced." verbose="The scope of the variable &apos;channelx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="139" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;channely&apos; can be reduced." verbose="The scope of the variable &apos;channely&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="139" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re&apos; can be reduced." verbose="The scope of the variable &apos;re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="499" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time_meas_fname&apos; can be reduced." verbose="The scope of the variable &apos;time_meas_fname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="533" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="545" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numCCE&apos; can be reduced." verbose="The scope of the variable &apos;numCCE&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="557" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;csv_fname&apos; can be reduced." verbose="The scope of the variable &apos;csv_fname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="578" column="8"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="503" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="498" column="9" info="Shadowed declaration"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;{&apos;. Configuration: &apos;&apos;." verbose="Unmatched &apos;{&apos;. Configuration: &apos;&apos;.">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm4.c" line="135" column="1"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1260" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="498" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1388" column="16" info="Shadow variable"/>
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="498" column="9" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.dl_config_request_body.number_pdcch_ofdm_symbols&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.dl_config_request_body.number_pdcch_ofdm_symbols&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1316" column="61"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1317" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1318" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;round&apos; is assigned a value that is never used." verbose="Variable &apos;round&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1373" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1477" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1478" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1482" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1483" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.dl_config_request_body.number_dci&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.dl_config_request_body.number_dci&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1522" column="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.dl_config_request_body.number_pdu&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.dl_config_request_body.number_pdu&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1523" column="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.tx_request_body.number_of_pdus&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.tx_request_body.number_of_pdus&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim.c" line="1524" column="50"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;fname&apos; shadows outer variable" verbose="Local variable &apos;fname&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="622" column="10" info="Shadow variable"/>
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="473" column="8" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;vname&apos; shadows outer variable" verbose="Local variable &apos;vname&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="622" column="21" info="Shadow variable"/>
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="473" column="19" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: nthreads" verbose="Unused variable: nthreads" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="328" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tid" verbose="Unused variable: tid" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="328" column="16"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ind" verbose="Unused variable: ind" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="366" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BW&apos; is assigned a value that is never used." verbose="Variable &apos;BW&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="569" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_pdcch_symbols&apos; is assigned a value that is never used." verbose="Variable &apos;num_pdcch_symbols&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="570" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BW&apos; is assigned a value that is never used." verbose="Variable &apos;BW&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="575" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BW&apos; is assigned a value that is never used." verbose="Variable &apos;BW&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="580" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BW&apos; is assigned a value that is never used." verbose="Variable &apos;BW&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="585" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="467" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: l" verbose="Unused variable: l" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="467" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: aa" verbose="Unused variable: aa" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="467" column="11"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: aarx" verbose="Unused variable: aarx" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="467" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sector" verbose="Unused variable: sector" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="467" column="19"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: pbch_pdu" verbose="Unused variable: pbch_pdu" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="469" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: result" verbose="Unused variable: result" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="470" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: freq_offset" verbose="Unused variable: freq_offset" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="471" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: subframe_offset" verbose="Unused variable: subframe_offset" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="472" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fname" verbose="Unused variable: fname" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="473" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: vname" verbose="Unused variable: vname" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="473" column="19"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: nsymb" verbose="Unused variable: nsymb" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="487" column="12"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tx_lev" verbose="Unused variable: tx_lev" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="487" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tx_lev_dB" verbose="Unused variable: tx_lev_dB" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="487" column="25"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: frame_mod4" verbose="Unused variable: frame_mod4" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/framegen.c" line="493" column="11"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;{&apos;. Configuration: &apos;DEBUG_HARQ&apos;." verbose="Unmatched &apos;{&apos;. Configuration: &apos;DEBUG_HARQ&apos;.">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm4.c" line="135" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;{&apos;. Configuration: &apos;PRINT_THROUGHPUT&apos;." verbose="Unmatched &apos;{&apos;. Configuration: &apos;PRINT_THROUGHPUT&apos;.">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm4.c" line="135" column="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="140" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aatx&apos; can be reduced." verbose="The scope of the variable &apos;aatx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="141" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;channelx&apos; can be reduced." verbose="The scope of the variable &apos;channelx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="142" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;channely&apos; can be reduced." verbose="The scope of the variable &apos;channely&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="142" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re&apos; can be reduced." verbose="The scope of the variable &apos;re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="589" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time_meas_fname&apos; can be reduced." verbose="The scope of the variable &apos;time_meas_fname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="619" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="631" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;title&apos; can be reduced." verbose="The scope of the variable &apos;title&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="644" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numCCE&apos; can be reduced." verbose="The scope of the variable &apos;numCCE&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="645" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;csv_fname&apos; can be reduced." verbose="The scope of the variable &apos;csv_fname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="666" column="8"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1476" column="16" info="Shadow variable"/>
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="588" column="13" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: dl_config_pdu" verbose="Unused variable: dl_config_pdu" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="379" column="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.dl_config_request_body.number_pdcch_ofdm_symbols&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.dl_config_request_body.number_pdcch_ofdm_symbols&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1388" column="61"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1389" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1390" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;round&apos; is assigned a value that is never used." verbose="Variable &apos;round&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1461" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1565" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1566" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1570" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.sfn_sf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1571" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.dl_config_request_body.number_dci&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.dl_config_request_body.number_dci&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1624" column="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DL_req.dl_config_request_body.number_pdu&apos; is assigned a value that is never used." verbose="Variable &apos;DL_req.dl_config_request_body.number_pdu&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1625" column="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TX_req.tx_request_body.number_of_pdus&apos; is assigned a value that is never used." verbose="Variable &apos;TX_req.tx_request_body.number_of_pdus&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="1626" column="50"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_re0&apos; is not assigned a value." verbose="Variable &apos;s_re0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="592" column="10"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_im0&apos; is not assigned a value." verbose="Variable &apos;s_im0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="592" column="25"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_re0&apos; is not assigned a value." verbose="Variable &apos;r_re0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="592" column="40"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_im0&apos; is not assigned a value." verbose="Variable &apos;r_im0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="592" column="55"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_re1&apos; is not assigned a value." verbose="Variable &apos;s_re1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="593" column="10"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_im1&apos; is not assigned a value." verbose="Variable &apos;s_im1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="593" column="25"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_re1&apos; is not assigned a value." verbose="Variable &apos;r_re1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="593" column="40"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_im1&apos; is not assigned a value." verbose="Variable &apos;r_im1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/mbmssim.c" line="593" column="55"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;{&apos;. Configuration: &apos;TBS_FIX&apos;." verbose="Unmatched &apos;{&apos;. Configuration: &apos;TBS_FIX&apos;.">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm4.c" line="135" column="1"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="114" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="100" column="19" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="101" column="19" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." verbose="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="115" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="103" column="20" info="Assignment &apos;fd2=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="104" column="20" info="Assuming that condition &apos;fd2!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="144" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="100" column="19" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="101" column="19" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." verbose="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="145" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="103" column="20" info="Assignment &apos;fd2=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="104" column="20" info="Assuming that condition &apos;fd2!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="146" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="100" column="19" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="101" column="19" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." verbose="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="147" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="103" column="20" info="Assignment &apos;fd2=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="104" column="20" info="Assuming that condition &apos;fd2!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="148" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="100" column="19" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="101" column="19" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." verbose="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="149" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="103" column="20" info="Assignment &apos;fd2=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="104" column="20" info="Assuming that condition &apos;fd2!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="150" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="100" column="19" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="101" column="19" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." verbose="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="151" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="103" column="20" info="Assignment &apos;fd2=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="104" column="20" info="Assuming that condition &apos;fd2!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="152" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="100" column="19" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="101" column="19" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." verbose="Either the condition &apos;fd2!=NULL&apos; is redundant or there is possible null pointer dereference: fd2." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="153" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="103" column="20" info="Assignment &apos;fd2=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="104" column="20" info="Assuming that condition &apos;fd2!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="154" column="13" info="Null pointer dereference"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="100" column="19" info="Assignment &apos;fd=fopen(fname,&quot;w&quot;)&apos;, assigned value is 0"/>
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="101" column="19" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;var&apos; can be reduced." verbose="The scope of the variable &apos;var&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="57" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nind&apos; can be reduced." verbose="The scope of the variable &apos;nind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="59" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;indlist&apos; can be reduced." verbose="The scope of the variable &apos;indlist&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="60" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;indlist2&apos; can be reduced." verbose="The scope of the variable &apos;indlist2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="61" column="7"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;is_cw1_active&apos; and inner condition is &apos;is_cw1_active&apos;)." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3526" column="18" info="identical inner condition: is_cw1_active"/>
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3507" column="8" info="outer condition: is_cw1_active"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;{&apos;. Configuration: &apos;__aarch64__;__arm__&apos;." verbose="Unmatched &apos;{&apos;. Configuration: &apos;__aarch64__;__arm__&apos;.">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm4.c" line="135" column="1"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;harq_ack0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;harq_ack0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="725" column="19" info="harq_ack0 is overwritten"/>
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="680" column="19" info="harq_ack0 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_pucch2_subframe&apos; can be reduced." verbose="The scope of the variable &apos;is_pucch2_subframe&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="437" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_sr_an_subframe&apos; can be reduced." verbose="The scope of the variable &apos;is_sr_an_subframe&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="438" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SR_payload&apos; can be reduced." verbose="The scope of the variable &apos;SR_payload&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="466" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nCCE0&apos; can be reduced." verbose="The scope of the variable &apos;nCCE0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="645" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nCCE1&apos; can be reduced." verbose="The scope of the variable &apos;nCCE1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="645" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nCCE2&apos; can be reduced." verbose="The scope of the variable &apos;nCCE2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="645" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nCCE3&apos; can be reduced." verbose="The scope of the variable &apos;nCCE3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="645" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n1_pucch0&apos; can be reduced." verbose="The scope of the variable &apos;n1_pucch0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="647" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n1_pucch1&apos; can be reduced." verbose="The scope of the variable &apos;n1_pucch1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="647" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n1_pucch2&apos; can be reduced." verbose="The scope of the variable &apos;n1_pucch2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="647" column="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n1_pucch3&apos; can be reduced." verbose="The scope of the variable &apos;n1_pucch3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="647" column="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n1_pucch_inter&apos; can be reduced." verbose="The scope of the variable &apos;n1_pucch_inter&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="647" column="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_dl&apos; can be reduced." verbose="The scope of the variable &apos;last_dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="649" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sf&apos; can be reduced." verbose="The scope of the variable &apos;sf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="650" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;M&apos; can be reduced." verbose="The scope of the variable &apos;M&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="651" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ack_counter&apos; can be reduced." verbose="The scope of the variable &apos;ack_counter&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="652" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_rb&apos; can be reduced." verbose="The scope of the variable &apos;first_rb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1340" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_rb&apos; can be reduced." verbose="The scope of the variable &apos;nb_rb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1340" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;input_buffer_length&apos; can be reduced." verbose="The scope of the variable &apos;input_buffer_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1341" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1342" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aa&apos; can be reduced." verbose="The scope of the variable &apos;aa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1343" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tx_amp&apos; can be reduced." verbose="The scope of the variable &apos;tx_amp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1344" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ulsch_input_buffer&apos; can be reduced." verbose="The scope of the variable &apos;ulsch_input_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1345" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ack_status_cw0&apos; can be reduced." verbose="The scope of the variable &apos;ack_status_cw0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1349" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ack_status_cw1&apos; can be reduced." verbose="The scope of the variable &apos;ack_status_cw1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1350" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cqi_status&apos; can be reduced." verbose="The scope of the variable &apos;cqi_status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1351" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ri_status&apos; can be reduced." verbose="The scope of the variable &apos;ri_status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1352" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tx_amp&apos; can be reduced." verbose="The scope of the variable &apos;tx_amp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1703" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Po_SRS&apos; can be reduced." verbose="The scope of the variable &apos;Po_SRS&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1704" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;isSubframeSRS&apos; can be reduced." verbose="The scope of the variable &apos;isSubframeSRS&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2118" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_tx_ant&apos; can be reduced." verbose="The scope of the variable &apos;pbch_tx_ant&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2287" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_tx&apos; can be reduced." verbose="The scope of the variable &apos;frame_tx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2289" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_trials&apos; can be reduced." verbose="The scope of the variable &apos;pbch_trials&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2291" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmch_mcs&apos; can be reduced." verbose="The scope of the variable &apos;pmch_mcs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2802" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2806" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2807" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3130" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rar&apos; can be reduced." verbose="The scope of the variable &apos;rar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3131" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3216" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret1&apos; can be reduced." verbose="The scope of the variable &apos;ret1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3216" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdsch_vars&apos; can be reduced." verbose="The scope of the variable &apos;pdsch_vars&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3218" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="4349" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l2&apos; can be reduced." verbose="The scope of the variable &apos;l2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="4349" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pilot1&apos; can be reduced." verbose="The scope of the variable &apos;pilot1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="4350" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmch_flag&apos; can be reduced." verbose="The scope of the variable &apos;pmch_flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="4351" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="295" column="12" info="Shadow variable"/>
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="292" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="305" column="16" info="Shadow variable"/>
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="292" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_pdu&apos; can be reduced." verbose="The scope of the variable &apos;pbch_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pbchsim.c" line="67" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors2&apos; can be reduced." verbose="The scope of the variable &apos;n_errors2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pbchsim.c" line="76" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_alamouti&apos; can be reduced." verbose="The scope of the variable &apos;n_alamouti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pbchsim.c" line="76" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;input_val_str&apos; can be reduced." verbose="The scope of the variable &apos;input_val_str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pbchsim.c" line="86" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;input_val_str2&apos; can be reduced." verbose="The scope of the variable &apos;input_val_str2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pbchsim.c" line="86" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_pdcch_symbols&apos; can be reduced." verbose="The scope of the variable &apos;num_pdcch_symbols&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pbchsim.c" line="89" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_pucch2_subframe&apos; is assigned a value that is never used." verbose="Variable &apos;is_pucch2_subframe&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="437" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SR_payload&apos; is assigned a value that is never used." verbose="Variable &apos;SR_payload&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="466" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;overflow&apos; is assigned a value that is never used." verbose="Variable &apos;overflow&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1143" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ack_status_cw0&apos; is assigned a value that is never used." verbose="Variable &apos;ack_status_cw0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1349" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ack_status_cw1&apos; is assigned a value that is never used." verbose="Variable &apos;ack_status_cw1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1350" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cqi_status&apos; is assigned a value that is never used." verbose="Variable &apos;cqi_status&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1351" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ri_status&apos; is assigned a value that is never used." verbose="Variable &apos;ri_status&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="1352" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pbch_trials&apos; is assigned a value that is never used." verbose="Variable &apos;pbch_trials&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2291" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pmch_mcs&apos; is assigned a value that is never used." verbose="Variable &apos;pmch_mcs&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2802" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="2807" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first_symbol_flag&apos; is assigned a value that is never used." verbose="Variable &apos;first_symbol_flag&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3039" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;harq_pid&apos; is assigned a value that is never used." verbose="Variable &apos;harq_pid&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3130" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pmch_flag&apos; is assigned a value that is never used." verbose="Variable &apos;pmch_flag&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="4351" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pucch_tx&apos; can be reduced." verbose="The scope of the variable &apos;pucch_tx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="72" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pucch1_missed&apos; can be reduced." verbose="The scope of the variable &apos;pucch1_missed&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="72" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pucch1_false&apos; can be reduced." verbose="The scope of the variable &apos;pucch1_false&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="72" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pucch3_false&apos; can be reduced." verbose="The scope of the variable &apos;pucch3_false&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="72" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;stat_no_sig&apos; can be reduced." verbose="The scope of the variable &apos;stat_no_sig&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="81" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;stat_sig&apos; can be reduced." verbose="The scope of the variable &apos;stat_sig&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="81" column="22"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_re0&apos; is not assigned a value." verbose="Variable &apos;s_re0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="10"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_re1&apos; is not assigned a value." verbose="Variable &apos;s_re1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="23"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_im0&apos; is not assigned a value." verbose="Variable &apos;s_im0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="36"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_im1&apos; is not assigned a value." verbose="Variable &apos;s_im1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="49"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_re0&apos; is not assigned a value." verbose="Variable &apos;r_re0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="62"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_im0&apos; is not assigned a value." verbose="Variable &apos;r_im0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="75"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_re1&apos; is not assigned a value." verbose="Variable &apos;r_re1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="88"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_im1&apos; is not assigned a value." verbose="Variable &apos;r_im1&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/pucchsim.c" line="54" column="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors_common&apos; can be reduced." verbose="The scope of the variable &apos;n_errors_common&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="389" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors_dl&apos; can be reduced." verbose="The scope of the variable &apos;n_errors_dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="389" column="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors_cfi&apos; can be reduced." verbose="The scope of the variable &apos;n_errors_cfi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="389" column="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors_hi&apos; can be reduced." verbose="The scope of the variable &apos;n_errors_hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="389" column="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_trials_common&apos; can be reduced." verbose="The scope of the variable &apos;n_trials_common&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="404" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_trials_ul&apos; can be reduced." verbose="The scope of the variable &apos;n_trials_ul&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="404" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_trials_dl&apos; can be reduced." verbose="The scope of the variable &apos;n_trials_dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="404" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;input_val_str&apos; can be reduced." verbose="The scope of the variable &apos;input_val_str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="408" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;input_val_str2&apos; can be reduced." verbose="The scope of the variable &apos;input_val_str2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="408" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/pdcchsim.c" line="413" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors2&apos; can be reduced." verbose="The scope of the variable &apos;n_errors2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="77" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_alamouti&apos; can be reduced." verbose="The scope of the variable &apos;n_alamouti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="77" column="54"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;(double)tx_lev1&apos; to function log10 is always 0" verbose="Argument &apos;(double)tx_lev1&apos; to function log10 is always 0" cwe="570">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="518" column="25" info="Argument &apos;(double)tx_lev1&apos; to function log10 is always 0"/>
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="469" column="13" info="Assignment &apos;tx_lev1=0&apos;, assigned value is 0"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;(double)tx_lev2&apos; to function log10 is always 0" verbose="Argument &apos;(double)tx_lev2&apos; to function log10 is always 0" cwe="570">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="519" column="25" info="Argument &apos;(double)tx_lev2&apos; to function log10 is always 0"/>
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="470" column="13" info="Assignment &apos;tx_lev2=0&apos;, assigned value is 0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;txdata1&apos; is assigned a value that is never used." verbose="Variable &apos;txdata1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="299" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;txdata2&apos; is assigned a value that is never used." verbose="Variable &apos;txdata2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="300" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pbch_pdu[2]&apos; is assigned a value that is never used." verbose="Variable &apos;pbch_pdu[2]&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="372" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: l" verbose="Unused variable: l" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="61" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: result" verbose="Unused variable: result" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="73" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: freq_offset" verbose="Unused variable: freq_offset" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="74" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: eNB2UE1" verbose="Unused variable: eNB2UE1" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="81" column="27"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: eNB2UE2" verbose="Unused variable: eNB2UE2" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="81" column="36"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: input_val_str" verbose="Unused variable: input_val_str" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="86" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: input_val_str2" verbose="Unused variable: input_val_str2" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="86" column="26"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: frame_mod4" verbose="Unused variable: frame_mod4" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="89" column="11"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: num_pdcch_symbols" verbose="Unused variable: num_pdcch_symbols" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="89" column="22"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: pbch_tx_ant" verbose="Unused variable: pbch_tx_ant" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/scansim.c" line="94" column="7"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 2) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." verbose="%d in format string (no. 2) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." cwe="686">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="430" column="9"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 3) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." verbose="%d in format string (no. 3) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." cwe="686">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="430" column="9"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 4) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." verbose="%d in format string (no. 4) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." cwe="686">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="430" column="9"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 2) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." verbose="%d in format string (no. 2) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." cwe="686">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="436" column="9"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 3) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." verbose="%d in format string (no. 3) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." cwe="686">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="436" column="9"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 4) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." verbose="%d in format string (no. 4) requires &apos;int *&apos; but the argument type is &apos;unsigned int *&apos;." cwe="686">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="436" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iout&apos; can be reduced." verbose="The scope of the variable &apos;iout&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="308" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="308" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sigma2&apos; can be reduced." verbose="The scope of the variable &apos;sigma2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="309" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sigma2_dB&apos; can be reduced." verbose="The scope of the variable &apos;sigma2_dB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="309" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SNR&apos; can be reduced." verbose="The scope of the variable &apos;SNR&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="309" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iqim&apos; can be reduced." verbose="The scope of the variable &apos;iqim&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="317" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_pdu&apos; can be reduced." verbose="The scope of the variable &apos;pbch_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="318" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;trial&apos; can be reduced." verbose="The scope of the variable &apos;trial&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="321" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors2&apos; can be reduced." verbose="The scope of the variable &apos;n_errors2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="321" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_alamouti&apos; can be reduced." verbose="The scope of the variable &apos;n_alamouti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="321" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dci_cnt&apos; can be reduced." verbose="The scope of the variable &apos;dci_cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="346" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cs&apos; can be reduced." verbose="The scope of the variable &apos;cs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="348" column="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sn&apos; can be reduced." verbose="The scope of the variable &apos;sn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="348" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;do_forms&apos; can be reduced." verbose="The scope of the variable &apos;do_forms&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="356" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;UE_idx&apos; can be reduced." verbose="The scope of the variable &apos;UE_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="363" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i_mod&apos; can be reduced." verbose="The scope of the variable &apos;i_mod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="365" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_offset_mod&apos; can be reduced." verbose="The scope of the variable &apos;rx_offset_mod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="366" column="7"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;+&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a+b?c:d&apos;&apos; should be written as either &apos;&apos;(a+b)?c:d&apos;&apos; or &apos;&apos;a+(b?c:d)&apos;&apos;." cwe="783">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="1377" column="69"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;+&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a+b?c:d&apos;&apos; should be written as either &apos;&apos;(a+b)?c:d&apos;&apos; or &apos;&apos;a+(b?c:d)&apos;&apos;." cwe="783">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="1433" column="69"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="1141" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n_alamouti&apos; is assigned a value that is never used." verbose="Variable &apos;n_alamouti&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="1222" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: pbch_sinr" verbose="Unused variable: pbch_sinr" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="338" column="10"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;first_call == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="210" column="33"/>
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="79" column="30" info="&apos;first_call&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;first_call == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="212" column="18"/>
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="79" column="30" info="&apos;first_call&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;(lte_frame_parms-&gt;samples_per_tti&gt;&gt;1)*sizeof(int)&apos; to function malloc16 is always 15360" verbose="Argument &apos;(lte_frame_parms-&gt;samples_per_tti&gt;&gt;1)*sizeof(int)&apos; to function malloc16 is always 15360" cwe="570">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="120" column="31" info="Argument &apos;(lte_frame_parms-&gt;samples_per_tti&gt;&gt;1)*sizeof(int)&apos; to function malloc16 is always 15360"/>
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="114" column="36" info="lte_frame_parms-&gt;samples_per_tti is assigned value 7680"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sigma2_dB&apos; is assigned a value that is never used." verbose="Variable &apos;sigma2_dB&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="42" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n_errors&apos; is assigned a value that is never used." verbose="Variable &apos;n_errors&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="61" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nb_rb&apos; is assigned a value that is never used." verbose="Variable &apos;nb_rb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="62" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first_rb&apos; is assigned a value that is never used." verbose="Variable &apos;first_rb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="63" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;eNb_id&apos; is assigned a value that is never used." verbose="Variable &apos;eNb_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="64" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sample_offset&apos; is assigned a value that is never used." verbose="Variable &apos;sample_offset&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="66" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;channel_offset&apos; is assigned a value that is never used." verbose="Variable &apos;channel_offset&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="67" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;slot&apos; is assigned a value that is never used." verbose="Variable &apos;slot&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="70" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;last_slot&apos; is assigned a value that is never used." verbose="Variable &apos;last_slot&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="70" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first_call&apos; is assigned a value that is never used." verbose="Variable &apos;first_call&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="213" column="16"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sector" verbose="Unused variable: sector" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="41" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sigma2" verbose="Unused variable: sigma2" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="42" column="10"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: pbch_pdu" verbose="Unused variable: pbch_pdu" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="54" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sync_pos" verbose="Unused variable: sync_pos" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="55" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sync_pos_slot" verbose="Unused variable: sync_pos_slot" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="55" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rx_frame_file" verbose="Unused variable: rx_frame_file" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="56" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: result" verbose="Unused variable: result" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="57" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: freq_offset" verbose="Unused variable: freq_offset" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="58" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: subframe_offset" verbose="Unused variable: subframe_offset" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="59" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fname" verbose="Unused variable: fname" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="60" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: vname" verbose="Unused variable: vname" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="60" column="19"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: trial" verbose="Unused variable: trial" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="61" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: n_frames" verbose="Unused variable: n_frames" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="68" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: N0W" verbose="Unused variable: N0W" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/test.c" line="74" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nind&apos; is assigned a value that is never used." verbose="Variable &apos;nind&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder.c" line="59" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="1920" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="2011" column="7"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="7912" column="23" info="Unsigned positive"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="7930" column="22" info="Unsigned positive"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sigma2&apos; can be reduced." verbose="The scope of the variable &apos;sigma2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="42" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;path_loss&apos; can be reduced." verbose="The scope of the variable &apos;path_loss&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="67" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;path_loss_dB&apos; can be reduced." verbose="The scope of the variable &apos;path_loss_dB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="67" column="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nf&apos; is assigned a value that is never used." verbose="Variable &apos;nf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="65" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ip&apos; is assigned a value that is never used." verbose="Variable &apos;ip&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="66" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;path_loss_dB&apos; is assigned a value that is never used." verbose="Variable &apos;path_loss_dB&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="263" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sector" verbose="Unused variable: sector" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="41" column="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: pbch_pdu" verbose="Unused variable: pbch_pdu" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="53" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sync_pos" verbose="Unused variable: sync_pos" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="54" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sync_pos_slot" verbose="Unused variable: sync_pos_slot" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="54" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rx_frame_file" verbose="Unused variable: rx_frame_file" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="55" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: result" verbose="Unused variable: result" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="56" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: freq_offset" verbose="Unused variable: freq_offset" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="57" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: subframe_offset" verbose="Unused variable: subframe_offset" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="58" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fname" verbose="Unused variable: fname" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="59" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: vname" verbose="Unused variable: vname" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="59" column="19"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: N0W" verbose="Unused variable: N0W" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim2.c" line="67" column="10"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="1244" column="25" info="Second condition"/>
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="1222" column="25" info="First condition"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="4685" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="1768" column="22" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="5246" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="1768" column="22" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="5290" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="1768" column="22" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="5382" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="1768" column="22" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="6180" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="1768" column="22" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_false_positive&apos; can be reduced." verbose="The scope of the variable &apos;n_false_positive&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/dlschsim.c" line="113" column="42"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/dlschsim.c" line="435" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/dlschsim.c" line="105" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/dlschsim.c" line="659" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/dlschsim.c" line="105" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errors_bit&apos; is assigned a value that is never used." verbose="Variable &apos;errors_bit&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/dlschsim.c" line="476" column="26"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;blerr&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;blerr&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="1403" column="15" info="blerr is overwritten"/>
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="1401" column="14" info="blerr is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time_meas_fname&apos; can be reduced." verbose="The scope of the variable &apos;time_meas_fname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="349" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;csv_fname&apos; can be reduced." verbose="The scope of the variable &apos;csv_fname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="355" column="8"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UE2eNB&apos; shadows outer variable" verbose="Local variable &apos;UE2eNB&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="360" column="19" info="Shadow variable"/>
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="70" column="17" info="Shadowed declaration"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_re0&apos; is not assigned a value." verbose="Variable &apos;s_re0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="323" column="10"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;s_im0&apos; is not assigned a value." verbose="Variable &apos;s_im0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="323" column="23"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_re0&apos; is not assigned a value." verbose="Variable &apos;r_re0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="323" column="36"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_im0&apos; is not assigned a value." verbose="Variable &apos;r_im0&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="323" column="49"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_re3&apos; is not assigned a value." verbose="Variable &apos;r_re3&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="326" column="10"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;r_im3&apos; is not assigned a value." verbose="Variable &apos;r_im3&apos; is not assigned a value." cwe="665">
            <location file="openair1/SIMULATION/LTE_PHY/ulsim.c" line="326" column="23"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7129" column="23" info="Unsigned positive"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;sizeidx&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7145" column="22" info="Unsigned positive"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="3949" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="1143" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="4502" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="1143" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="4543" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="1143" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="4629" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="1143" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tw128&apos; shadows outer variable" verbose="Local variable &apos;tw128&apos; shadows outer variable" cwe="398">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="5382" column="15" info="Shadow variable"/>
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="1143" column="9" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;start_symbol&apos; can be reduced." verbose="The scope of the variable &apos;start_symbol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="180" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_errors_payload&apos; can be reduced." verbose="The scope of the variable &apos;n_errors_payload&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="197" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame&apos; can be reduced." verbose="The scope of the variable &apos;frame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="226" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IFO&apos; can be reduced." verbose="The scope of the variable &apos;IFO&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="549" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ret&apos; shadows outer variable" verbose="Local variable &apos;ret&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="779" column="27" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="232" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="799" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="180" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="841" column="20" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="180" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="873" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/pbchsim.c" line="180" column="7" info="Shadowed declaration"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;frame_parms&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;frame_parms&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/prachsim.c" line="418" column="16" info="frame_parms is overwritten"/>
            <location file="openair1/SIMULATION/NR_PHY/prachsim.c" line="415" column="16" info="frame_parms is assigned"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/prachsim.c" line="773" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/prachsim.c" line="128" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/prachsim.c" line="827" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/prachsim.c" line="128" column="7" info="Shadowed declaration"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/dlsim.c" line="1058" column="22" info="Second condition"/>
            <location file="openair1/SIMULATION/NR_PHY/dlsim.c" line="1053" column="21" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;effRate&apos; can be reduced." verbose="The scope of the variable &apos;effRate&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/dlsim.c" line="255" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_false_positive&apos; can be reduced." verbose="The scope of the variable &apos;n_false_positive&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/dlsim.c" line="271" column="28"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 4) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 4) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="139" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 5) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 5) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="139" column="3"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;ret&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;ret&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="615" column="13" info="ret is overwritten"/>
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="611" column="31" info="ret is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IFO&apos; can be reduced." verbose="The scope of the variable &apos;IFO&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="483" column="7"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;slss_id&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;slss_id&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="384" column="29" info="Unsigned positive"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/dlsim.c" line="849" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/dlsim.c" line="252" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;proc&apos; shadows outer variable" verbose="Local variable &apos;proc&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="612" column="27" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/psbchsim.c" line="537" column="21" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errors_bit&apos; is assigned a value that is never used." verbose="Variable &apos;errors_bit&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/dlsim.c" line="871" column="27"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;ptrdiff_t {aka signed int}&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;ptrdiff_t {aka signed int}&apos;." cwe="686">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_demodulation.c" line="3895" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_false_positive&apos; can be reduced." verbose="The scope of the variable &apos;n_false_positive&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulschsim.c" line="131" column="42"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulschsim.c" line="629" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/ulschsim.c" line="125" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errors_bit_uncoded&apos; is assigned a value that is never used." verbose="Variable &apos;errors_bit_uncoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/ulschsim.c" line="494" column="35"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;actual_payload&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;actual_payload&apos; might be accessed at non-zero index." cwe="758">
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="727" column="84"/>
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="727" column="68" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ack_nack_errors&apos; can be reduced." verbose="The scope of the variable &apos;ack_nack_errors&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="114" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sr_errors&apos; can be reduced." verbose="The scope of the variable &apos;sr_errors&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="114" column="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift&apos; can be reduced." verbose="The scope of the variable &apos;shift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="477" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="726" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="101" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="750" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/pucchsim.c" line="101" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/frame_config_test.c" line="291" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/frame_config_test.c" line="282" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="134" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="132" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/frame_config_test.c" line="292" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/frame_config_test.c" line="282" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tti&apos; is assigned a value that is never used." verbose="Variable &apos;tti&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/frame_config_test.c" line="58" column="11"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/frame_config_test.c" line="291" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/frame_config_test.c" line="292" column="18"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="135" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="132" column="26" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="143" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="132" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="144" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="132" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="134" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="135" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="143" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/harq_test.c" line="144" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;random&apos; can be reduced." verbose="The scope of the variable &apos;random&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="186" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nid1&apos; can be reduced." verbose="The scope of the variable &apos;Nid1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="385" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nid2&apos; can be reduced." verbose="The scope of the variable &apos;Nid2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="385" column="13"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;test&apos; shadows outer argument" verbose="Local variable &apos;test&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="298" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="296" column="105" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="376" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="374" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="377" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="374" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nfapi_config.sch_config.physical_cell_id.value&apos; is assigned a value that is never used." verbose="Variable &apos;nfapi_config.sch_config.physical_cell_id.value&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="182" column="50"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: data_sss" verbose="Unused variable: data_sss" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="180" column="11"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: test" verbose="Unused variable: test" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="298" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;decoded_pbch&apos; is assigned a value that is never used." verbose="Variable &apos;decoded_pbch&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="384" column="20"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="376" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pbch_test.c" line="377" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;test_margin&apos; can be reduced." verbose="The scope of the variable &apos;test_margin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_test.c" line="133" column="9"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_test.c" line="181" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_test.c" line="179" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_test.c" line="182" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_test.c" line="179" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_test.c" line="181" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_test.c" line="182" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m_CS&apos; can be reduced." verbose="The scope of the variable &apos;m_CS&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="53" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sample_re&apos; can be reduced." verbose="The scope of the variable &apos;sample_re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_util_test.c" line="88" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time_domain_occ&apos; can be reduced." verbose="The scope of the variable &apos;time_domain_occ&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="56" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;occ_length&apos; can be reduced." verbose="The scope of the variable &apos;occ_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="57" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;occ_Index&apos; can be reduced." verbose="The scope of the variable &apos;occ_Index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="58" column="7"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="148" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="140" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="149" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="140" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="148" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_generator_test.c" line="149" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sample_im&apos; can be reduced." verbose="The scope of the variable &apos;sample_im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_util_test.c" line="88" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data_p&apos; can be reduced." verbose="The scope of the variable &apos;data_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_util_test.c" line="306" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;samples_for_frame&apos; is assigned a value that is never used." verbose="Variable &apos;samples_for_frame&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_util_test.c" line="502" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pss_sequence&apos; is assigned a value that is never used." verbose="Variable &apos;pss_sequence&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_util_test.c" line="510" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pss_sequence&apos; is assigned a value that is never used." verbose="Variable &apos;pss_sequence&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_util_test.c" line="114" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;printf&apos; is assigned a value that is never used." verbose="Variable &apos;printf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pss_util_test.c" line="132" column="9"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;Msc_RS_index_nr&apos; is used before limits check." verbose="Defensive programming: The variable &apos;Msc_RS_index_nr&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="73" column="31"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_SRS_Resource-&gt;sequenceId&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_SRS_Resource-&gt;sequenceId&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="290" column="32" info="p_SRS_Resource-&gt;sequenceId is overwritten"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="283" column="32" info="p_SRS_Resource-&gt;sequenceId is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_resource-&gt;format_parameters.timeDomainOCC&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_resource-&gt;format_parameters.timeDomainOCC&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="459" column="60" info="p_resource-&gt;format_parameters.timeDomainOCC is overwritten"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="457" column="60" info="p_resource-&gt;format_parameters.timeDomainOCC is assigned"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;harq_status&apos; shadows outer variable" verbose="Local variable &apos;harq_status&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="587" column="26" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="560" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;number_differencies&apos; shadows outer variable" verbose="Local variable &apos;number_differencies&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="70" column="13" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="60" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="446" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="437" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="447" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="437" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="446" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/srs_test.c" line="447" column="18"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;harq_status&apos; shadows outer variable" verbose="Local variable &apos;harq_status&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="621" column="26" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="560" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;harq_status&apos; shadows outer variable" verbose="Local variable &apos;harq_status&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="685" column="28" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="665" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;harq_status&apos; shadows outer variable" verbose="Local variable &apos;harq_status&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="728" column="28" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="665" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;harq_status&apos; shadows outer variable" verbose="Local variable &apos;harq_status&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="762" column="28" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="665" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;module_idP&apos; shadows outer argument" verbose="Local variable &apos;module_idP&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="849" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="847" column="36" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;CC_id&apos; shadows outer argument" verbose="Local variable &apos;CC_id&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="850" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="847" column="51" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;frameP&apos; shadows outer argument" verbose="Local variable &apos;frameP&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="851" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="847" column="65" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;eNB_id&apos; shadows outer argument" verbose="Local variable &apos;eNB_id&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="852" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="847" column="80" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;subframe&apos; shadows outer argument" verbose="Local variable &apos;subframe&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="853" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="847" column="114" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;rnti&apos; shadows outer argument" verbose="Local variable &apos;rnti&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="854" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="847" column="96" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="1242" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="1233" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="1243" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="1233" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: module_idP" verbose="Unused variable: module_idP" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="849" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: CC_id" verbose="Unused variable: CC_id" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="850" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: frameP" verbose="Unused variable: frameP" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="851" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: eNB_id" verbose="Unused variable: eNB_id" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="852" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: subframe" verbose="Unused variable: subframe" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="853" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rnti" verbose="Unused variable: rnti" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="854" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="1242" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/pucch_uci_test.c" line="1243" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tw512_128p&apos; is assigned a value that is never used." verbose="Variable &apos;tw512_128p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="1552" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nid1&apos; can be reduced." verbose="The scope of the variable &apos;Nid1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="187" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Nid2&apos; can be reduced." verbose="The scope of the variable &apos;Nid2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="187" column="13"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;test&apos; shadows outer argument" verbose="Local variable &apos;test&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="88" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="85" column="123" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argc&apos; shadows outer argument" verbose="Local variable &apos;argc&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="178" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="176" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="179" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="176" column="26" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: test" verbose="Unused variable: test" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="88" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argc" verbose="Unused variable: argc" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="178" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: argv" verbose="Unused variable: argv" cwe="563">
            <location file="openair1/SIMULATION/NR_UE_PHY/unit_tests/src/sss_test.c" line="179" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="78" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="78" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Re&apos; can be reduced." verbose="The scope of the variable &apos;Re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="79" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Im&apos; can be reduced." verbose="The scope of the variable &apos;Im&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="79" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mag_sig&apos; can be reduced." verbose="The scope of the variable &apos;mag_sig&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="80" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sig_time&apos; can be reduced." verbose="The scope of the variable &apos;sig_time&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="81" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ind&apos; can be reduced." verbose="The scope of the variable &apos;ind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="86" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg&apos; can be reduced." verbose="The scope of the variable &apos;avg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="87" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cum_avg&apos; can be reduced." verbose="The scope of the variable &apos;cum_avg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="87" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;title&apos; can be reduced." verbose="The scope of the variable &apos;title&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="361" column="8"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;max(coded_bits_per_codeword,1920)*sizeof(float)&apos; to function malloc is always 7680" verbose="Argument &apos;max(coded_bits_per_codeword,1920)*sizeof(float)&apos; to function malloc is always 7680" cwe="570">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="90" column="49" info="Argument &apos;max(coded_bits_per_codeword,1920)*sizeof(float)&apos; to function malloc is always 7680"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;max(coded_bits_per_codeword,1920)*sizeof(float)&apos; to function malloc is always 7680" verbose="Argument &apos;max(coded_bits_per_codeword,1920)*sizeof(float)&apos; to function malloc is always 7680" cwe="570">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="91" column="54" info="Argument &apos;max(coded_bits_per_codeword,1920)*sizeof(float)&apos; to function malloc is always 7680"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x_n2&apos; can be reduced." verbose="The scope of the variable &apos;x_n2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/RF/rf.c" line="67" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y_n1&apos; can be reduced." verbose="The scope of the variable &apos;y_n1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/RF/rf.c" line="67" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y_n2&apos; can be reduced." verbose="The scope of the variable &apos;y_n2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/RF/rf.c" line="67" column="45"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x_n2&apos; is assigned a value that is never used." verbose="Variable &apos;x_n2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="67" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y_n1&apos; is assigned a value that is never used." verbose="Variable &apos;y_n1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="67" column="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y_n2&apos; is assigned a value that is never used." verbose="Variable &apos;y_n2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="67" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;freq&apos; can be reduced." verbose="The scope of the variable &apos;freq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/abstraction.c" line="57" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clut&apos; can be reduced." verbose="The scope of the variable &apos;clut&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/abstraction.c" line="94" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slut&apos; can be reduced." verbose="The scope of the variable &apos;slut&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/abstraction.c" line="94" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;S&apos; can be reduced." verbose="The scope of the variable &apos;S&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/abstraction.c" line="153" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;S&apos; can be reduced." verbose="The scope of the variable &apos;S&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/abstraction.c" line="206" column="10"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_antennas*sizeof(uint32_t*)&apos; to function malloc is always 8" verbose="Argument &apos;nb_antennas*sizeof(uint32_t*)&apos; to function malloc is always 8" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="240" column="40" info="Argument &apos;nb_antennas*sizeof(uint32_t*)&apos; to function malloc is always 8"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="231" column="21" info="Assignment &apos;nb_antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_antennas*sizeof(uint32_t*)&apos; to function malloc is always 8" verbose="Argument &apos;nb_antennas*sizeof(uint32_t*)&apos; to function malloc is always 8" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="241" column="41" info="Argument &apos;nb_antennas*sizeof(uint32_t*)&apos; to function malloc is always 8"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="231" column="21" info="Assignment &apos;nb_antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" verbose="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="243" column="37" info="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="231" column="21" info="Assignment &apos;nb_antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" verbose="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="244" column="37" info="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="231" column="21" info="Assignment &apos;nb_antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" verbose="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="245" column="37" info="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="231" column="21" info="Assignment &apos;nb_antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" verbose="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="246" column="37" info="Argument &apos;nb_antennas*sizeof(double*)&apos; to function malloc is always 8"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="231" column="21" info="Assignment &apos;nb_antennas=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" verbose="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="263" column="39" info="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="232" column="21" info="Assignment &apos;length=100000&apos;, assigned value is 100000"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" verbose="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="264" column="39" info="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="232" column="21" info="Assignment &apos;length=100000&apos;, assigned value is 100000"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" verbose="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="265" column="39" info="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="232" column="21" info="Assignment &apos;length=100000&apos;, assigned value is 100000"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" verbose="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="266" column="39" info="Argument &apos;length*sizeof(double)&apos; to function malloc is always 800000"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="232" column="21" info="Assignment &apos;length=100000&apos;, assigned value is 100000"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;length*sizeof(uint32_t)&apos; to function malloc is always 400000" verbose="Argument &apos;length*sizeof(uint32_t)&apos; to function malloc is always 400000" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="267" column="41" info="Argument &apos;length*sizeof(uint32_t)&apos; to function malloc is always 400000"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="232" column="21" info="Assignment &apos;length=100000&apos;, assigned value is 100000"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;length*sizeof(uint32_t)&apos; to function malloc is always 400000" verbose="Argument &apos;length*sizeof(uint32_t)&apos; to function malloc is always 400000" cwe="570">
            <location file="openair1/SIMULATION/RF/rf.c" line="268" column="42" info="Argument &apos;length*sizeof(uint32_t)&apos; to function malloc is always 400000"/>
            <location file="openair1/SIMULATION/RF/rf.c" line="232" column="21" info="Assignment &apos;length=100000&apos;, assigned value is 100000"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;input_amp&apos; is assigned a value that is never used." verbose="Variable &apos;input_amp&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="234" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nf&apos; is assigned a value that is never used." verbose="Variable &apos;nf&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="235" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ip&apos; is assigned a value that is never used." verbose="Variable &apos;ip&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="236" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx_pwr&apos; is assigned a value that is never used." verbose="Variable &apos;tx_pwr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="278" column="10"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: n" verbose="Unused variable: n" cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="233" column="11"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rx_pwr" verbose="Unused variable: rx_pwr" cwe="563">
            <location file="openair1/SIMULATION/RF/rf.c" line="238" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;avg&apos; is assigned a value that is never used." verbose="Variable &apos;avg&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/syncsim.c" line="114" column="9"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;file_name[22]&apos; accessed at index 23, which is out of bounds." verbose="Array &apos;file_name[22]&apos; accessed at index 23, which is out of bounds." cwe="788">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="102" column="25" info="Array index out of bounds"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;min_path_loss&apos; can be reduced." verbose="The scope of the variable &apos;min_path_loss&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="47" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fp&apos; can be reduced." verbose="The scope of the variable &apos;fp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="65" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;min_path_loss&apos; is assigned a value that is never used." verbose="Variable &apos;min_path_loss&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="47" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tabl_len&apos; is assigned a value that is never used." verbose="Variable &apos;tabl_len&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="98" column="15"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tlu_sinr" verbose="Unused variable: tlu_sinr" cwe="563">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="68" column="10"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tlu_bler" verbose="Unused variable: tlu_bler" cwe="563">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="69" column="10"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: line_num" verbose="Unused variable: line_num" cwe="563">
            <location file="openair1/SIMULATION/TOOLS/ch_desc_proto.c" line="70" column="7"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;tx_pwr&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;tx_pwr&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="173" column="12" info="tx_pwr is overwritten"/>
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="117" column="14" info="tx_pwr is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;tx_pwr&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;tx_pwr&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="147" column="14" info="tx_pwr is overwritten"/>
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="133" column="14" info="tx_pwr is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;tx_pwr&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;tx_pwr&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="173" column="12" info="tx_pwr is overwritten"/>
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="147" column="14" info="tx_pwr is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/gauss.c" line="46" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;txdata&apos; can be reduced." verbose="The scope of the variable &apos;txdata&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="55" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tx_pwr&apos; can be reduced." verbose="The scope of the variable &apos;tx_pwr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="57" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sf_offset&apos; can be reduced." verbose="The scope of the variable &apos;sf_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="61" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpm1&apos; can be reduced." verbose="The scope of the variable &apos;tmpm1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/gauss.c" line="46" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpp1&apos; can be reduced." verbose="The scope of the variable &apos;tmpp1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/gauss.c" line="46" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gvar&apos; can be reduced." verbose="The scope of the variable &apos;gvar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/gauss.c" line="93" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_pwr&apos; can be reduced." verbose="The scope of the variable &apos;rx_pwr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/channel_sim.c" line="58" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rand&apos; can be reduced." verbose="The scope of the variable &apos;rand&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/taus.c" line="74" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fac&apos; can be reduced." verbose="The scope of the variable &apos;fac&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/rangen_double.c" line="106" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/rangen_double.c" line="106" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v1&apos; can be reduced." verbose="The scope of the variable &apos;v1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/rangen_double.c" line="106" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v2&apos; can be reduced." verbose="The scope of the variable &apos;v2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/rangen_double.c" line="106" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/rangen_double.c" line="140" column="17"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;fn&apos; shadows outer variable" verbose="Local variable &apos;fn&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/TOOLS/rangen_double.c" line="35" column="15" info="Shadow variable"/>
            <location file="openair1/SIMULATION/TOOLS/rangen_double.c" line="131" column="24" info="Shadowed declaration"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;collectionOpt==LinuxTimerBased&apos; is always false" verbose="Condition &apos;collectionOpt==LinuxTimerBased&apos; is always false" cwe="570">
            <location file="openair2/COLLECTOR/collector.c" line="278" column="23" info="Condition &apos;collectionOpt==LinuxTimerBased&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;copyStatsOption==1&apos; is always false" verbose="Condition &apos;copyStatsOption==1&apos; is always false" cwe="570">
            <location file="openair2/COLLECTOR/collector.c" line="282" column="25" info="Condition &apos;copyStatsOption==1&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;collectionOpt == SubframeBased&apos; is always true because &apos;collectionOpt&apos; and &apos;SubframeBased&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/COLLECTOR/collector.c" line="314" column="35"/>
            <location file="openair2/COLLECTOR/collector.c" line="34" column="45" info="&apos;collectionOpt&apos; is assigned value &apos;SubframeBased&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/COLLECTOR/collector.c" line="263" column="17"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;CC_id&apos; shadows outer variable" verbose="Local variable &apos;CC_id&apos; shadows outer variable" cwe="398">
            <location file="openair2/COLLECTOR/collector.c" line="312" column="27" info="Shadow variable"/>
            <location file="openair2/COLLECTOR/collector.c" line="30" column="11" info="Shadowed declaration"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on &apos;db&apos; - it&apos;s already a pointer." verbose="Redundant pointer operation on &apos;db&apos; - it&apos;s already a pointer." cwe="398">
            <location file="openair2/COLLECTOR/collector_db_manager.c" line="227" column="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_socket&apos; can be reduced." verbose="The scope of the variable &apos;new_socket&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/COLLECTOR/collector_rest_manager.c" line="14" column="20"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_gtp.c" line="90" column="12"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_gtp.c" line="96" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gnb_port_for_NGU&apos; can be reduced." verbose="The scope of the variable &apos;gnb_port_for_NGU&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/E1AP/e1ap_setup.c" line="36" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gnb_port_for_S1U&apos; can be reduced." verbose="The scope of the variable &apos;gnb_port_for_S1U&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/E1AP/e1ap_setup.c" line="38" column="12"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_mac.c" line="120" column="12"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_mac.c" line="126" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_false_positive&apos; can be reduced." verbose="The scope of the variable &apos;n_false_positive&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="158" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;roundStats&apos; can be reduced." verbose="The scope of the variable &apos;roundStats&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="185" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;effRate&apos; can be reduced." verbose="The scope of the variable &apos;effRate&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="186" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;effTP&apos; can be reduced." verbose="The scope of the variable &apos;effTP&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="187" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;read_errors&apos; can be reduced." verbose="The scope of the variable &apos;read_errors&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="864" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UE2gNB&apos; shadows outer variable" verbose="Local variable &apos;UE2gNB&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="161" column="19" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="139" column="17" info="Shadowed declaration"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_pdcp.c" line="148" column="12"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_pdcp.c" line="155" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_ues&apos; is assigned a value that is never used." verbose="Variable &apos;num_ues&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_pdcp.c" line="90" column="18"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ue_id_list" verbose="Unused variable: ue_id_list" cwe="563">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_pdcp.c" line="91" column="12"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_rlc.c" line="171" column="12"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_rlc.c" line="177" column="11"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_tc.c" line="42" column="12"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_slice.c" line="43" column="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="664" column="12" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="148" column="7" info="Shadowed declaration"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/CUSTOMIZED/ran_func_slice.c" line="61" column="13"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="904" column="16" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="148" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="1158" column="18" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="148" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="1485" column="20" info="Shadow variable"/>
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="148" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;N_RB_DL&apos; is assigned a value that is never used." verbose="Variable &apos;N_RB_DL&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="659" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errors_decoding&apos; is assigned a value that is never used." verbose="Variable &apos;errors_decoding&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="737" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;crc_status&apos; is assigned a value that is never used." verbose="Variable &apos;crc_status&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/NR_PHY/ulsim.c" line="748" column="22"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: arr_ue_id.ue_id" verbose="Memory leak: arr_ue_id.ue_id" cwe="401">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_kpm.c" line="299" column="3"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: arr_ue_id.ue_info_list" verbose="Memory leak: arr_ue_id.ue_info_list" cwe="401">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_kpm.c" line="299" column="3"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_kpm.c" line="288" column="18"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_kpm.c" line="471" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;node_type&apos; is assigned a value that is never used." verbose="Variable &apos;node_type&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_kpm.c" line="281" column="32"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_kpm.c" line="283" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_rc_subs.c" line="103" column="7"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/O-RAN/ran_func_rc.c" line="651" column="11"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/read_setup_ran.c" line="186" column="18"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/E2AP/RAN_FUNCTION/read_setup_ran.c" line="182" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_app.c" line="91" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_app.c" line="149" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_app.c" line="176" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_app.c" line="207" column="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm7.c" line="1913" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/E1AP/e1ap.c" line="1935" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/E1AP/e1ap.c" line="2013" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;round&apos; is assigned a value that is never used." verbose="Variable &apos;round&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm7.c" line="1969" column="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/E1AP/e1ap.c" line="942" column="18" info="Shadow variable"/>
            <location file="openair2/E1AP/e1ap.c" line="880" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/E1AP/e1ap.c" line="1089" column="18" info="Shadow variable"/>
            <location file="openair2/E1AP/e1ap.c" line="1057" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;pdu&apos; shadows outer argument" verbose="Local variable &apos;pdu&apos; shadows outer argument" cwe="398">
            <location file="openair2/E1AP/e1ap.c" line="1294" column="32" info="Shadow variable"/>
            <location file="openair2/E1AP/e1ap.c" line="1252" column="110" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/E1AP/e1ap.c" line="1364" column="18" info="Shadow variable"/>
            <location file="openair2/E1AP/e1ap.c" line="1333" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/E1AP/e1ap.c" line="1476" column="18" info="Shadow variable"/>
            <location file="openair2/E1AP/e1ap.c" line="1442" column="12" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: pbch_pdu" verbose="Unused variable: pbch_pdu" cwe="563">
            <location file="openair1/SIMULATION/LTE_PHY/dlsim_tm7.c" line="135" column="17"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;endc == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/F1AP/f1ap_cu_rrc_message_transfer.c" line="192" column="13"/>
            <location file="openair2/F1AP/f1ap_cu_rrc_message_transfer.c" line="186" column="14" info="&apos;endc&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;buf!=NULL&apos; is redundant or there is possible null pointer dereference: buf." verbose="Either the condition &apos;buf!=NULL&apos; is redundant or there is possible null pointer dereference: buf." cwe="476">
            <location file="openair2/F1AP/f1ap_cu_interface_management.c" line="74" column="10" info="Null pointer dereference"/>
            <location file="openair2/F1AP/f1ap_cu_interface_management.c" line="72" column="24" info="Assignment &apos;buf=calloc(os-&gt;size,sizeof(*buf))&apos;, assigned value is 0"/>
            <location file="openair2/F1AP/f1ap_cu_interface_management.c" line="73" column="19" info="Assuming that condition &apos;buf!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/F1AP/f1ap_cu_task.c" line="118" column="15"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/F1AP/f1ap_cu_interface_management.c" line="261" column="16" info="Shadow variable"/>
            <location file="openair2/F1AP/f1ap_cu_interface_management.c" line="113" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/F1AP/f1ap_cu_interface_management.c" line="479" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmsi&apos; can be reduced." verbose="The scope of the variable &apos;tmsi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/F1AP/f1ap_du_paging.c" line="42" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;executeDuplication&apos; can be reduced." verbose="The scope of the variable &apos;executeDuplication&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/F1AP/f1ap_du_rrc_message_transfer.c" line="61" column="19"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/F1AP/f1ap_du_interface_management.c" line="383" column="22" info="Shadow variable"/>
            <location file="openair2/F1AP/f1ap_du_interface_management.c" line="346" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/F1AP/f1ap_du_interface_management.c" line="397" column="18" info="Shadow variable"/>
            <location file="openair2/F1AP/f1ap_du_interface_management.c" line="346" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/F1AP/f1ap_du_interface_management.c" line="699" column="18" info="Shadow variable"/>
            <location file="openair2/F1AP/f1ap_du_interface_management.c" line="677" column="12" info="Shadowed declaration"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;some_decide_qos&apos; is always false" verbose="Condition &apos;some_decide_qos&apos; is always false" cwe="570">
            <location file="openair2/F1AP/f1ap_cu_ue_context_management.c" line="413" column="11" info="Condition &apos;some_decide_qos&apos; is always false"/>
            <location file="openair2/F1AP/f1ap_cu_ue_context_management.c" line="411" column="29" info="Assignment &apos;some_decide_qos=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;endc&apos; is always true" verbose="Condition &apos;endc&apos; is always true" cwe="571">
            <location file="openair2/F1AP/f1ap_cu_ue_context_management.c" line="529" column="9" info="Condition &apos;endc&apos; is always true"/>
            <location file="openair2/F1AP/f1ap_cu_ue_context_management.c" line="527" column="16" info="Assignment &apos;endc=1&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_app.c" line="102" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_app.c" line="126" column="35"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;channeldesc_p!=NULL&apos; is redundant or there is possible null pointer dereference: channeldesc_p." verbose="Either the condition &apos;channeldesc_p!=NULL&apos; is redundant or there is possible null pointer dereference: channeldesc_p." cwe="476">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="2327" column="5" info="Null pointer dereference"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="2313" column="57" info="Assignment &apos;channeldesc_p=new_channel_desc_scm(nb_tx,nb_rx,modid,sampling_rate,0,channel_bandwidth,*(channel_list.paramarray[i][pindex_DT].dblptr),0.0,CORR_LEVEL_LOW,*(channel_list.paramarray[i][pindex_FF].dblptr),*(channel_list.paramarray[i][pindex_CO].iptr),*(channel_list.paramarray[i][pindex_PL].dblptr),*(channel_list.paramarray[i][pindex_NP].dblptr))&apos;, assigned value is 0"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="2326" column="32" info="Assuming that condition &apos;channeldesc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;delta_tau&apos; can be reduced." verbose="The scope of the variable &apos;delta_tau&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="99" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1739" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1740" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1740" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmdbuf&apos; can be reduced." verbose="The scope of the variable &apos;cmdbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="2039" column="10"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 144" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 144" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="697" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 144"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="693" column="33" info="chan_desc-&gt;nb_taps is assigned value 18"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="794" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="790" column="33" info="chan_desc-&gt;nb_taps is assigned value 7"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="850" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="846" column="33" info="chan_desc-&gt;nb_taps is assigned value 7"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="905" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="901" column="33" info="chan_desc-&gt;nb_taps is assigned value 7"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="960" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 56"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="956" column="33" info="chan_desc-&gt;nb_taps is assigned value 7"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 72" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 72" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1015" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 72"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1011" column="33" info="chan_desc-&gt;nb_taps is assigned value 9"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 72" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 72" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1071" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 72"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1067" column="33" info="chan_desc-&gt;nb_taps is assigned value 9"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 144" verbose="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 144" cwe="570">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1127" column="71" info="Argument &apos;chan_desc-&gt;nb_taps*sizeof(double)&apos; to function malloc is always 144"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1123" column="33" info="chan_desc-&gt;nb_taps is assigned value 18"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/MAC/config_ue.c" line="546" column="13" info="Shadow variable"/>
            <location file="openair2/LAYER2/MAC/config_ue.c" line="118" column="7" info="Shadowed declaration"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;&amp;&amp;&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler.c" line="377" column="109"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UE_id&apos; is assigned a value that is never used." verbose="Variable &apos;UE_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler.c" line="73" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TSFC&apos; is assigned a value that is never used." verbose="Variable &apos;TSFC&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler.c" line="74" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;srs_SubframeConfig&apos; is assigned a value that is never used." verbose="Variable &apos;srs_SubframeConfig&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler.c" line="75" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;deltaTSFC&apos; is assigned a value that is never used." verbose="Variable &apos;deltaTSFC&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler.c" line="78" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UE_id&apos; is assigned a value that is never used." verbose="Variable &apos;UE_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler.c" line="184" column="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rnti&apos; is assigned a value that is never used." verbose="Variable &apos;rnti&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler.c" line="544" column="27"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." verbose="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="620" column="18" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="614" column="34" info="Assignment &apos;prach_ParametersListCE_r13=&amp;ext4_prach-&gt;prach_ParametersListCE_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="617" column="45" info="Assuming that condition &apos;prach_ParametersListCE_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pucch_N1PUCCH_AN_InfoList_r13!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_N1PUCCH_AN_InfoList_r13." verbose="Either the condition &apos;pucch_N1PUCCH_AN_InfoList_r13!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_N1PUCCH_AN_InfoList_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="620" column="60" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="616" column="47" info="Assignment &apos;pucch_N1PUCCH_AN_InfoList_r13=ext4_pucch-&gt;n1PUCCH_AN_InfoList_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="618" column="48" info="Assuming that condition &apos;pucch_N1PUCCH_AN_InfoList_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." verbose="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="622" column="13" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="614" column="34" info="Assignment &apos;prach_ParametersListCE_r13=&amp;ext4_prach-&gt;prach_ParametersListCE_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="617" column="45" info="Assuming that condition &apos;prach_ParametersListCE_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="99" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi_dci0_pdu&apos; can be reduced." verbose="The scope of the variable &apos;hi_dci0_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="105" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sf_ahead_dl&apos; can be reduced." verbose="The scope of the variable &apos;sf_ahead_dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="106" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pusch_maxNumRepetitionCEmodeA_r13&apos; can be reduced." verbose="The scope of the variable &apos;pusch_maxNumRepetitionCEmodeA_r13&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="108" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rmax&apos; can be reduced." verbose="The scope of the variable &apos;rmax&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="248" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rep&apos; can be reduced." verbose="The scope of the variable &apos;rep&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="249" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reps&apos; can be reduced." verbose="The scope of the variable &apos;reps&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="250" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_nb&apos; can be reduced." verbose="The scope of the variable &apos;num_nb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="251" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rmax&apos; can be reduced." verbose="The scope of the variable &apos;rmax&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="600" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rep&apos; can be reduced." verbose="The scope of the variable &apos;rep&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="601" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reps&apos; can be reduced." verbose="The scope of the variable &apos;reps&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="602" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_rb&apos; can be reduced." verbose="The scope of the variable &apos;first_rb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_RA.c" line="1114" column="7"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;rrc_mac_config_req_ue&apos; argument order different: declaration &apos;module_idP, CC_id, eNB_index, radioResourceConfigCommon, physicalConfigDedicated, sCellToAddMod_r10, measObj, mac_MainConfig, logicalChannelIdentity, logicalChannelConfig, measGapConfig, tdd_Config, mobilityControlInfo, SIwindowsize, SIperiod, ul_CarrierFreq, ul_Bandwidth, additionalSpectrumEmission, mbsfn_SubframeConfigList, MBMS_Flag, mbsfn_AreaInfoList, pmch_InfoList, num_active_cba_groups, cba_rnti, config_action, sourceL2Id, destinationL2Id, FeMBMS_Flag&apos; definition &apos;Mod_idP, CC_idP, eNB_index, radioResourceConfigCommon, physicalConfigDedicated, sCellToAddMod_r10, measObj, mac_MainConfig, logicalChannelIdentity, logicalChannelConfig, measGapConfig, tdd_Config, mobilityControlInfo, SIwindowsize, SIperiod, ul_CarrierFreq, ul_Bandwidth, additionalSpectrumEmission, mbsfn_SubframeConfigList, MBMS_Flag, mbsfn_AreaInfoList, pmch_InfoList, config_action, sourceL2Id, destinationL2Id, FeMBMS_Flag, nonMBSFN_SubframeConfig, mbsfn_AreaInfoList_fembms&apos;" verbose="Function &apos;rrc_mac_config_req_ue&apos; argument order different: declaration &apos;module_idP, CC_id, eNB_index, radioResourceConfigCommon, physicalConfigDedicated, sCellToAddMod_r10, measObj, mac_MainConfig, logicalChannelIdentity, logicalChannelConfig, measGapConfig, tdd_Config, mobilityControlInfo, SIwindowsize, SIperiod, ul_CarrierFreq, ul_Bandwidth, additionalSpectrumEmission, mbsfn_SubframeConfigList, MBMS_Flag, mbsfn_AreaInfoList, pmch_InfoList, num_active_cba_groups, cba_rnti, config_action, sourceL2Id, destinationL2Id, FeMBMS_Flag&apos; definition &apos;Mod_idP, CC_idP, eNB_index, radioResourceConfigCommon, physicalConfigDedicated, sCellToAddMod_r10, measObj, mac_MainConfig, logicalChannelIdentity, logicalChannelConfig, measGapConfig, tdd_Config, mobilityControlInfo, SIwindowsize, SIperiod, ul_CarrierFreq, ul_Bandwidth, additionalSpectrumEmission, mbsfn_SubframeConfigList, MBMS_Flag, mbsfn_AreaInfoList, pmch_InfoList, config_action, sourceL2Id, destinationL2Id, FeMBMS_Flag, nonMBSFN_SubframeConfig, mbsfn_AreaInfoList_fembms&apos;" cwe="683">
            <location file="openair2/LAYER2/MAC/config_ue.c" line="89" column="35"/>
            <location file="openair2/LAYER2/MAC/mac_proto.h" line="992" column="39"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;schedulingInfoList_BR_r13!=NULL&apos; is redundant or there is possible null pointer dereference: schedulingInfoList_BR_r13." verbose="Either the condition &apos;schedulingInfoList_BR_r13!=NULL&apos; is redundant or there is possible null pointer dereference: schedulingInfoList_BR_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="558" column="19" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="554" column="122" info="Assignment &apos;schedulingInfoList_BR_r13=cc-&gt;sib1_v13ext-&gt;bandwidthReducedAccessRelatedInfo_r13-&gt;schedulingInfoList_BR_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="555" column="44" info="Assuming that condition &apos;schedulingInfoList_BR_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;schedulingInfoList_BR_r13!=NULL&apos; is redundant or there is possible null pointer dereference: schedulingInfoList_BR_r13." verbose="Either the condition &apos;schedulingInfoList_BR_r13!=NULL&apos; is redundant or there is possible null pointer dereference: schedulingInfoList_BR_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="560" column="19" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="554" column="122" info="Assignment &apos;schedulingInfoList_BR_r13=cc-&gt;sib1_v13ext-&gt;bandwidthReducedAccessRelatedInfo_r13-&gt;schedulingInfoList_BR_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="555" column="44" info="Assuming that condition &apos;schedulingInfoList_BR_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vrb_map&apos; can be reduced." verbose="The scope of the variable &apos;vrb_map&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="307" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_RB_DL&apos; can be reduced." verbose="The scope of the variable &apos;N_RB_DL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="309" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vrb_map&apos; can be reduced." verbose="The scope of the variable &apos;vrb_map&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="533" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_RB_DL&apos; can be reduced." verbose="The scope of the variable &apos;N_RB_DL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="535" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bcch_sdu_length&apos; can be reduced." verbose="The scope of the variable &apos;bcch_sdu_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="713" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mcs&apos; can be reduced." verbose="The scope of the variable &apos;mcs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="714" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CC_id&apos; can be reduced." verbose="The scope of the variable &apos;CC_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="715" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vrb_map&apos; can be reduced." verbose="The scope of the variable &apos;vrb_map&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="718" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_rb&apos; can be reduced." verbose="The scope of the variable &apos;first_rb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="719" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_RB_DL&apos; can be reduced." verbose="The scope of the variable &apos;N_RB_DL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="720" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_config_request&apos; can be reduced." verbose="The scope of the variable &apos;dl_config_request&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="721" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_config_pdu&apos; can be reduced." verbose="The scope of the variable &apos;dl_config_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="722" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;TX_req&apos; can be reduced." verbose="The scope of the variable &apos;TX_req&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="723" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mib_sdu_length&apos; can be reduced." verbose="The scope of the variable &apos;mib_sdu_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="919" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mib_sdu_length&apos; can be reduced." verbose="The scope of the variable &apos;mib_sdu_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="978" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bcch_sdu_length&apos; can be reduced." verbose="The scope of the variable &apos;bcch_sdu_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1037" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mcs&apos; can be reduced." verbose="The scope of the variable &apos;mcs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1038" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;CC_id&apos; can be reduced." verbose="The scope of the variable &apos;CC_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1039" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vrb_map&apos; can be reduced." verbose="The scope of the variable &apos;vrb_map&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1042" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_rb&apos; can be reduced." verbose="The scope of the variable &apos;first_rb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1043" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_RB_DL&apos; can be reduced." verbose="The scope of the variable &apos;N_RB_DL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1044" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_config_request&apos; can be reduced." verbose="The scope of the variable &apos;dl_config_request&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1045" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_config_pdu&apos; can be reduced." verbose="The scope of the variable &apos;dl_config_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1046" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;TX_req&apos; can be reduced." verbose="The scope of the variable &apos;TX_req&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="1047" column="27"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="594" column="35" info="Division by zero"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="583" column="28" info="Assignment &apos;period_in_sf=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vrb_map&apos; can be reduced." verbose="The scope of the variable &apos;vrb_map&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="83" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_RB_DL&apos; can be reduced." verbose="The scope of the variable &apos;N_RB_DL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_bch.c" line="85" column="7"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;y0r_over2&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;y0r_over2&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1134" column="16" info="y0r_over2 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1132" column="28" info="y0r_over2 is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/config.c" line="658" column="7"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;y0i_over2&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;y0i_over2&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1135" column="16" info="y0i_over2 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1133" column="28" info="y0i_over2 is initialized"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1211" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1155" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;y0r_over2&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;y0r_over2&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1389" column="16" info="y0r_over2 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1387" column="28" info="y0r_over2 is initialized"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;y0i_over2&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;y0i_over2&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1390" column="16" info="y0i_over2 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1388" column="28" info="y0i_over2 is initialized"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1485" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1410" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1692" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="1624" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="2185" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="2117" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="2735" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="2667" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/MAC/config.c" line="855" column="14" info="Shadow variable"/>
            <location file="openair2/LAYER2/MAC/config.c" line="751" column="7" info="Shadowed declaration"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="3598" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="3335" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;band_info_s::nbands&apos; is never used." verbose="struct member &apos;band_info_s::nbands&apos; is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/config.c" line="72" column="7"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="5109" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="4846" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="574" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp_total_rbs_count&apos; can be reduced." verbose="The scope of the variable &apos;temp_total_rbs_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="890" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp_total_ue_count&apos; can be reduced." verbose="The scope of the variable &apos;temp_total_ue_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="891" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_RB_DL&apos; can be reduced." verbose="The scope of the variable &apos;N_RB_DL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="904" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="907" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tdd_sfa&apos; can be reduced." verbose="The scope of the variable &apos;tdd_sfa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="1118" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_config_pdu&apos; can be reduced." verbose="The scope of the variable &apos;dl_config_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="2145" column="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ue_num_temp&apos; can be reduced." verbose="The scope of the variable &apos;ue_num_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="2541" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="2554" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tdd_sfa&apos; can be reduced." verbose="The scope of the variable &apos;tdd_sfa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="2789" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ULSCH_first_end&apos; can be reduced." verbose="The scope of the variable &apos;ULSCH_first_end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="2936" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_RB_UL&apos; can be reduced." verbose="The scope of the variable &apos;N_RB_UL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="2946" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="2948" column="22"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;nb_rbs_remaining[CC_id][UE_id]&apos; is less than zero." verbose="The unsigned expression &apos;nb_rbs_remaining[CC_id][UE_id]&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="847" column="40" info="Unsigned less than zero"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." verbose="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1261" column="18" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1256" column="34" info="Assignment &apos;prach_ParametersListCE_r13=&amp;ext4_prach-&gt;prach_ParametersListCE_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1258" column="45" info="Assuming that condition &apos;prach_ParametersListCE_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pucch_N1PUCCH_AN_InfoList_r13!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_N1PUCCH_AN_InfoList_r13." verbose="Either the condition &apos;pucch_N1PUCCH_AN_InfoList_r13!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_N1PUCCH_AN_InfoList_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1261" column="60" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1257" column="47" info="Assignment &apos;pucch_N1PUCCH_AN_InfoList_r13=ext4_pucch-&gt;n1PUCCH_AN_InfoList_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1259" column="48" info="Assuming that condition &apos;pucch_N1PUCCH_AN_InfoList_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." verbose="Either the condition &apos;prach_ParametersListCE_r13!=NULL&apos; is redundant or there is possible null pointer dereference: prach_ParametersListCE_r13." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1263" column="13" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1256" column="34" info="Assignment &apos;prach_ParametersListCE_r13=&amp;ext4_prach-&gt;prach_ParametersListCE_r13&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1258" column="45" info="Assuming that condition &apos;prach_ParametersListCE_r13!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1321" column="17" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1319" column="180" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1320" column="38" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1322" column="17" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1319" column="180" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1320" column="38" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1323" column="17" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1319" column="180" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1320" column="38" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1324" column="17" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1319" column="180" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1320" column="38" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1326" column="17" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1319" column="180" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1320" column="38" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1327" column="17" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1319" column="180" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1320" column="38" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;DAI&apos; can be reduced." verbose="The scope of the variable &apos;DAI&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="277" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rnti&apos; can be reduced." verbose="The scope of the variable &apos;rnti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="1207" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vrb_map&apos; can be reduced." verbose="The scope of the variable &apos;vrb_map&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2022" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_rb_dl&apos; can be reduced." verbose="The scope of the variable &apos;n_rb_dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2023" column="7"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;xmm0&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="6637" column="10" info="xmm0 is overwritten"/>
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="6374" column="10" info="xmm0 is assigned"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." verbose="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="985" column="3" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="983" column="107" info="Assignment &apos;pcc=scc-&gt;downlinkConfigCommon-&gt;initialDownlinkBWP-&gt;pdcch_ConfigCommon-&gt;choice.setup&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="984" column="19" info="Assuming that condition &apos;pcc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." verbose="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="994" column="18" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="983" column="107" info="Assignment &apos;pcc=scc-&gt;downlinkConfigCommon-&gt;initialDownlinkBWP-&gt;pdcch_ConfigCommon-&gt;choice.setup&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="984" column="19" info="Assuming that condition &apos;pcc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." verbose="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="995" column="18" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="983" column="107" info="Assignment &apos;pcc=scc-&gt;downlinkConfigCommon-&gt;initialDownlinkBWP-&gt;pdcch_ConfigCommon-&gt;choice.setup&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="984" column="19" info="Assuming that condition &apos;pcc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." verbose="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="996" column="18" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="983" column="107" info="Assignment &apos;pcc=scc-&gt;downlinkConfigCommon-&gt;initialDownlinkBWP-&gt;pdcch_ConfigCommon-&gt;choice.setup&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="984" column="19" info="Assuming that condition &apos;pcc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." verbose="Either the condition &apos;pcc!=NULL&apos; is redundant or there is possible null pointer dereference: pcc." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="997" column="18" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="983" column="107" info="Assignment &apos;pcc=scc-&gt;downlinkConfigCommon-&gt;initialDownlinkBWP-&gt;pdcch_ConfigCommon-&gt;choice.setup&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="984" column="19" info="Assuming that condition &apos;pcc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1158" column="3" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1159" column="3" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1160" column="3" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1161" column="3" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1165" column="9" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1166" column="9" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1167" column="10" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1168" column="9" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1169" column="9" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1170" column="9" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1171" column="9" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." verbose="Either the condition &apos;req!=NULL&apos; is redundant or there is possible null pointer dereference: req." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1173" column="3" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1156" column="33" info="Assignment &apos;req=calloc(1,sizeof(*req))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1157" column="19" info="Assuming that condition &apos;req!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc_buf!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_buf." verbose="Either the condition &apos;mtc_buf!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_buf." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1191" column="10" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1189" column="28" info="Assignment &apos;mtc_buf=calloc(len,sizeof(*mtc_buf))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1190" column="23" info="Assuming that condition &apos;mtc_buf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." verbose="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1587" column="5" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1585" column="50" info="Assignment &apos;cell=calloc(1,sizeof(neighbour_cell_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1586" column="22" info="Assuming that condition &apos;cell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." verbose="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1594" column="77" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1585" column="50" info="Assignment &apos;cell=calloc(1,sizeof(neighbour_cell_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1586" column="22" info="Assuming that condition &apos;cell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." verbose="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1598" column="5" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1585" column="50" info="Assignment &apos;cell=calloc(1,sizeof(neighbour_cell_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1586" column="22" info="Assuming that condition &apos;cell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." verbose="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1599" column="17" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1585" column="50" info="Assignment &apos;cell=calloc(1,sizeof(neighbour_cell_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1586" column="22" info="Assuming that condition &apos;cell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." verbose="Either the condition &apos;cell!=NULL&apos; is redundant or there is possible null pointer dereference: cell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1600" column="18" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1585" column="50" info="Assignment &apos;cell=calloc(1,sizeof(neighbour_cell_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1586" column="22" info="Assuming that condition &apos;cell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1604" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1605" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1606" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1607" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1608" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1609" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1622" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1623" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." verbose="Either the condition &apos;neighbourCell!=NULL&apos; is redundant or there is possible null pointer dereference: neighbourCell." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1624" column="7" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1602" column="63" info="Assignment &apos;neighbourCell=calloc(1,sizeof(nr_neighbour_gnb_configuration_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1603" column="33" info="Assuming that condition &apos;neighbourCell!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." verbose="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1692" column="5" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1690" column="31" info="Assignment &apos;a3_event=(nr_a3_event_t*)calloc(1,sizeof(nr_a3_event_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1691" column="26" info="Assuming that condition &apos;a3_event!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." verbose="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1693" column="5" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1690" column="31" info="Assignment &apos;a3_event=(nr_a3_event_t*)calloc(1,sizeof(nr_a3_event_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1691" column="26" info="Assuming that condition &apos;a3_event!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." verbose="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1694" column="5" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1690" column="31" info="Assignment &apos;a3_event=(nr_a3_event_t*)calloc(1,sizeof(nr_a3_event_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1691" column="26" info="Assuming that condition &apos;a3_event!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." verbose="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1695" column="5" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1690" column="31" info="Assignment &apos;a3_event=(nr_a3_event_t*)calloc(1,sizeof(nr_a3_event_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1691" column="26" info="Assuming that condition &apos;a3_event!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." verbose="Either the condition &apos;a3_event!=NULL&apos; is redundant or there is possible null pointer dereference: a3_event." cwe="476">
            <location file="openair2/GNB_APP/gnb_config.c" line="1697" column="9" info="Null pointer dereference"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1690" column="31" info="Assignment &apos;a3_event=(nr_a3_event_t*)calloc(1,sizeof(nr_a3_event_t))&apos;, assigned value is 0"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1691" column="26" info="Assuming that condition &apos;a3_event!=NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;t_reloc_prep &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2271" column="32"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2259" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;t_reloc_prep&lt;=0&apos; and &apos;tx2_reloc_overall&lt;=0&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2271" column="61"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2260" column="39" info="&apos;tx2_reloc_overall&apos; is assigned value &apos;0&apos; here."/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2259" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;tx2_reloc_overall &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2272" column="37"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2260" column="39" info="&apos;tx2_reloc_overall&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;t_reloc_prep&lt;=0&apos; and &apos;t_dc_prep&lt;=0&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2272" column="71"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2261" column="31" info="&apos;t_dc_prep&apos; is assigned value &apos;0&apos; here."/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2259" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;t_dc_prep &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2273" column="29"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2261" column="31" info="&apos;t_dc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;t_reloc_prep&lt;=0&apos; and &apos;t_dc_overall&lt;=0&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2273" column="55"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2262" column="34" info="&apos;t_dc_overall&apos; is assigned value &apos;0&apos; here."/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2259" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;t_dc_overall &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2274" column="32"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="2262" column="34" info="&apos;t_dc_overall&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="720" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="720" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;str&apos; can be reduced." verbose="The scope of the variable &apos;str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="722" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1226" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aprefix&apos; can be reduced." verbose="The scope of the variable &apos;aprefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1708" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gnb_id&apos; can be reduced." verbose="The scope of the variable &apos;gnb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1709" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1710" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1851" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1851" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gnb_id&apos; can be reduced." verbose="The scope of the variable &apos;gnb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1852" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;J&apos; can be reduced." verbose="The scope of the variable &apos;J&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2119" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2119" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2124" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2124" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gnb_id&apos; can be reduced." verbose="The scope of the variable &apos;gnb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="2125" column="26"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &apos;.s5={NULL}},{.s5&apos; depends on order of evaluation of side effects" verbose="Expression &apos;.s5={NULL}},{.s5&apos; depends on order of evaluation of side effects" cwe="768">
            <location file="openair2/GNB_APP/gnb_config.c" line="1259" column="48"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;aprefix&apos; shadows outer variable" verbose="Local variable &apos;aprefix&apos; shadows outer variable" cwe="398">
            <location file="openair2/GNB_APP/gnb_config.c" line="1754" column="12" info="Shadow variable"/>
            <location file="openair2/GNB_APP/gnb_config.c" line="1708" column="8" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_mod&apos; can be reduced." verbose="The scope of the variable &apos;symbol_mod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="211" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sic_data&apos; can be reduced." verbose="The scope of the variable &apos;sic_data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="213" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_pss_sss_adjust&apos; can be reduced." verbose="The scope of the variable &apos;pbch_pss_sss_adjust&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="214" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_mod&apos; can be reduced." verbose="The scope of the variable &apos;symbol_mod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="415" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sic_data&apos; can be reduced." verbose="The scope of the variable &apos;sic_data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="417" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_pss_sss_adjust&apos; can be reduced." verbose="The scope of the variable &apos;pbch_pss_sss_adjust&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="418" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len_mod4&apos; can be reduced." verbose="The scope of the variable &apos;len_mod4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="419" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch_mag&apos; can be reduced." verbose="The scope of the variable &apos;ch_mag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="421" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len2&apos; can be reduced." verbose="The scope of the variable &apos;len2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="644" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_mod&apos; can be reduced." verbose="The scope of the variable &apos;symbol_mod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="645" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sic_data&apos; can be reduced." verbose="The scope of the variable &apos;sic_data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="647" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbch_pss_sss_adjust&apos; can be reduced." verbose="The scope of the variable &apos;pbch_pss_sss_adjust&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="648" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len_mod4&apos; can be reduced." verbose="The scope of the variable &apos;len_mod4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="649" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;llr2&apos; can be reduced." verbose="The scope of the variable &apos;llr2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="650" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch_mag&apos; can be reduced." verbose="The scope of the variable &apos;ch_mag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="651" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch_magb&apos; can be reduced." verbose="The scope of the variable &apos;ch_magb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="651" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="3244" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="4753" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="6282" column="9"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;format!=10&apos; is always true" verbose="Condition &apos;format!=10&apos; is always true" cwe="571">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="7965" column="21" info="Condition &apos;format!=10&apos; is always true"/>
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="7963" column="14" info="Assuming that condition &apos;format==10&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;accumulated_ch_power&apos; shadows outer variable" verbose="Local variable &apos;accumulated_ch_power&apos; shadows outer variable" cwe="398">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="504" column="10" info="Shadow variable"/>
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="1734" column="8" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="720" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="720" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="1226" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s5&apos; is assigned a value that is never used." verbose="Variable &apos;s5&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="1259" column="48"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s2&apos; is assigned a value that is never used." verbose="Variable &apos;s2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="1259" column="48"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gnb_id&apos; is assigned a value that is never used." verbose="Variable &apos;gnb_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="1709" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="1851" column="25"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;my_int&apos; is not assigned a value." verbose="Variable &apos;my_int&apos; is not assigned a value." cwe="665">
            <location file="openair2/GNB_APP/gnb_config.c" line="1853" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="2124" column="88"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gnb_id&apos; is assigned a value that is never used." verbose="Variable &apos;gnb_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/GNB_APP/gnb_config.c" line="2125" column="88"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;t_reloc_prep &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2570" column="32"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2558" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;t_reloc_prep&lt;=0&apos; and &apos;tx2_reloc_overall&lt;=0&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2570" column="61"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2559" column="39" info="&apos;tx2_reloc_overall&apos; is assigned value &apos;0&apos; here."/>
            <location file="openair2/ENB_APP/enb_config.c" line="2558" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;tx2_reloc_overall &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2571" column="37"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2559" column="39" info="&apos;tx2_reloc_overall&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;t_reloc_prep&lt;=0&apos; and &apos;t_dc_prep&lt;=0&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2571" column="71"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2560" column="31" info="&apos;t_dc_prep&apos; is assigned value &apos;0&apos; here."/>
            <location file="openair2/ENB_APP/enb_config.c" line="2558" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;t_dc_prep &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2572" column="29"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2560" column="31" info="&apos;t_dc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;t_reloc_prep&lt;=0&apos; and &apos;t_dc_overall&lt;=0&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2572" column="55"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2561" column="34" info="&apos;t_dc_overall&apos; is assigned value &apos;0&apos; here."/>
            <location file="openair2/ENB_APP/enb_config.c" line="2558" column="34" info="&apos;t_reloc_prep&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;t_dc_overall &lt;= 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2573" column="32"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2561" column="34" info="&apos;t_dc_overall&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="170" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="252" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="252" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;enb_id&apos; can be reduced." verbose="The scope of the variable &apos;enb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="253" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offsetMaxLimit&apos; can be reduced." verbose="The scope of the variable &apos;offsetMaxLimit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="254" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cycleNb&apos; can be reduced." verbose="The scope of the variable &apos;cycleNb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="255" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;J&apos; can be reduced." verbose="The scope of the variable &apos;J&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="1857" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="1857" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="1857" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="1857" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;enb_id&apos; can be reduced." verbose="The scope of the variable &apos;enb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="1858" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;enb_id&apos; can be reduced." verbose="The scope of the variable &apos;enb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2116" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;J&apos; can be reduced." verbose="The scope of the variable &apos;J&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2403" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2403" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2403" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2403" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;enb_id&apos; can be reduced." verbose="The scope of the variable &apos;enb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2404" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aprefix&apos; can be reduced." verbose="The scope of the variable &apos;aprefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2658" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_TBS&apos; can be reduced." verbose="The scope of the variable &apos;tmp_TBS&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="95" column="24"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="781" column="24" info="Second condition"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="777" column="22" info="First condition"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="915" column="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_req&apos; can be reduced." verbose="The scope of the variable &apos;dl_req&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="114" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mcch_sdu_length&apos; can be reduced." verbose="The scope of the variable &apos;mcch_sdu_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="130" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_len_mtch_temp&apos; can be reduced." verbose="The scope of the variable &apos;header_len_mtch_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="132" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_len_mcch_temp&apos; can be reduced." verbose="The scope of the variable &apos;header_len_mcch_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="133" column="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_len_msi_temp&apos; can be reduced." verbose="The scope of the variable &apos;header_len_msi_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="133" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padding&apos; can be reduced." verbose="The scope of the variable &apos;padding&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="137" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;post_padding&apos; can be reduced." verbose="The scope of the variable &apos;post_padding&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="137" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="142" column="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mbsfn_period&apos; can be reduced." verbose="The scope of the variable &apos;mbsfn_period&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1101" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mcch_period&apos; can be reduced." verbose="The scope of the variable &apos;mcch_period&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1102" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mcch_sdu_length&apos; can be reduced." verbose="The scope of the variable &apos;mcch_sdu_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1112" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_len_mtch_temp&apos; can be reduced." verbose="The scope of the variable &apos;header_len_mtch_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1114" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_len_mcch_temp&apos; can be reduced." verbose="The scope of the variable &apos;header_len_mcch_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1115" column="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_len_msi_temp&apos; can be reduced." verbose="The scope of the variable &apos;header_len_msi_temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1115" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ii&apos; can be reduced." verbose="The scope of the variable &apos;ii&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1116" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msi_pos&apos; can be reduced." verbose="The scope of the variable &apos;msi_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1116" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padding&apos; can be reduced." verbose="The scope of the variable &apos;padding&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1118" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;post_padding&apos; can be reduced." verbose="The scope of the variable &apos;post_padding&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1118" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_mtch&apos; can be reduced." verbose="The scope of the variable &apos;num_mtch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1120" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msi_length&apos; can be reduced." verbose="The scope of the variable &apos;msi_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1121" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1121" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1123" column="48"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;." cwe="783">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="905" column="129"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;." cwe="783">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="914" column="193"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;." cwe="783">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1695" column="74"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mcch_period&apos; is assigned a value that is never used." verbose="Variable &apos;mcch_period&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="119" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mbsfn_period&apos; is assigned a value that is never used." verbose="Variable &apos;mbsfn_period&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1101" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mcch_period&apos; is assigned a value that is never used." verbose="Variable &apos;mcch_period&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1102" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ii&apos; is assigned a value that is never used." verbose="Variable &apos;ii&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1116" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;msi_pos&apos; is assigned a value that is never used." verbose="Variable &apos;msi_pos&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_mch.c" line="1116" column="25"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;gap_index &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2103" column="29"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2030" column="19" info="&apos;gap_index&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;gap_index &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2115" column="29"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2030" column="19" info="&apos;gap_index&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;gap_index &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2135" column="29"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2030" column="19" info="&apos;gap_index&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;gap_index &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2147" column="29"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_dlsch.c" line="2030" column="19" info="&apos;gap_index&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_phytest.c" line="184" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cshift&apos; can be reduced." verbose="The scope of the variable &apos;cshift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_phytest.c" line="185" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ndi&apos; can be reduced." verbose="The scope of the variable &apos;ndi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_phytest.c" line="185" column="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;snr&apos; can be reduced." verbose="The scope of the variable &apos;snr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_phytest.c" line="186" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_req_index&apos; can be reduced." verbose="The scope of the variable &apos;ul_req_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_phytest.c" line="198" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi_dci0_pdu&apos; can be reduced." verbose="The scope of the variable &apos;hi_dci0_pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_phytest.c" line="204" column="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x128&apos; is assigned a value that is never used." verbose="Variable &apos;x128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="8116" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y128&apos; is assigned a value that is never used." verbose="Variable &apos;y128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="8116" column="40"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw0" verbose="Unused variable: tw0" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="8114" column="45"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw1" verbose="Unused variable: tw1" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="8114" column="49"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw2" verbose="Unused variable: tw2" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="8114" column="53"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw3" verbose="Unused variable: tw3" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts.c" line="8114" column="57"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len_mod4&apos; is assigned a value that is never used." verbose="Variable &apos;len_mod4&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="419" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;llr&apos; is assigned a value that is never used." verbose="Variable &apos;llr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="550" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len_mod4&apos; is assigned a value that is never used." verbose="Variable &apos;len_mod4&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="649" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_rx&apos; can be reduced." verbose="The scope of the variable &apos;frame_rx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3584" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframe_rx&apos; can be reduced." verbose="The scope of the variable &apos;subframe_rx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3585" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pilot0&apos; can be reduced." verbose="The scope of the variable &apos;pilot0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3586" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot1&apos; can be reduced." verbose="The scope of the variable &apos;slot1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3588" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;next_subframe_rx&apos; can be reduced." verbose="The scope of the variable &apos;next_subframe_rx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3589" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;next_subframe_slot0&apos; can be reduced." verbose="The scope of the variable &apos;next_subframe_slot0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/SCHED_UE/phy_procedures_lte_ue.c" line="3590" column="11"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2172" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2173" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2174" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2176" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2177" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2187" column="24" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2188" column="78" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2195" column="82" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2198" column="89" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2207" column="85" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2214" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2216" column="91" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2239" column="24" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2170" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2171" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2296" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2297" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2298" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2299" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2301" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2302" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2312" column="24" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2313" column="77" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2320" column="82" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2323" column="89" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2332" column="85" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2339" column="25" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2341" column="92" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2294" column="188" info="Assignment &apos;epdcch_setconfig_r11=UE_template-&gt;physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="2295" column="46" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lcid&apos; can be reduced." verbose="The scope of the variable &apos;lcid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="1083" column="17"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;rx_lengths[i]&apos; is less than zero." verbose="The unsigned expression &apos;rx_lengths[i]&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="696" column="71" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;rx_lengths[i]&apos; is less than zero." verbose="The unsigned expression &apos;rx_lengths[i]&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="831" column="68" info="Unsigned less than zero"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;rx_lengths[i]&apos; is less than zero." verbose="The unsigned expression &apos;rx_lengths[i]&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="887" column="72" info="Unsigned less than zero"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;lcgid&apos; shadows outer variable" verbose="Local variable &apos;lcgid&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="650" column="19" info="Shadow variable"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="121" column="11" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lcid&apos; is assigned a value that is never used." verbose="Variable &apos;lcid&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="1083" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_sdu_cnt&apos; is assigned a value that is never used." verbose="Variable &apos;num_sdu_cnt&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_ulsch.c" line="1084" column="29"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: UE_id2" verbose="Unused variable: UE_id2" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="911" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i1" verbose="Unused variable: i1" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="912" column="12"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i2" verbose="Unused variable: i2" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="912" column="16"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i3" verbose="Unused variable: i3" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="912" column="20"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rnti1" verbose="Unused variable: rnti1" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="913" column="10"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rnti2" verbose="Unused variable: rnti2" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="913" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ue_sched_ctl1" verbose="Unused variable: ue_sched_ctl1" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="916" column="20"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ue_sched_ctl2" verbose="Unused variable: ue_sched_ctl2" cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_fairRR.c" line="916" column="36"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." verbose="Either the condition &apos;fd!=NULL&apos; is redundant or there is possible null pointer dereference: fd." cwe="476">
            <location file="openair2/LAYER2/MAC/main.c" line="126" column="12" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/main.c" line="123" column="15" info="Assignment &apos;fd=fopen(&quot;MAC_stats.log&quot;,&quot;w+&quot;)&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/main.c" line="124" column="20" info="Assuming that condition &apos;fd!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/main.c" line="119" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/main_ue.c" line="65" column="7"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 24) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 24) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="openair2/LAYER2/MAC/main.c" line="64" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UE_id&apos; shadows outer variable" verbose="Local variable &apos;UE_id&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/MAC/pre_processor.c" line="231" column="15" info="Shadow variable"/>
            <location file="openair2/LAYER2/MAC/pre_processor.c" line="189" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UE_id&apos; shadows outer variable" verbose="Local variable &apos;UE_id&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/MAC/pre_processor.c" line="253" column="15" info="Shadow variable"/>
            <location file="openair2/LAYER2/MAC/pre_processor.c" line="189" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UE_id&apos; shadows outer variable" verbose="Local variable &apos;UE_id&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/MAC/pre_processor.c" line="1006" column="16" info="Shadow variable"/>
            <location file="openair2/LAYER2/MAC/pre_processor.c" line="1002" column="9" info="Shadowed declaration"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: dl_Bandwidth &lt; 7 || dl_Bandwidth &gt;= 0." verbose="Logical disjunction always evaluates to true: dl_Bandwidth &lt; 7 || dl_Bandwidth &gt;= 0. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1826" column="32"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: dl_Bandwidth &lt; 7 || dl_Bandwidth &gt;= 0." verbose="Logical disjunction always evaluates to true: dl_Bandwidth &lt; 7 || dl_Bandwidth &gt;= 0. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1836" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_prach&apos; can be reduced." verbose="The scope of the variable &apos;num_prach&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ra_procedures.c" line="65" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;messagePowerOffsetGroupB&apos; can be reduced." verbose="The scope of the variable &apos;messagePowerOffsetGroupB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ra_procedures.c" line="69" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Size&apos; can be reduced." verbose="The scope of the variable &apos;Size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ra_procedures.c" line="286" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_diff&apos; can be reduced." verbose="The scope of the variable &apos;frame_diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ra_procedures.c" line="304" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dcch_header_len&apos; can be reduced." verbose="The scope of the variable &apos;dcch_header_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ra_procedures.c" line="305" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sdu_lengths&apos; can be reduced." verbose="The scope of the variable &apos;sdu_lengths&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ra_procedures.c" line="306" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rballoc&apos; can be reduced." verbose="The scope of the variable &apos;rballoc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="120" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ULdelay&apos; can be reduced." verbose="The scope of the variable &apos;ULdelay&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="121" column="12"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." verbose="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="890" column="34" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4544" column="18" info="Calling function &apos;get_csi_params&apos;, 2nd argument &apos;cqi_ReportPeriodic&apos; value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4532" column="132" info="Assignment &apos;cqi_ReportPeriodic=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated-&gt;cqi_ReportConfig-&gt;cqi_ReportPeriodic&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4533" column="34" info="Assuming that condition &apos;cqi_ReportPeriodic!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." verbose="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="953" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4544" column="18" info="Calling function &apos;get_csi_params&apos;, 2nd argument &apos;cqi_ReportPeriodic&apos; value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4532" column="132" info="Assignment &apos;cqi_ReportPeriodic=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated-&gt;cqi_ReportConfig-&gt;cqi_ReportPeriodic&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4533" column="34" info="Assuming that condition &apos;cqi_ReportPeriodic!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;UE_info!=NULL&apos; is redundant or there is possible null pointer dereference: UE_info." verbose="Either the condition &apos;UE_info!=NULL&apos; is redundant or there is possible null pointer dereference: UE_info." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1395" column="60" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1390" column="27" info="Assignment &apos;UE_info=&amp;eNB-&gt;UE_info&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1394" column="23" info="Assuming that condition &apos;UE_info!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;physicalConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: physicalConfigDedicated." verbose="Either the condition &apos;physicalConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: physicalConfigDedicated." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1398" column="60" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1395" column="95" info="Assignment &apos;physicalConfigDedicated=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1396" column="39" info="Assuming that condition &apos;physicalConfigDedicated!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cqireq&apos; can be reduced." verbose="The scope of the variable &apos;cqireq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="122" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mpdcch_nb_index&apos; can be reduced." verbose="The scope of the variable &apos;mpdcch_nb_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="123" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;TPC&apos; can be reduced." verbose="The scope of the variable &apos;TPC&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="124" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;N_NB_index&apos; can be reduced." verbose="The scope of the variable &apos;N_NB_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="126" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rballoc&apos; is assigned a value that is never used." verbose="Variable &apos;rballoc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="120" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ULdelay&apos; is assigned a value that is never used." verbose="Variable &apos;ULdelay&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="121" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cqireq&apos; is assigned a value that is never used." verbose="Variable &apos;cqireq&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="122" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mpdcch_nb_index&apos; is assigned a value that is never used." verbose="Variable &apos;mpdcch_nb_index&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="123" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TPC&apos; is assigned a value that is never used." verbose="Variable &apos;TPC&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="124" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;N_NB_index&apos; is assigned a value that is never used." verbose="Variable &apos;N_NB_index&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/rar_tools.c" line="126" column="18"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;puschConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: puschConfigDedicated." verbose="Either the condition &apos;puschConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: puschConfigDedicated." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1401" column="47" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1398" column="83" info="Assignment &apos;puschConfigDedicated=physicalConfigDedicated-&gt;pusch_ConfigDedicated&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1399" column="36" info="Assuming that condition &apos;puschConfigDedicated!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;physicalConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: physicalConfigDedicated." verbose="Either the condition &apos;physicalConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: physicalConfigDedicated." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1403" column="61" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1395" column="95" info="Assignment &apos;physicalConfigDedicated=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1396" column="39" info="Assuming that condition &apos;physicalConfigDedicated!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pucch_ConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_ConfigDedicated." verbose="Either the condition &apos;pucch_ConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_ConfigDedicated." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1406" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1403" column="84" info="Assignment &apos;pucch_ConfigDedicated=physicalConfigDedicated-&gt;pucch_ConfigDedicated&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1404" column="37" info="Assuming that condition &apos;pucch_ConfigDedicated!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pucch_ConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_ConfigDedicated." verbose="Either the condition &apos;pucch_ConfigDedicated!=NULL&apos; is redundant or there is possible null pointer dereference: pucch_ConfigDedicated." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1407" column="8" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1403" column="84" info="Assignment &apos;pucch_ConfigDedicated=physicalConfigDedicated-&gt;pucch_ConfigDedicated&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1404" column="37" info="Assuming that condition &apos;pucch_ConfigDedicated!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;UE_info!=NULL&apos; is redundant or there is possible null pointer dereference: UE_info." verbose="Either the condition &apos;UE_info!=NULL&apos; is redundant or there is possible null pointer dereference: UE_info." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1494" column="60" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1487" column="27" info="Assignment &apos;UE_info=&amp;eNB-&gt;UE_info&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1491" column="23" info="Assuming that condition &apos;UE_info!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." verbose="Either the condition &apos;epdcch_setconfig_r11!=NULL&apos; is redundant or there is possible null pointer dereference: epdcch_setconfig_r11." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1895" column="19" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1893" column="180" info="Assignment &apos;epdcch_setconfig_r11=eNB-&gt;UE_info.UE_template[CC_id][UE_id].physicalConfigDedicated-&gt;ext4-&gt;epdcch_Config_r11-&gt;config_r11.choice.setup.setConfigToAddModList_r11-&gt;list.array[0]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1894" column="40" info="Assuming that condition &apos;epdcch_setconfig_r11!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." verbose="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4536" column="15" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4532" column="132" info="Assignment &apos;cqi_ReportPeriodic=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated-&gt;cqi_ReportConfig-&gt;cqi_ReportPeriodic&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4533" column="34" info="Assuming that condition &apos;cqi_ReportPeriodic!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." verbose="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4537" column="15" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4532" column="132" info="Assignment &apos;cqi_ReportPeriodic=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated-&gt;cqi_ReportConfig-&gt;cqi_ReportPeriodic&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4533" column="34" info="Assuming that condition &apos;cqi_ReportPeriodic!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." verbose="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4578" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4532" column="132" info="Assignment &apos;cqi_ReportPeriodic=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated-&gt;cqi_ReportConfig-&gt;cqi_ReportPeriodic&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4533" column="34" info="Assuming that condition &apos;cqi_ReportPeriodic!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." verbose="Either the condition &apos;cqi_ReportPeriodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportPeriodic." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4607" column="14" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4532" column="132" info="Assignment &apos;cqi_ReportPeriodic=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated-&gt;cqi_ReportConfig-&gt;cqi_ReportPeriodic&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4533" column="34" info="Assuming that condition &apos;cqi_ReportPeriodic!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cqi_ReportModeAperiodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportModeAperiodic." verbose="Either the condition &apos;cqi_ReportModeAperiodic!=NULL&apos; is redundant or there is possible null pointer dereference: cqi_ReportModeAperiodic." cwe="476">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4659" column="12" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4649" column="84" info="Assignment &apos;cqi_ReportModeAperiodic=UE_info-&gt;UE_template[CC_idP][UE_id].physicalConfigDedicated-&gt;cqi_ReportConfig-&gt;cqi_ReportModeAperiodic&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="4650" column="40" info="Assuming that condition &apos;cqi_ReportModeAperiodic!=NULL&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;I&apos; shadows outer variable" verbose="Local variable &apos;I&apos; shadows outer variable" cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="1914" column="22" info="Shadow variable"/>
            <location file="openair2/ENB_APP/enb_config.c" line="1857" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;I&apos; shadows outer variable" verbose="Local variable &apos;I&apos; shadows outer variable" cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="1967" column="20" info="Shadow variable"/>
            <location file="openair2/ENB_APP/enb_config.c" line="1857" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;I&apos; shadows outer variable" verbose="Local variable &apos;I&apos; shadows outer variable" cwe="398">
            <location file="openair2/ENB_APP/enb_config.c" line="2454" column="22" info="Shadow variable"/>
            <location file="openair2/ENB_APP/enb_config.c" line="2403" column="9" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IncreaseValue&apos; can be reduced." verbose="The scope of the variable &apos;IncreaseValue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="123" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ThresholdValue&apos; can be reduced." verbose="The scope of the variable &apos;ThresholdValue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="123" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframeAssignment&apos; can be reduced." verbose="The scope of the variable &apos;subframeAssignment&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="216" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subframeAssignment&apos; can be reduced." verbose="The scope of the variable &apos;subframeAssignment&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="329" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Jtab&apos; can be reduced." verbose="The scope of the variable &apos;Jtab&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="891" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ri_size&apos; can be reduced." verbose="The scope of the variable &apos;ri_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1740" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdu_type&apos; can be reduced." verbose="The scope of the variable &apos;pdu_type&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="3397" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;harq_pid&apos; can be reduced." verbose="The scope of the variable &apos;harq_pid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="3692" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="3693" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="3896" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="3896" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdu&apos; can be reduced." verbose="The scope of the variable &apos;pdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="3897" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_tx&apos; can be reduced." verbose="The scope of the variable &apos;frame_tx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="3899" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ul_config_pdu&apos; is assigned a value that is never used." verbose="Variable &apos;ul_config_pdu&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/eNB_scheduler_primitives.c" line="1223" column="19"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;R&lt;=256&apos; is always false" verbose="Condition &apos;R&lt;=256&apos; is always false" cwe="570">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_compute_tbs_common.c" line="140" column="11" info="Condition &apos;R&lt;=256&apos; is always false"/>
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_compute_tbs_common.c" line="121" column="7" info="Assignment &apos;R=948&apos;, assigned value is 948"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;C&apos; can be reduced." verbose="The scope of the variable &apos;C&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_compute_tbs_common.c" line="66" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;C&apos; can be reduced." verbose="The scope of the variable &apos;C&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_compute_tbs_common.c" line="110" column="28"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_compute_tbs_common.c" line="130" column="14" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_compute_tbs_common.c" line="108" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;k&apos; is assigned a value that is never used." verbose="Variable &apos;k&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/ENB_APP/enb_config.c" line="252" column="51"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;enb_id&apos; is assigned a value that is never used." verbose="Variable &apos;enb_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/ENB_APP/enb_config.c" line="253" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s1a&apos; is assigned a value that is never used." verbose="Variable &apos;s1a&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/ENB_APP/enb_config.c" line="1868" column="44"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;enb_id&apos; is assigned a value that is never used." verbose="Variable &apos;enb_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/ENB_APP/enb_config.c" line="2116" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s1a&apos; is assigned a value that is never used." verbose="Variable &apos;s1a&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/ENB_APP/enb_config.c" line="2414" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_preambles&apos; can be reduced." verbose="The scope of the variable &apos;nb_preambles&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue.c" line="370" column="11"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;freqcfg!=NULL&apos; is redundant or there is possible null pointer dereference: freqcfg." verbose="Either the condition &apos;freqcfg!=NULL&apos; is redundant or there is possible null pointer dereference: freqcfg." cwe="476">
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue_sl.c" line="304" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue_sl.c" line="281" column="47" info="Assignment &apos;freqcfg=(sl_preconfig-&gt;sl_PreconfigFreqInfoList_r16)?sl_preconfig-&gt;sl_PreconfigFreqInfoList_r16-&gt;list.array[0]:NULL&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue_sl.c" line="284" column="23" info="Assuming that condition &apos;freqcfg!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: bwp" verbose="Possible null pointer dereference: bwp" cwe="476">
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue_sl.c" line="309" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue_sl.c" line="303" column="39" info="Assignment &apos;bwp=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: tdd_uldl_config" verbose="Possible null pointer dereference: tdd_uldl_config" cwe="476">
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue_sl.c" line="370" column="18" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_UE/config_ue_sl.c" line="364" column="52" info="Assignment &apos;tdd_uldl_config=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ssb_nb_in_ro&apos; can be reduced." verbose="The scope of the variable &apos;ssb_nb_in_ro&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ra_procedures.c" line="310" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;messagePowerOffsetGroupB&apos; can be reduced." verbose="The scope of the variable &apos;messagePowerOffsetGroupB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ra_procedures.c" line="379" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;total_preambles_per_ssb&apos; is assigned a value that is never used." verbose="Variable &apos;total_preambles_per_ssb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ra_procedures.c" line="368" column="29"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_power_procedures.c" line="136" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;K1&apos; can be reduced." verbose="The scope of the variable &apos;K1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_power_procedures.c" line="406" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair1/SIMULATION/TOOLS/random_channel.c" line="2341" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;llr16&apos; is assigned a value that is never used." verbose="Variable &apos;llr16&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/LTE_UE_TRANSPORT/dlsch_llr_computation.c" line="8028" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a1_to_a4&apos; can be reduced." verbose="The scope of the variable &apos;a1_to_a4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="196" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mu_ref&apos; can be reduced." verbose="The scope of the variable &apos;mu_ref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="197" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="197" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u_slots&apos; can be reduced." verbose="The scope of the variable &apos;u_slots&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="198" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u_sym&apos; can be reduced." verbose="The scope of the variable &apos;u_sym&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="198" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;I1&apos; can be reduced." verbose="The scope of the variable &apos;I1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="198" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u_sl_slots&apos; can be reduced." verbose="The scope of the variable &apos;u_sl_slots&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="199" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u_sl_slots_2&apos; can be reduced." verbose="The scope of the variable &apos;u_sl_slots_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="199" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_SL_slots&apos; can be reduced." verbose="The scope of the variable &apos;num_SL_slots&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="269" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mixed_slot_numsym&apos; can be reduced." verbose="The scope of the variable &apos;mixed_slot_numsym&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="269" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;a1_to_a4&apos; is assigned a value that is never used." verbose="Variable &apos;a1_to_a4&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="196" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mu_ref&apos; is assigned a value that is never used." verbose="Variable &apos;mu_ref&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="197" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;diff&apos; is assigned a value that is never used." verbose="Variable &apos;diff&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="197" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;u_slots&apos; is assigned a value that is never used." verbose="Variable &apos;u_slots&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="198" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;u_sym&apos; is assigned a value that is never used." verbose="Variable &apos;u_sym&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="198" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I1&apos; is assigned a value that is never used." verbose="Variable &apos;I1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="198" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;u_sl_slots&apos; is assigned a value that is never used." verbose="Variable &apos;u_sl_slots&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="199" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;u_sl_slots_2&apos; is assigned a value that is never used." verbose="Variable &apos;u_sl_slots_2&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="199" column="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_SL_slots&apos; is assigned a value that is never used." verbose="Variable &apos;num_SL_slots&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures_sl.c" line="269" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot_type&apos; can be reduced." verbose="The scope of the variable &apos;slot_type&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler_sl.c" line="67" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_psbch_rx_slot&apos; can be reduced." verbose="The scope of the variable &apos;is_psbch_rx_slot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler_sl.c" line="178" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;slot_type&apos; is assigned a value that is never used." verbose="Variable &apos;slot_type&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler_sl.c" line="67" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_psbch_rx_slot&apos; is assigned a value that is never used." verbose="Variable &apos;is_psbch_rx_slot&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler_sl.c" line="178" column="45"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_psbch_tx_slot&apos; is assigned a value that is never used." verbose="Variable &apos;is_psbch_tx_slot&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler_sl.c" line="178" column="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot_index&apos; can be reduced." verbose="The scope of the variable &apos;slot_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/config.c" line="384" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/config.c" line="853" column="14" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/config.c" line="803" column="13" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;slot_index&apos; is assigned a value that is never used." verbose="Variable &apos;slot_index&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/config.c" line="384" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rbStart&apos; can be reduced." verbose="The scope of the variable &apos;rbStart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_qos_scheduler_ulsch.c" line="75" column="9"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sched_pusch&apos; shadows outer variable" verbose="Local variable &apos;sched_pusch&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_qos_scheduler_ulsch.c" line="206" column="25" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_qos_scheduler_ulsch.c" line="78" column="23" info="Shadowed declaration"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;n_codewords==2&apos; is always false" verbose="Condition &apos;n_codewords==2&apos; is always false" cwe="570">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1114" column="23" info="Condition &apos;n_codewords==2&apos; is always false"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1095" column="25" info="Assignment &apos;n_codewords=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;n_codewords==2&apos; is always false" verbose="Condition &apos;n_codewords==2&apos; is always false" cwe="570">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1127" column="23" info="Condition &apos;n_codewords==2&apos; is always false"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1095" column="25" info="Assignment &apos;n_codewords=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;n_codewords==2&apos; is always false" verbose="Condition &apos;n_codewords==2&apos; is always false" cwe="570">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1138" column="23" info="Condition &apos;n_codewords==2&apos; is always false"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1095" column="25" info="Assignment &apos;n_codewords=1&apos;, assigned value is 1"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;acknack_resource_id!=NULL&apos; is redundant or there is possible null pointer dereference: acknack_resource_id." verbose="Either the condition &apos;acknack_resource_id!=NULL&apos; is redundant or there is possible null pointer dereference: acknack_resource_id." cwe="476">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="2381" column="112" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="2379" column="100" info="Assignment &apos;acknack_resource_id=pucch_Config-&gt;resourceSetToAddModList-&gt;list.array[resource_set_id]-&gt;resourceList.list.array[res_ind]&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="2380" column="37" info="Assuming that condition &apos;acknack_resource_id!=NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;n_codewords == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1109" column="23"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1095" column="25" info="&apos;n_codewords&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;n_codewords == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1123" column="23"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1095" column="25" info="&apos;n_codewords&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;n_codewords == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1133" column="23"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1095" column="25" info="&apos;n_codewords&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padding_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;padding_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="2723" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_Msg3&apos; can be reduced." verbose="The scope of the variable &apos;is_Msg3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3771" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3774" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1511" column="51" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="1507" column="49" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n_RB&apos; shadows outer variable" verbose="Local variable &apos;n_RB&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3227" column="13" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3199" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3507" column="16" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3380" column="13" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;rnti&apos; shadows outer variable" verbose="Local variable &apos;rnti&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3957" column="16" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3778" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ret&apos; shadows outer variable" verbose="Local variable &apos;ret&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3969" column="11" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3774" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lcid&apos; can be reduced." verbose="The scope of the variable &apos;lcid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="164" column="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;MGRP&apos; can be reduced." verbose="The scope of the variable &apos;MGRP&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="264" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gapOffset&apos; can be reduced." verbose="The scope of the variable &apos;gapOffset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="265" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;T&apos; can be reduced." verbose="The scope of the variable &apos;T&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="266" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tx_sdu&apos; can be reduced." verbose="The scope of the variable &apos;tx_sdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="376" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lcid&apos; can be reduced." verbose="The scope of the variable &apos;lcid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="648" column="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rlc_sdu_len&apos; can be reduced." verbose="The scope of the variable &apos;rlc_sdu_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="808" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rlc_sdu&apos; can be reduced." verbose="The scope of the variable &apos;rlc_sdu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="809" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;destinationL2Id&apos; can be reduced." verbose="The scope of the variable &apos;destinationL2Id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="810" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="1468" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ii&apos; can be reduced." verbose="The scope of the variable &apos;ii&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="1468" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msi_pos&apos; can be reduced." verbose="The scope of the variable &apos;msi_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="1468" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2311" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;highest_priority&apos; can be reduced." verbose="The scope of the variable &apos;highest_priority&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2315" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2903" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jm&apos; can be reduced." verbose="The scope of the variable &apos;jm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="3334" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="3595" column="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;num_ssb_per_RO&gt;1&apos; is always true" verbose="Condition &apos;num_ssb_per_RO&gt;1&apos; is always true" cwe="571">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_RA.c" line="145" column="28" info="Condition &apos;num_ssb_per_RO&gt;1&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;N_RA_slot&lt;=1&apos; is always true" verbose="Condition &apos;N_RA_slot&lt;=1&apos; is always true" cwe="571">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_RA.c" line="314" column="27" info="Condition &apos;N_RA_slot&lt;=1&apos; is always true"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;T&apos; is assigned a value that is never used." verbose="Variable &apos;T&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="266" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;destinationL2Id&apos; is assigned a value that is never used." verbose="Variable &apos;destinationL2Id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="810" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="1468" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ii&apos; is assigned a value that is never used." verbose="Variable &apos;ii&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="1468" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;msi_pos&apos; is assigned a value that is never used." verbose="Variable &apos;msi_pos&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="1468" column="45"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buflen_remain&apos; is assigned a value that is never used." verbose="Variable &apos;buflen_remain&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2292" column="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lcid_rlc_pdu_count&apos; is assigned a value that is never used." verbose="Variable &apos;lcid_rlc_pdu_count&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2295" column="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_lcid_processed&apos; is assigned a value that is never used." verbose="Variable &apos;is_lcid_processed&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2296" column="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lcid_buffer_occupancy_old&apos; is assigned a value that is never used." verbose="Variable &apos;lcid_buffer_occupancy_old&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2317" column="52"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lcid_buffer_occupancy_new&apos; is assigned a value that is never used." verbose="Variable &apos;lcid_buffer_occupancy_new&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2318" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rlc_pdu_header_len_last&apos; is assigned a value that is never used." verbose="Variable &apos;rlc_pdu_header_len_last&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="2769" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pos_next&apos; is assigned a value that is never used." verbose="Variable &apos;pos_next&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="3212" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;array_index&apos; is assigned a value that is never used." verbose="Variable &apos;array_index&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="3214" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/MAC/ue_procedures.c" line="3595" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl_req&apos; can be reduced." verbose="The scope of the variable &apos;dl_req&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_bch.c" line="119" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot_index&apos; can be reduced." verbose="The scope of the variable &apos;slot_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_RA.c" line="286" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prach_occasion_id&apos; can be reduced." verbose="The scope of the variable &apos;prach_occasion_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_RA.c" line="287" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Qm&apos; can be reduced." verbose="The scope of the variable &apos;Qm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_RA.c" line="1389" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;O_bit_number_cw0&apos; is assigned a value that is never used." verbose="Variable &apos;O_bit_number_cw0&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="2324" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;O_bit_number_cw1&apos; is assigned a value that is never used." verbose="Variable &apos;O_bit_number_cw1&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="2325" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nb_meas&apos; is assigned a value that is never used." verbose="Variable &apos;nb_meas&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="2604" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mac_ce_size&apos; is assigned a value that is never used." verbose="Variable &apos;mac_ce_size&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c" line="3576" column="23"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="1386" column="17" info="Second condition"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="1381" column="17" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;pusch_pdu&apos; is always true" verbose="Condition &apos;pusch_pdu&apos; is always true" cwe="571">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="2174" column="7" info="Condition &apos;pusch_pdu&apos; is always true"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="2167" column="7" info="Assuming that condition &apos;!pusch_pdu&apos; is not redundant"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;temp_start_symbol&apos; is assigned a value that is never used." verbose="Variable &apos;temp_start_symbol&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_RA.c" line="94" column="69"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prach_occasion_id&apos; is assigned a value that is never used." verbose="Variable &apos;prach_occasion_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_RA.c" line="287" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timing_advance_cmd&apos; can be reduced." verbose="The scope of the variable &apos;timing_advance_cmd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_dlsch.c" line="90" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tag_id&apos; can be reduced." verbose="The scope of the variable &apos;tag_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_dlsch.c" line="90" column="55"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;last_size&apos; is assigned a value that is never used." verbose="Variable &apos;last_size&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_dlsch.c" line="89" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tag_id&apos; is assigned a value that is never used." verbose="Variable &apos;tag_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_dlsch.c" line="90" column="62"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pusch_Config!=NULL&apos; is redundant or there is possible null pointer dereference: pusch_Config." verbose="Either the condition &apos;pusch_Config!=NULL&apos; is redundant or there is possible null pointer dereference: pusch_Config." cwe="476">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="347" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="339" column="56" info="Assignment &apos;pusch_Config=mac-&gt;current_UL_BWP-&gt;pusch_Config&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="340" column="27" info="Assuming that condition &apos;pusch_Config!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jm&apos; can be reduced." verbose="The scope of the variable &apos;jm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="1489" column="15"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sched_info&apos; shadows outer variable" verbose="Local variable &apos;sched_info&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="2866" column="34" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_UE/nr_ue_scheduler.c" line="2817" column="26" info="Shadowed declaration"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1814" column="32" info="Second condition"/>
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1807" column="33" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1864" column="31" info="Second condition"/>
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1857" column="33" info="First condition"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;valid&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;valid&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="3752" column="11" info="valid is overwritten"/>
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="3745" column="11" info="valid is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;valid&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;valid&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="4597" column="11" info="valid is overwritten"/>
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="4590" column="11" info="valid is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot_60khz&apos; can be reduced." verbose="The scope of the variable &apos;slot_60khz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1799" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;q&apos; can be reduced." verbose="The scope of the variable &apos;q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d_u&apos; can be reduced." verbose="The scope of the variable &apos;d_u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced." verbose="The scope of the variable &apos;n_shift_ra_bar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d_start&apos; can be reduced." verbose="The scope of the variable &apos;d_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1993" column="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1994" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found_preambles&apos; can be reduced." verbose="The scope of the variable &apos;found_preambles&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1995" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_group_ra&apos; can be reduced." verbose="The scope of the variable &apos;n_group_ra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="2018" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_allowed_ri&apos; can be reduced." verbose="The scope of the variable &apos;nb_allowed_ri&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="4671" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ri_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;ri_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="4671" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;max_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="5140" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;temp_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="5152" column="14"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;index&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;index&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="4628" column="39" info="Unsigned positive"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x&apos; is assigned a value that is never used." verbose="Variable &apos;x&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_COMMON/nr_mac_common.c" line="1753" column="9"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: UE-&gt;apply_cellgroup. &apos;!A || (A &amp;&amp; B)&apos; is equivalent to &apos;!A || B&apos;" verbose="The condition &apos;!UE-&gt;apply_cellgroup || UE-&gt;apply_cellgroup &amp;&amp; UE-&gt;reconfigCellGroup&apos; is equivalent to &apos;!UE-&gt;apply_cellgroup || UE-&gt;reconfigCellGroup&apos;." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_primitives.c" line="3006" column="36"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;CC_id&apos; shadows outer variable" verbose="Local variable &apos;CC_id&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_srs.c" line="525" column="16" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_srs.c" line="515" column="14" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;res_found&apos; can be reduced." verbose="The scope of the variable &apos;res_found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_primitives.c" line="929" column="7"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="1182" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="523" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="523" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cri_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;cri_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="898" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ri_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;ri_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="899" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;li_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;li_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="900" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmi_bitlen&apos; can be reduced." verbose="The scope of the variable &apos;pmi_bitlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="901" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;flag&apos; is assigned a value that is never used." verbose="Variable &apos;flag&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="457" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tci_stateID&apos; is assigned a value that is never used." verbose="Variable &apos;tci_stateID&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_uci.c" line="458" column="21"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;tbs_bits&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;tbs_bits&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="1551" column="12" info="tbs_bits is overwritten"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="1545" column="16" info="tbs_bits is initialized"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;pusch_pdu-&gt;num_dmrs_cdm_grps_no_data&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;pusch_pdu-&gt;num_dmrs_cdm_grps_no_data&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="2459" column="42" info="pusch_pdu-&gt;num_dmrs_cdm_grps_no_data is overwritten"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="2456" column="42" info="pusch_pdu-&gt;num_dmrs_cdm_grps_no_data is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rbStart&apos; can be reduced." verbose="The scope of the variable &apos;rbStart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="1787" column="9"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;*mcs&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;*mcs&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="1543" column="20" info="Unsigned positive"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sched_pusch&apos; shadows outer variable" verbose="Local variable &apos;sched_pusch&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="1920" column="25" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="1790" column="23" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sched_ctrl&apos; shadows outer variable" verbose="Local variable &apos;sched_ctrl&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="2163" column="25" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="2141" column="23" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n_rb_sched&apos; is assigned a value that is never used." verbose="Variable &apos;n_rb_sched&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_ulsch.c" line="1747" column="14"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on &apos;cloned&apos; - it&apos;s already a pointer." verbose="Redundant pointer operation on &apos;cloned&apos; - it&apos;s already a pointer." cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_dl_handler.c" line="457" column="93"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;dec_rval&apos; shadows outer variable" verbose="Local variable &apos;dec_rval&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_dl_handler.c" line="368" column="20" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_dl_handler.c" line="354" column="18" info="Shadowed declaration"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." verbose="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." cwe="476">
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="110" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="106" column="56" info="Assignment &apos;copy_sys_info=calloc(1,sizeof(*copy_sys_info))&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="107" column="33" info="Assuming that condition &apos;copy_sys_info!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." verbose="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." cwe="476">
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="111" column="19" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="106" column="56" info="Assignment &apos;copy_sys_info=calloc(1,sizeof(*copy_sys_info))&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="107" column="33" info="Assuming that condition &apos;copy_sys_info!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." verbose="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." cwe="476">
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="112" column="14" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="106" column="56" info="Assignment &apos;copy_sys_info=calloc(1,sizeof(*copy_sys_info))&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="107" column="33" info="Assuming that condition &apos;copy_sys_info!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." verbose="Either the condition &apos;copy_sys_info!=NULL&apos; is redundant or there is possible null pointer dereference: copy_sys_info." cwe="476">
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="113" column="7" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="106" column="56" info="Assignment &apos;copy_sys_info=calloc(1,sizeof(*copy_sys_info))&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/mac_rrc_ul_direct.c" line="107" column="33" info="Assuming that condition &apos;copy_sys_info!=NULL&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/NR_MAC_gNB/main.c" line="310" column="18" info="Shadow variable"/>
            <location file="openair2/LAYER2/NR_MAC_gNB/main.c" line="219" column="19" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_read_state_g&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_read_state_g&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_fifo.c" line="417" column="26"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;prose_addr_len&apos; shadows outer variable" verbose="Local variable &apos;prose_addr_len&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_fifo.c" line="665" column="13" info="Shadow variable"/>
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_fifo.c" line="637" column="13" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;key&apos; is assigned a value that is never used." verbose="Variable &apos;key&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_fifo.c" line="203" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="171" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="227" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_header_len&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_header_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="228" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_tailer_len&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_tailer_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="229" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_pdu_size&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_pdu_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="230" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_header_len&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_header_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="580" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_tailer_len&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_tailer_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="581" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_hfn_for_count&apos; can be reduced." verbose="The scope of the variable &apos;rx_hfn_for_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="592" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_sn_for_count&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_sn_for_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="593" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;security_ok&apos; can be reduced." verbose="The scope of the variable &apos;security_ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="594" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;drb_sn&apos; can be reduced." verbose="The scope of the variable &apos;drb_sn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1550" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;srb_sn&apos; can be reduced." verbose="The scope of the variable &apos;srb_sn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1551" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;drb_report&apos; can be reduced." verbose="The scope of the variable &apos;drb_report&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1552" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_compression_profile&apos; can be reduced." verbose="The scope of the variable &apos;header_compression_profile&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1554" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1563" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1563" column="9"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;security_modeP&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;security_modeP&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="2119" column="23" info="Unsigned positive"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;security_modeP&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;security_modeP&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="2212" column="29" info="Unsigned positive"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1494" column="11" info="Shadow variable"/>
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1491" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pdcp_header_len&apos; is assigned a value that is never used." verbose="Variable &apos;pdcp_header_len&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="228" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pdcp_tailer_len&apos; is assigned a value that is never used." verbose="Variable &apos;pdcp_tailer_len&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="229" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pdcp_pdu_size&apos; is assigned a value that is never used." verbose="Variable &apos;pdcp_pdu_size&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="230" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rlc_status&apos; is assigned a value that is never used." verbose="Variable &apos;rlc_status&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="301" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rlc_status&apos; is assigned a value that is never used." verbose="Variable &apos;rlc_status&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="304" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pdcp_tailer_len&apos; is assigned a value that is never used." verbose="Variable &apos;pdcp_tailer_len&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="581" column="32"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pdcp_uid&apos; is assigned a value that is never used." verbose="Variable &apos;pdcp_uid&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1124" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;key&apos; is assigned a value that is never used." verbose="Variable &apos;key&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1489" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cnt&apos; is assigned a value that is never used." verbose="Variable &apos;cnt&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1553" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;h_rc&apos; is assigned a value that is never used." verbose="Variable &apos;h_rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="1837" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;h_rc&apos; is assigned a value that is never used." verbose="Variable &apos;h_rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp.c" line="2208" column="14"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;nb_inst_ue&gt;0&apos; is always true" verbose="Condition &apos;nb_inst_ue&gt;0&apos; is always true" cwe="571">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="121" column="19" info="Condition &apos;nb_inst_ue&gt;0&apos; is always true"/>
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="100" column="17" info="Assignment &apos;nb_inst_ue=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;eNB_flag&apos; is always false" verbose="Condition &apos;eNB_flag&apos; is always false" cwe="570">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="237" column="15" info="Condition &apos;eNB_flag&apos; is always false"/>
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="182" column="52" info="Assignment &apos;eNB_flag=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="179" column="34"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_inst_enb*sizeof(uint32_t)&apos; to function malloc is always 4" verbose="Argument &apos;nb_inst_enb*sizeof(uint32_t)&apos; to function malloc is always 4" cwe="570">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="108" column="54" info="Argument &apos;nb_inst_enb*sizeof(uint32_t)&apos; to function malloc is always 4"/>
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="99" column="17" info="Assignment &apos;nb_inst_enb=1&apos;, assigned value is 1"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;nb_inst_ue*sizeof(uint32_t)&apos; to function malloc is always 4" verbose="Argument &apos;nb_inst_ue*sizeof(uint32_t)&apos; to function malloc is always 4" cwe="570">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="123" column="53" info="Argument &apos;nb_inst_ue*sizeof(uint32_t)&apos; to function malloc is always 4"/>
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="100" column="17" info="Assignment &apos;nb_inst_ue=1&apos;, assigned value is 1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="179" column="50"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;module_id&apos; is assigned a value that is never used." verbose="Variable &apos;module_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_netlink.c" line="183" column="50"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;seq_num&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;seq_num&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/LAYER2/PDCP_v10.1.0/pdcp_sequence_manager.c" line="81" column="15" info="Unsigned positive"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ue_list&apos; can be reduced." verbose="The scope of the variable &apos;ue_list&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_timer_thread.c" line="39" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ue_count&apos; can be reduced." verbose="The scope of the variable &apos;ue_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_timer_thread.c" line="40" column="24"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;rrc_buffer_p!=NULL&apos; is redundant or there is possible null pointer dereference: rrc_buffer_p." verbose="Either the condition &apos;rrc_buffer_p!=NULL&apos; is redundant or there is possible null pointer dereference: rrc_buffer_p." cwe="476">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="778" column="12" info="Null pointer dereference"/>
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="776" column="40" info="Assignment &apos;rrc_buffer_p=itti_malloc(TASK_PDCP_UE,TASK_RRC_NRUE,size)&apos;, assigned value is 0"/>
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="777" column="30" info="Assuming that condition &apos;rrc_buffer_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="650" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="129" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="297" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="414" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="472" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;has_ue&apos; can be reduced." verbose="The scope of the variable &apos;has_ue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="475" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_srb&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_srb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="807" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdcp_drb&apos; can be reduced." verbose="The scope of the variable &apos;pdcp_drb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_pdcp/nr_pdcp_oai_api.c" line="853" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/nr_rlc_entity_um.c" line="71" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/nr_rlc_entity_um.c" line="120" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur&apos; can be reduced." verbose="The scope of the variable &apos;cur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/nr_rlc_sdu.c" line="119" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;maxsize&apos; can be reduced." verbose="The scope of the variable &apos;maxsize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/nr_rlc_oai_api.c" line="192" column="7"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;test[1]&apos; accessed at index 2, which is out of bounds." verbose="Array &apos;test[1]&apos; accessed at index 2, which is out of bounds." cwe="788">
            <location file="openair2/LAYER2/nr_rlc/tests/test.c" line="459" column="11" info="Array index out of bounds"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size&apos; can be reduced." verbose="The scope of the variable &apos;size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/tests/test.c" line="221" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CC_id&apos; is assigned a value that is never used." verbose="Variable &apos;CC_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/openair2_proc.c" line="56" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sdu_size&apos; can be reduced." verbose="The scope of the variable &apos;sdu_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_um.c" line="352" column="7"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="151" column="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;maxsize&apos; can be reduced." verbose="The scope of the variable &apos;maxsize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="125" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rlc_am&apos; can be reduced." verbose="The scope of the variable &apos;rlc_am&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="538" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rlc_am&apos; can be reduced." verbose="The scope of the variable &apos;rlc_am&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="633" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rlc_um&apos; can be reduced." verbose="The scope of the variable &apos;rlc_um&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="710" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="806" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rlc_um&apos; can be reduced." verbose="The scope of the variable &apos;rlc_um&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="871" column="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;expected_next_frame&apos; can be reduced." verbose="The scope of the variable &apos;expected_next_frame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="989" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;expected_next_subframe&apos; can be reduced." verbose="The scope of the variable &apos;expected_next_subframe&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="990" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;drb_id&apos; is assigned a value that is never used." verbose="Variable &apos;drb_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="830" column="42"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lc_id&apos; is assigned a value that is never used." verbose="Variable &apos;lc_id&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/LAYER2/rlc_v2/rlc_oai_api.c" line="831" column="42"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;test[1]&apos; accessed at index 2, which is out of bounds." verbose="Array &apos;test[1]&apos; accessed at index 2, which is out of bounds." cwe="788">
            <location file="openair2/LAYER2/rlc_v2/tests/test.c" line="401" column="11" info="Array index out of bounds"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size&apos; can be reduced." verbose="The scope of the variable &apos;size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/tests/test.c" line="179" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="92" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vr_r&apos; can be reduced." verbose="The scope of the variable &apos;vr_r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="233" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="440" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sn&apos; can be reduced." verbose="The scope of the variable &apos;sn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="547" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdu_size&apos; can be reduced." verbose="The scope of the variable &apos;pdu_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="549" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="908" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1027" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_byte&apos; can be reduced." verbose="The scope of the variable &apos;last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1030" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1031" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;so_start&apos; can be reduced." verbose="The scope of the variable &apos;so_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1032" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;so_end&apos; can be reduced." verbose="The scope of the variable &apos;so_end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1033" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdu_header_size&apos; can be reduced." verbose="The scope of the variable &apos;pdu_header_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1364" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sdu_bytes_to_take&apos; can be reduced." verbose="The scope of the variable &apos;sdu_bytes_to_take&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1367" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur&apos; can be reduced." verbose="The scope of the variable &apos;cur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1714" column="25"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;pdu_size&apos; shadows outer function" verbose="Local variable &apos;pdu_size&apos; shadows outer function" cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="549" column="7" info="Shadow variable"/>
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="801" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;header_size&apos; shadows outer function" verbose="Local variable &apos;header_size&apos; shadows outer function" cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="803" column="7" info="Shadow variable"/>
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="833" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;header_size&apos; shadows outer function" verbose="Local variable &apos;header_size&apos; shadows outer function" cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1166" column="24" info="Shadow variable"/>
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="833" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;pdu_size&apos; shadows outer function" verbose="Local variable &apos;pdu_size&apos; shadows outer function" cwe="398">
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="1285" column="24" info="Shadow variable"/>
            <location file="openair2/LAYER2/rlc_v2/rlc_entity_am.c" line="801" column="12" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/MCE_APP/mce_app.c" line="72" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/MCE_APP/mce_app.c" line="153" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/MCE_APP/mce_app.c" line="327" column="35"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;traffic_type&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;traffic_type&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/classifier.c" line="160" column="22" info="traffic_type is overwritten"/>
            <location file="openair2/NETWORK_DRIVER/LITE/classifier.c" line="153" column="20" info="traffic_type is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;traffic_type&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;traffic_type&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/classifier.c" line="174" column="22" info="traffic_type is overwritten"/>
            <location file="openair2/NETWORK_DRIVER/LITE/classifier.c" line="170" column="20" info="traffic_type is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mce_port_for_m2c&apos; can be reduced." verbose="The scope of the variable &apos;mce_port_for_m2c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/MCE_APP/mce_config.c" line="67" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mce_port_for_m3c&apos; is assigned a value that is never used." verbose="Variable &apos;mce_port_for_m3c&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/MCE_APP/mce_config.c" line="68" column="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;protocol&apos; is assigned a value that is never used." verbose="Variable &apos;protocol&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/common.c" line="200" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;priv&apos; is assigned a value that is never used." verbose="Variable &apos;priv&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/common.c" line="438" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mce_port_for_m2c&apos; is assigned a value that is never used." verbose="Variable &apos;mce_port_for_m2c&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/MCE_APP/mce_config.c" line="126" column="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mce_port_for_m3c&apos; is assigned a value that is never used." verbose="Variable &apos;mce_port_for_m3c&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/MCE_APP/mce_config.c" line="127" column="53"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="414" column="10" info="err is overwritten"/>
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="399" column="10" info="err is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="454" column="10" info="err is overwritten"/>
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="441" column="10" info="err is assigned"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/common.c" line="359" column="7"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="490" column="10" info="err is overwritten"/>
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="478" column="10" info="err is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="80" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mpls_outlabel&apos; can be reduced." verbose="The scope of the variable &apos;mpls_outlabel&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="154" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mpls_inlabel&apos; can be reduced." verbose="The scope of the variable &apos;mpls_inlabel&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="155" column="44"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="100" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="369" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="414" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="454" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="490" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="494" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: done" verbose="Unused variable: done" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="117" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rc" verbose="Unused variable: rc" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="118" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: meas_polling_counter" verbose="Unused variable: meas_polling_counter" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="119" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: readfds" verbose="Unused variable: readfds" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="120" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tv" verbose="Unused variable: tv" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="121" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="122" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buffer" verbose="Unused variable: buffer" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="124" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: index" verbose="Unused variable: index" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="147" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: addr_str" verbose="Unused variable: addr_str" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/RB_TOOL/rb_tool.c" line="156" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: addr" verbose="Unused variable: addr" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/common.c" line="87" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;priv&apos; can be reduced." verbose="The scope of the variable &apos;priv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="178" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inst&apos; can be reduced." verbose="The scope of the variable &apos;inst&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="179" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cxi&apos; can be reduced." verbose="The scope of the variable &apos;cxi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="361" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="363" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;priv&apos; can be reduced." verbose="The scope of the variable &apos;priv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="504" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cxi&apos; is assigned a value that is never used." verbose="Variable &apos;cxi&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="98" column="6"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;priv&apos; is assigned a value that is never used." verbose="Variable &apos;priv&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="184" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;priv&apos; is assigned a value that is never used." verbose="Variable &apos;priv&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/device.c" line="544" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/LITE/netlink.c" line="158" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/nr_rlc_entity_am.c" line="114" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_last_byte&apos; can be reduced." verbose="The scope of the variable &apos;new_last_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/nr_rlc_entity_am.c" line="163" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ln&apos; can be reduced." verbose="The scope of the variable &apos;ln&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/LAYER2/nr_rlc/nr_rlc_entity_am.c" line="1337" column="24"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: addr" verbose="Unused variable: addr" cwe="563">
            <location file="openair2/NETWORK_DRIVER/LITE/common.c" line="80" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mpls_outlabel&apos; can be reduced." verbose="The scope of the variable &apos;mpls_outlabel&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/RB_TOOL/rb_tool.c" line="156" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mpls_inlabel&apos; can be reduced." verbose="The scope of the variable &apos;mpls_inlabel&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/RB_TOOL/rb_tool.c" line="156" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;addr_str&apos; can be reduced." verbose="The scope of the variable &apos;addr_str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/RB_TOOL/rb_tool.c" line="157" column="8"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;udph!=NULL&apos; is always true" verbose="Condition &apos;udph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="449" column="11" info="Condition &apos;udph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="441" column="11" info="Assuming that condition &apos;udph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;tcph!=NULL&apos; is always true" verbose="Condition &apos;tcph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="471" column="11" info="Condition &apos;tcph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="463" column="11" info="Assuming that condition &apos;tcph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;icmph!=NULL&apos; is always true" verbose="Condition &apos;icmph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="493" column="12" info="Condition &apos;icmph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="485" column="12" info="Assuming that condition &apos;icmph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;iph!=NULL&apos; is always true" verbose="Condition &apos;iph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="574" column="10" info="Condition &apos;iph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="565" column="10" info="Assuming that condition &apos;iph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;iph!=NULL&apos; is always true" verbose="Condition &apos;iph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="625" column="10" info="Condition &apos;iph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/LITE/tool.c" line="616" column="10" info="Assuming that condition &apos;iph==NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/TESTBENCH/testbench.c" line="73" column="7"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pdcp_data_req_header_t::rb_id&apos; is never used." verbose="struct member &apos;pdcp_data_req_header_t::rb_id&apos; is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/TESTBENCH/testbench.c" line="34" column="23"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pdcp_data_req_header_t::data_size&apos; is never used." verbose="struct member &apos;pdcp_data_req_header_t::data_size&apos; is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/TESTBENCH/testbench.c" line="35" column="24"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pdcp_data_req_header_t::inst&apos; is never used." verbose="struct member &apos;pdcp_data_req_header_t::inst&apos; is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/TESTBENCH/testbench.c" line="36" column="13"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pdcp_data_ind_header_t::rb_id&apos; is never used." verbose="struct member &apos;pdcp_data_ind_header_t::rb_id&apos; is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/TESTBENCH/testbench.c" line="40" column="23"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pdcp_data_ind_header_t::data_size&apos; is never used." verbose="struct member &apos;pdcp_data_ind_header_t::data_size&apos; is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/TESTBENCH/testbench.c" line="41" column="24"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pdcp_data_ind_header_t::inst&apos; is never used." verbose="struct member &apos;pdcp_data_ind_header_t::inst&apos; is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/TESTBENCH/testbench.c" line="42" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cxi&apos; can be reduced." verbose="The scope of the variable &apos;cxi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="373" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;addr&apos; can be reduced." verbose="The scope of the variable &apos;addr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="374" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cxi&apos; can be reduced." verbose="The scope of the variable &apos;cxi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="451" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;addr&apos; can be reduced." verbose="The scope of the variable &apos;addr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="452" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;daddr&apos; can be reduced." verbose="The scope of the variable &apos;daddr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="453" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;classref&apos; can be reduced." verbose="The scope of the variable &apos;classref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="579" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ipv&apos; can be reduced." verbose="The scope of the variable &apos;ipv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/common.c" line="54" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;protocol&apos; can be reduced." verbose="The scope of the variable &apos;protocol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/common.c" line="59" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;protocol&apos; is assigned a value that is never used." verbose="Variable &apos;protocol&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/common.c" line="160" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;addr&apos; is assigned a value that is never used." verbose="Variable &apos;addr&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="484" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;protocolh&apos; is assigned a value that is never used." verbose="Variable &apos;protocolh&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="615" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;protocolh&apos; is assigned a value that is never used." verbose="Variable &apos;protocolh&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="633" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;version&apos; is assigned a value that is never used." verbose="Variable &apos;version&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="656" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;classref&apos; is assigned a value that is never used." verbose="Variable &apos;classref&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="664" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;classref&apos; is assigned a value that is never used." verbose="Variable &apos;classref&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="686" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;no_connection&apos; is assigned a value that is never used." verbose="Variable &apos;no_connection&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="745" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cxi&apos; can be reduced." verbose="The scope of the variable &apos;cxi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/device.c" line="122" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;priv&apos; can be reduced." verbose="The scope of the variable &apos;priv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/device.c" line="124" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inst&apos; can be reduced." verbose="The scope of the variable &apos;inst&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/device.c" line="125" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cxi&apos; can be reduced." verbose="The scope of the variable &apos;cxi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/device.c" line="304" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dscpi&apos; can be reduced." verbose="The scope of the variable &apos;dscpi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/device.c" line="304" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;priv&apos; can be reduced." verbose="The scope of the variable &apos;priv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/device.c" line="404" column="20"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair2/NETWORK_DRIVER/MESH/common.c" line="334" column="7"/>
        </error>
        <error id="AssignmentAddressToInteger" severity="portability" msg="Assigning a pointer to an integer is not portable." verbose="Assigning a pointer to an integer (int/long/etc) is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit address to 32-bit integer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/NETWORK_DRIVER/MESH/common.c" line="115" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/ioctl.c" line="692" column="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;bytes_read &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/mesh.c" line="814" column="17"/>
            <location file="openair2/NETWORK_DRIVER/MESH/mesh.c" line="799" column="18" info="&apos;bytes_read&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;bytes_read &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/mesh.c" line="946" column="17"/>
            <location file="openair2/NETWORK_DRIVER/MESH/mesh.c" line="940" column="18" info="&apos;bytes_read&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sig_category&apos; can be reduced." verbose="The scope of the variable &apos;sig_category&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/mesh.c" line="516" column="11"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;daddr&apos; is accessed at non-zero index." verbose="The address of local variable &apos;daddr&apos; is accessed at non-zero index." cwe="758">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="467" column="39"/>
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="467" column="32" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;daddr&apos; is accessed at non-zero index." verbose="The address of local variable &apos;daddr&apos; is accessed at non-zero index." cwe="758">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="468" column="39"/>
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="468" column="32" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &apos;daddr&apos; is accessed at non-zero index." verbose="The address of local variable &apos;daddr&apos; is accessed at non-zero index." cwe="758">
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="469" column="39"/>
            <location file="openair2/NETWORK_DRIVER/MESH/classifier.c" line="469" column="32" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/MESH/netlink.c" line="161" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;protocol&apos; is assigned a value that is never used." verbose="Variable &apos;protocol&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/UE_IP/common.c" line="158" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;priv_p&apos; is assigned a value that is never used." verbose="Variable &apos;priv_p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/UE_IP/common.c" line="349" column="10"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair2/NETWORK_DRIVER/UE_IP/common.c" line="240" column="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;udph!=NULL&apos; is always true" verbose="Condition &apos;udph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="486" column="11" info="Condition &apos;udph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="478" column="11" info="Assuming that condition &apos;udph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;tcph!=NULL&apos; is always true" verbose="Condition &apos;tcph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="508" column="11" info="Condition &apos;tcph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="500" column="11" info="Assuming that condition &apos;tcph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;icmph!=NULL&apos; is always true" verbose="Condition &apos;icmph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="530" column="12" info="Condition &apos;icmph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="522" column="12" info="Assuming that condition &apos;icmph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;iph!=NULL&apos; is always true" verbose="Condition &apos;iph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="611" column="10" info="Condition &apos;iph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="602" column="10" info="Assuming that condition &apos;iph==NULL&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;iph!=NULL&apos; is always true" verbose="Condition &apos;iph!=NULL&apos; is always true" cwe="571">
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="662" column="10" info="Condition &apos;iph!=NULL&apos; is always true"/>
            <location file="openair2/NETWORK_DRIVER/MESH/tool.c" line="653" column="10" info="Assuming that condition &apos;iph==NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/UE_IP/netlink.c" line="165" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;priv_p&apos; can be reduced." verbose="The scope of the variable &apos;priv_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/UE_IP/device.c" line="176" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inst&apos; can be reduced." verbose="The scope of the variable &apos;inst&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NETWORK_DRIVER/UE_IP/device.c" line="177" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cxi&apos; is assigned a value that is never used." verbose="Variable &apos;cxi&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/UE_IP/device.c" line="84" column="6"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;priv_p&apos; is assigned a value that is never used." verbose="Variable &apos;priv_p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NETWORK_DRIVER/UE_IP/device.c" line="181" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nfapi_nr_cell_param_test.config_tlvs_to_report_list&apos; is assigned a value that is never used." verbose="Variable &apos;nfapi_nr_cell_param_test.config_tlvs_to_report_list&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NR_PHY_INTERFACE/nfapi_5g_test.c" line="13" column="57"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nfapi_nr_cell_param_test.phy_state&apos; is assigned a value that is never used." verbose="Variable &apos;nfapi_nr_cell_param_test.phy_state&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NR_PHY_INTERFACE/nfapi_5g_test.c" line="14" column="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nfapi_nr_cell_param_test.release_capability&apos; is assigned a value that is never used." verbose="Variable &apos;nfapi_nr_cell_param_test.release_capability&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NR_PHY_INTERFACE/nfapi_5g_test.c" line="15" column="49"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nfapi_nr_cell_param_test.skip_blank_dl_config&apos; is assigned a value that is never used." verbose="Variable &apos;nfapi_nr_cell_param_test.skip_blank_dl_config&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NR_PHY_INTERFACE/nfapi_5g_test.c" line="16" column="51"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nfapi_nr_cell_param_test.skip_blank_ul_config&apos; is assigned a value that is never used." verbose="Variable &apos;nfapi_nr_cell_param_test.skip_blank_ul_config&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NR_PHY_INTERFACE/nfapi_5g_test.c" line="17" column="51"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bler_val&apos; is assigned a value that is never used." verbose="Variable &apos;bler_val&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/NR_UE_PHY_INTERFACE/NR_Packet_Drop.c" line="62" column="18"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758">
            <location file="openair2/PHY_INTERFACE/queue_t.c" line="34" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/PHY_INTERFACE/IF_Module.c" line="26" column="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;SNRtimes10&lt;-640&apos; is always false" verbose="Condition &apos;SNRtimes10&lt;-640&apos; is always false" cwe="570">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="127" column="18" info="Condition &apos;SNRtimes10&lt;-640&apos; is always false"/>
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="125" column="20" info="Assignment &apos;SNRtimes10=640&apos;, assigned value is 640"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;SNRtimes10&gt;635&apos; is always true" verbose="Condition &apos;SNRtimes10&gt;635&apos; is always true" cwe="571">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="129" column="23" info="Condition &apos;SNRtimes10&gt;635&apos; is always true"/>
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="125" column="20" info="Assignment &apos;SNRtimes10=640&apos;, assigned value is 640"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;SNRtimes10&lt;-640&apos; is always false" verbose="Condition &apos;SNRtimes10&lt;-640&apos; is always false" cwe="570">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="168" column="18" info="Condition &apos;SNRtimes10&lt;-640&apos; is always false"/>
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="167" column="20" info="Assignment &apos;SNRtimes10=640&apos;, assigned value is 640"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;SNRtimes10&gt;635&apos; is always true" verbose="Condition &apos;SNRtimes10&gt;635&apos; is always true" cwe="571">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="170" column="23" info="Condition &apos;SNRtimes10&gt;635&apos; is always true"/>
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="167" column="20" info="Assignment &apos;SNRtimes10=640&apos;, assigned value is 640"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;SNRtimes10&lt;-640&apos; is always false" verbose="Condition &apos;SNRtimes10&lt;-640&apos; is always false" cwe="570">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="404" column="18" info="Condition &apos;SNRtimes10&lt;-640&apos; is always false"/>
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="402" column="20" info="Assignment &apos;SNRtimes10=640&apos;, assigned value is 640"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;SNRtimes10&gt;635&apos; is always true" verbose="Condition &apos;SNRtimes10&gt;635&apos; is always true" cwe="571">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="406" column="23" info="Condition &apos;SNRtimes10&gt;635&apos; is always true"/>
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="402" column="20" info="Assignment &apos;SNRtimes10=640&apos;, assigned value is 640"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ulsch_buffer&apos; can be reduced." verbose="The scope of the variable &apos;ulsch_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="492" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ulsch_buffer&apos; can be reduced." verbose="The scope of the variable &apos;ulsch_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="543" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ulsch_buffer&apos; can be reduced." verbose="The scope of the variable &apos;ulsch_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="586" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ulsch_buffer&apos; can be reduced." verbose="The scope of the variable &apos;ulsch_buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="624" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="1149" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count_sent&apos; can be reduced." verbose="The scope of the variable &apos;count_sent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="1461" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bler_val&apos; is assigned a value that is never used." verbose="Variable &apos;bler_val&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/PHY_INTERFACE/phy_stub_UE.c" line="2041" column="18"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;band_freq::ul_minfreq&apos; is never used." verbose="struct member &apos;band_freq::ul_minfreq&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="165" column="17"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;band_freq::ul_maxfreq&apos; is never used." verbose="struct member &apos;band_freq::ul_maxfreq&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="165" column="29"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;earfcn::dl_offmin&apos; is never used." verbose="struct member &apos;earfcn::dl_offmin&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="217" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_GTPV1U.c" line="54" column="34"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;earfcn::dl_offmax&apos; is never used." verbose="struct member &apos;earfcn::dl_offmax&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="217" column="18"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;earfcn::ul_flow&apos; is never used." verbose="struct member &apos;earfcn::ul_flow&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="218" column="17"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;earfcn::ul_off&apos; is never used." verbose="struct member &apos;earfcn::ul_off&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="219" column="7"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;earfcn::ul_offmin&apos; is never used." verbose="struct member &apos;earfcn::ul_offmin&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="220" column="7"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;earfcn::ul_offmax&apos; is never used." verbose="struct member &apos;earfcn::ul_offmax&apos; is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_common.c" line="220" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/NR_UE_PHY_INTERFACE/NR_IF_Module.c" line="1314" column="7"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;pack_len&apos; is less than zero." verbose="The unsigned expression &apos;pack_len&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair2/NR_UE_PHY_INTERFACE/NR_IF_Module.c" line="782" column="18" info="Unsigned less than zero"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UL_INFO&apos; shadows outer variable" verbose="Local variable &apos;UL_INFO&apos; shadows outer variable" cwe="398">
            <location file="openair2/NR_UE_PHY_INTERFACE/NR_IF_Module.c" line="596" column="17" info="Shadow variable"/>
            <location file="openair2/NR_UE_PHY_INTERFACE/NR_IF_Module.c" line="53" column="11" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;UL_INFO&apos; shadows outer variable" verbose="Local variable &apos;UL_INFO&apos; shadows outer variable" cwe="398">
            <location file="openair2/NR_UE_PHY_INTERFACE/NR_IF_Module.c" line="605" column="17" info="Shadow variable"/>
            <location file="openair2/NR_UE_PHY_INTERFACE/NR_IF_Module.c" line="53" column="11" info="Shadowed declaration"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair2/RRC/LTE/utils.c" line="78" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cr_1510.sk_Counter_r15&apos; is assigned a value that is never used." verbose="Variable &apos;cr_1510.sk_Counter_r15&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB_endc.c" line="188" column="26"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair2/RRC/NAS/nas_config.c" line="267" column="6" info="Second condition"/>
            <location file="openair2/RRC/NAS/nas_config.c" line="264" column="6" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msgreq&apos; can be reduced." verbose="The scope of the variable &apos;msgreq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NAS/rb_config.c" line="121" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msgreq_class&apos; can be reduced." verbose="The scope of the variable &apos;msgreq_class&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NAS/rb_config.c" line="122" column="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/NAS/rb_config.c" line="182" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/NAS/rb_config.c" line="221" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/NAS/rb_config.c" line="255" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;print_keys&apos; can be reduced." verbose="The scope of the variable &apos;print_keys&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="492" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced." verbose="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="809" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;srb_id&apos; can be reduced." verbose="The scope of the variable &apos;srb_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="811" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inde_list&apos; can be reduced." verbose="The scope of the variable &apos;inde_list&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="875" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="876" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inde_list&apos; can be reduced." verbose="The scope of the variable &apos;inde_list&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1162" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e_rab_done&apos; can be reduced." verbose="The scope of the variable &apos;e_rab_done&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1165" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1166" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1324" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;erab&apos; can be reduced." verbose="The scope of the variable &apos;erab&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1551" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1552" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b_existed&apos; can be reduced." verbose="The scope of the variable &apos;b_existed&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1553" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_existed&apos; can be reduced." verbose="The scope of the variable &apos;is_existed&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1553" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;xid&apos; can be reduced." verbose="The scope of the variable &apos;xid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1554" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e_rab_release_drb&apos; can be reduced." verbose="The scope of the variable &apos;e_rab_release_drb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1555" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e_rab_done&apos; can be reduced." verbose="The scope of the variable &apos;e_rab_done&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1933" column="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="1997" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e_rab_notmodify_index&apos; can be reduced." verbose="The scope of the variable &apos;e_rab_notmodify_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="2155" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;instance&apos; is assigned a value that is never used." verbose="Variable &apos;instance&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB_S1AP.c" line="164" column="23"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;split_cfg&apos; is always false" verbose="Condition &apos;split_cfg&apos; is always false" cwe="570">
            <location file="openair2/RRC/LTE/rrc_eNB_M2AP.c" line="1360" column="5" info="Condition &apos;split_cfg&apos; is always false"/>
            <location file="openair2/RRC/LTE/rrc_eNB_M2AP.c" line="1354" column="16" info="Assignment &apos;split_cfg=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;split_cfg&apos; can be reduced." verbose="The scope of the variable &apos;split_cfg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB_M2AP.c" line="1354" column="6"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: securityConfig" verbose="Memory leak: securityConfig" cwe="401">
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="774" column="30"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: ie" verbose="Memory leak: ie" cwe="401">
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="1647" column="5"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req_freq!=NULL&apos; is redundant or there is possible null pointer dereference: req_freq." verbose="Either the condition &apos;req_freq!=NULL&apos; is redundant or there is possible null pointer dereference: req_freq." cwe="476">
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="611" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="609" column="36" info="Assignment &apos;req_freq=calloc(1,sizeof(*req_freq))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="610" column="24" info="Assuming that condition &apos;req_freq!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;req_freq!=NULL&apos; is redundant or there is possible null pointer dereference: req_freq." verbose="Either the condition &apos;req_freq!=NULL&apos; is redundant or there is possible null pointer dereference: req_freq." cwe="476">
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="612" column="15" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="609" column="36" info="Assignment &apos;req_freq=calloc(1,sizeof(*req_freq))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/MESSAGES/asn1_msg.c" line="610" column="24" info="Assuming that condition &apos;req_freq!=NULL&apos; is not redundant"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="portability" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686">
            <location file="openair2/RRC/NR/rrc_gNB_du.c" line="505" column="3"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;scc&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;scc&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="295" column="7" info="scc is overwritten"/>
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="287" column="31" info="scc is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="172" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;UE_NR_Capability_xer&apos; can be reduced." verbose="The scope of the variable &apos;UE_NR_Capability_xer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="178" column="10"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="350" column="16" info="Shadow variable"/>
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="172" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="386" column="16" info="Shadow variable"/>
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="172" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="453" column="14" info="Shadow variable"/>
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="172" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmp.rnti&apos; is assigned a value that is never used." verbose="Variable &apos;tmp.rnti&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="511" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmp.from_gnb&apos; is assigned a value that is never used." verbose="Variable &apos;tmp.from_gnb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/NR/rrc_gNB_nsa.c" line="512" column="15"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;print_keys==1&apos; is always true" verbose="Condition &apos;print_keys==1&apos; is always true" cwe="571">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="194" column="20" info="Condition &apos;print_keys==1&apos; is always true"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;buf!=NULL&apos; is redundant or there is possible null pointer dereference: buf." verbose="Either the condition &apos;buf!=NULL&apos; is redundant or there is possible null pointer dereference: buf." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="804" column="16" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="802" column="30" info="Assignment &apos;buf=malloc(nas-&gt;size)&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="803" column="25" info="Assuming that condition &apos;buf!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1276" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1273" column="53" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1274" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1277" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1273" column="53" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1274" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1278" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1273" column="53" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1274" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1279" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1273" column="53" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1274" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1280" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1273" column="53" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1274" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;sess-&gt;status&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;sess-&gt;status&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1065" column="20" info="sess-&gt;status is overwritten"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1061" column="20" info="sess-&gt;status is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;sess-&gt;param.pdusession_id&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;sess-&gt;param.pdusession_id&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1066" column="33" info="sess-&gt;param.pdusession_id is overwritten"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1062" column="33" info="sess-&gt;param.pdusession_id is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;sess-&gt;cause&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;sess-&gt;cause&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1067" column="19" info="sess-&gt;cause is overwritten"/>
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="1063" column="19" info="sess-&gt;cause is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;print_keys&apos; can be reduced." verbose="The scope of the variable &apos;print_keys&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="182" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB_NGAP.c" line="796" column="17"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;ssb_ta_index == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair2/RRC/NR_UE/rrc_sl_preconfig.c" line="542" column="20"/>
            <location file="openair2/RRC/NR_UE/rrc_sl_preconfig.c" line="526" column="42" info="&apos;ssb_ta_index&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slss_id&apos; can be reduced." verbose="The scope of the variable &apos;slss_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR_UE/rrc_sl_preconfig.c" line="526" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sl_mib_payload&apos; can be reduced." verbose="The scope of the variable &apos;sl_mib_payload&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR_UE/rrc_sl_preconfig.c" line="530" column="11"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;enable_ciphering&apos; is always false" verbose="Condition &apos;enable_ciphering&apos; is always false" cwe="570">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="1009" column="7" info="Condition &apos;enable_ciphering&apos; is always false"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="982" column="26" info="Assignment &apos;enable_ciphering=0&apos;, assigned value is 0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;enc_rval&apos; shadows outer variable" verbose="Local variable &apos;enc_rval&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/NR_UE/rrc_UE.c" line="1898" column="22" info="Shadow variable"/>
            <location file="openair2/RRC/NR_UE/rrc_UE.c" line="1865" column="18" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;perm_num&apos; can be reduced." verbose="The scope of the variable &apos;perm_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/CLI/cli.c" line="140" column="7"/>
        </error>
        <error id="shiftTooManyBits" severity="warning" msg="Shifting 32-bit value by 32 bits is undefined behaviour. See condition at line 150." verbose="Shifting 32-bit value by 32 bits is undefined behaviour. See condition at line 150." cwe="758">
            <location file="openair2/UTIL/CLI/cli.c" line="155" column="28" info="Shift"/>
            <location file="openair2/UTIL/CLI/cli.c" line="150" column="34" info="Assuming that condition &apos;perm_num&gt;31&apos; is not redundant"/>
        </error>
        <error id="integerOverflowCond" severity="warning" msg="Either the condition &apos;perm_num&gt;31&apos; is redundant or there is signed integer overflow for expression &apos;1&lt;&lt;(perm_num+1)&apos;." verbose="Either the condition &apos;perm_num&gt;31&apos; is redundant or there is signed integer overflow for expression &apos;1&lt;&lt;(perm_num+1)&apos;." cwe="190">
            <location file="openair2/UTIL/CLI/cli.c" line="155" column="28" info="Integer overflow"/>
            <location file="openair2/UTIL/CLI/cli.c" line="150" column="34" info="Assuming that condition &apos;perm_num&gt;31&apos; is not redundant"/>
        </error>
        <error id="integerOverflowCond" severity="warning" msg="Either the condition &apos;perm_num&gt;31&apos; is redundant or there is signed integer overflow for expression &apos;(1&lt;&lt;(perm_num+1))-1&apos;." verbose="Either the condition &apos;perm_num&gt;31&apos; is redundant or there is signed integer overflow for expression &apos;(1&lt;&lt;(perm_num+1))-1&apos;." cwe="190">
            <location file="openair2/UTIL/CLI/cli.c" line="155" column="45" info="Integer overflow"/>
            <location file="openair2/UTIL/CLI/cli.c" line="150" column="34" info="Assuming that condition &apos;perm_num&gt;31&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;command&apos; can be reduced." verbose="The scope of the variable &apos;command&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/CLI/cli_cmd.c" line="181" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;comp&apos; is assigned a value that is never used." verbose="Variable &apos;comp&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/CLI/cli_cmd.c" line="215" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;upperBound&apos; can be reduced." verbose="The scope of the variable &apos;upperBound&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/SDAP/nr_sdap/nr_sdap_entity.c" line="641" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_gnb&apos; is assigned a value that is never used." verbose="Variable &apos;is_gnb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/SDAP/nr_sdap/nr_sdap_entity.c" line="716" column="15"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: ue_context_modif_req.transmission_action_indicator" verbose="Memory leak: ue_context_modif_req.transmission_action_indicator" cwe="401">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="901" column="1"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;du!=NULL&apos; is redundant or there is possible null pointer dereference: du." verbose="Either the condition &apos;du!=NULL&apos; is redundant or there is possible null pointer dereference: du." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="550" column="7" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="545" column="50" info="Assignment &apos;du=get_du_for_ue(rrc,ue_p-&gt;rrc_ue_id)&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="546" column="16" info="Assuming that condition &apos;du!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pdu_e1!=NULL&apos; is redundant or there is possible null pointer dereference: pdu_e1." verbose="Either the condition &apos;pdu_e1!=NULL&apos; is redundant or there is possible null pointer dereference: pdu_e1." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2097" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2095" column="62" info="Assignment &apos;pdu_e1=find_or_next_pdu_session(&amp;req,pdu_ue-&gt;param.pdusession_id)&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2096" column="22" info="Assuming that condition &apos;pdu_e1!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pdu_e1!=NULL&apos; is redundant or there is possible null pointer dereference: pdu_e1." verbose="Either the condition &apos;pdu_e1!=NULL&apos; is redundant or there is possible null pointer dereference: pdu_e1." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2102" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2095" column="62" info="Assignment &apos;pdu_e1=find_or_next_pdu_session(&amp;req,pdu_ue-&gt;param.pdusession_id)&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2096" column="22" info="Assuming that condition &apos;pdu_e1!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;du!=NULL&apos; is redundant or there is possible null pointer dereference: du." verbose="Either the condition &apos;du!=NULL&apos; is redundant or there is possible null pointer dereference: du." cwe="476">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2124" column="7" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2119" column="50" info="Assignment &apos;du=get_du_for_ue(rrc,ue_p-&gt;ue_context.rrc_ue_id)&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2120" column="16" info="Assuming that condition &apos;du!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/MATH/oml.c" line="119" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/common.c" line="352" column="14"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;UE&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;UE&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="1200" column="6" info="UE is overwritten"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="1199" column="20" info="UE is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/common.c" line="373" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/common.c" line="398" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;toremove&apos; is assigned a value that is never used." verbose="Variable &apos;toremove&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/common.c" line="138" column="14"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;msg::padding&apos; is never used." verbose="struct member &apos;msg::padding&apos; is never used." cwe="563">
            <location file="openair2/RRC/NR_UE/rrc_UE.c" line="2093" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;servingCellRSRP&apos; can be reduced." verbose="The scope of the variable &apos;servingCellRSRP&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="1388" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;neighbourCellRSRP&apos; can be reduced." verbose="The scope of the variable &apos;neighbourCellRSRP&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="1389" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bestRsrp&apos; can be reduced." verbose="The scope of the variable &apos;bestRsrp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="1390" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eutra_index&apos; can be reduced." verbose="The scope of the variable &apos;eutra_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="1597" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2833" column="38"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;msg::buffer&apos; is never used." verbose="struct member &apos;msg::buffer&apos; is never used." cwe="563">
            <location file="openair2/RRC/NR_UE/rrc_UE.c" line="2094" column="17"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;dec_rval&apos; shadows outer variable" verbose="Local variable &apos;dec_rval&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2458" column="20" info="Shadow variable"/>
            <location file="openair2/RRC/NR/rrc_gNB.c" line="2444" column="18" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/job.c" line="43" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mobility_t&apos; can be reduced." verbose="The scope of the variable &apos;mobility_t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="89" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pair&apos; can be reduced." verbose="The scope of the variable &apos;pair&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="282" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pause_p&apos; can be reduced." verbose="The scope of the variable &apos;pause_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="283" column="10"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;omg_param_list[3]&apos; accessed at index 3, which is out of bounds." verbose="Array &apos;omg_param_list[3]&apos; accessed at index 3, which is out of bounds." cwe="788">
            <location file="openair2/UTIL/OMG/omg.c" line="934" column="33" info="Array index out of bounds"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;omg_param_list[3]&apos; accessed at index 3, which is out of bounds." verbose="Array &apos;omg_param_list[3]&apos; accessed at index 3, which is out of bounds." cwe="788">
            <location file="openair2/UTIL/OMG/omg.c" line="943" column="53" info="Array index out of bounds"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time_s&apos; can be reduced." verbose="The scope of the variable &apos;time_s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="783" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;full_name&apos; can be reduced." verbose="The scope of the variable &apos;full_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="785" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fdstr&apos; can be reduced." verbose="The scope of the variable &apos;fdstr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="787" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frames&apos; can be reduced." verbose="The scope of the variable &apos;frames&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="788" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_enb&apos; can be reduced." verbose="The scope of the variable &apos;num_enb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="789" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num_ue&apos; can be reduced." verbose="The scope of the variable &apos;num_ue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="790" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x_area&apos; can be reduced." verbose="The scope of the variable &apos;x_area&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="792" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y_area&apos; can be reduced." verbose="The scope of the variable &apos;y_area&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="793" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z_area&apos; can be reduced." verbose="The scope of the variable &apos;z_area&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/omg.c" line="794" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x_now&apos; is assigned a value that is never used." verbose="Variable &apos;x_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/rwalk.c" line="375" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y_now&apos; is assigned a value that is never used." verbose="Variable &apos;y_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/rwalk.c" line="375" column="29"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;time_s&apos; is assigned a value that is never used." verbose="Variable &apos;time_s&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/omg.c" line="882" column="12"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="openair2/UTIL/OMG/omg.c" line="778" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fname" verbose="Unused variable: fname" cwe="563">
            <location file="openair2/UTIL/OMG/omg.c" line="795" column="8"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: vname" verbose="Unused variable: vname" cwe="563">
            <location file="openair2/UTIL/OMG/omg.c" line="795" column="19"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j" cwe="563">
            <location file="openair2/UTIL/OMG/omg.c" line="924" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;loc_num&apos; can be reduced." verbose="The scope of the variable &apos;loc_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/rwp.c" line="95" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;loc_num&apos; can be reduced." verbose="The scope of the variable &apos;loc_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/rwp.c" line="188" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x_now&apos; is assigned a value that is never used." verbose="Variable &apos;x_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/rwp.c" line="355" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y_now&apos; is assigned a value that is never used." verbose="Variable &apos;y_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/rwp.c" line="355" column="29"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;PLMN_identity_info&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;PLMN_identity_info&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="424" column="22" info="PLMN_identity_info is overwritten"/>
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="399" column="48" info="PLMN_identity_info is initialized"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;loc_num&apos; can be reduced." verbose="The scope of the variable &apos;loc_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="104" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_distance&apos; can be reduced." verbose="The scope of the variable &apos;max_distance&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="205" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp_x&apos; can be reduced." verbose="The scope of the variable &apos;temp_x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="206" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp_y&apos; can be reduced." verbose="The scope of the variable &apos;temp_y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="206" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u1&apos; can be reduced." verbose="The scope of the variable &apos;u1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="206" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u2&apos; can be reduced." verbose="The scope of the variable &apos;u2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="206" column="30"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x_now&apos; is assigned a value that is never used." verbose="Variable &apos;x_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="556" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y_now&apos; is assigned a value that is never used." verbose="Variable &apos;y_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/steadystaterwp.c" line="556" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mcc_0&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mcc_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="403" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mcc_1&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mcc_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="404" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mcc_2&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mcc_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="405" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mnc_0&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mnc_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="406" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mnc_1&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mnc_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="407" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mnc_2&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mnc_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="408" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;MBSFN_Area1&apos; can be reduced." verbose="The scope of the variable &apos;MBSFN_Area1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="418" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mcc_0&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mcc_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="818" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mcc_1&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mcc_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="819" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mcc_2&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mcc_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="820" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mnc_0&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mnc_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="821" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mnc_1&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mnc_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="822" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy_mnc_2&apos; can be reduced." verbose="The scope of the variable &apos;dummy_mnc_2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="823" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;systemInfoValueTagSi_r13&apos; can be reduced." verbose="The scope of the variable &apos;systemInfoValueTagSi_r13&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1135" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SL_CommResourcePool&apos; can be reduced." verbose="The scope of the variable &apos;SL_CommResourcePool&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1252" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SL_DiscResourcePool&apos; can be reduced." verbose="The scope of the variable &apos;SL_DiscResourcePool&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1254" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;MBSFN_Area1&apos; can be reduced." verbose="The scope of the variable &apos;MBSFN_Area1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1261" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;MBSFN_Area2&apos; can be reduced." verbose="The scope of the variable &apos;MBSFN_Area2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1261" column="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rach_ce_levelinfo_r13&apos; can be reduced." verbose="The scope of the variable &apos;rach_ce_levelinfo_r13&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1370" column="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rsrp_range&apos; can be reduced." verbose="The scope of the variable &apos;rsrp_range&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1602" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;maxavailablenarrowband&apos; can be reduced." verbose="The scope of the variable &apos;maxavailablenarrowband&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1661" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pucch_info_value&apos; can be reduced." verbose="The scope of the variable &apos;pucch_info_value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="1682" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="3820" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="4652" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;UE_EUTRA_Capability_xer&apos; can be reduced." verbose="The scope of the variable &apos;UE_EUTRA_Capability_xer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="4654" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size&apos; can be reduced." verbose="The scope of the variable &apos;size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="4655" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cdistance&apos; can be reduced." verbose="The scope of the variable &apos;cdistance&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/trace.c" line="175" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;journeytime&apos; can be reduced." verbose="The scope of the variable &apos;journeytime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/trace.c" line="175" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;speed&apos; can be reduced." verbose="The scope of the variable &apos;speed&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/trace.c" line="175" column="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;node_n&apos; can be reduced." verbose="The scope of the variable &apos;node_n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/trace.c" line="266" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;my_node&apos; can be reduced." verbose="The scope of the variable &apos;my_node&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMG/trace.c" line="267" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x_now&apos; is assigned a value that is never used." verbose="Variable &apos;x_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/trace.c" line="442" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y_now&apos; is assigned a value that is never used." verbose="Variable &apos;y_now&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OMG/trace.c" line="442" column="29"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CommunicationThread&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CommunicationThread&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="openair2/UTIL/OMV/communicationthread.h" line="45" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nread&apos; can be reduced." verbose="The scope of the variable &apos;nread&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OMV/communicationthread.cpp" line="88" column="9"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;k&apos; is used before limits check." verbose="Defensive programming: The variable &apos;k&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair2/UTIL/OMV/openglwidget.cpp" line="273" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OPT/probe.c" line="201" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sd&apos; is assigned a value that is never used." verbose="Variable &apos;sd&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OPT/probe.c" line="241" column="8"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="211" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="212" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="213" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="214" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="215" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="216" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="217" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="218" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="219" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="220" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="221" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="222" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="225" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." verbose="Either the condition &apos;coreset!=NULL&apos; is redundant or there is possible null pointer dereference: coreset." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="227" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="208" column="44" info="Assignment &apos;coreset=calloc(1,sizeof(*coreset))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="209" column="23" info="Assuming that condition &apos;coreset!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="1598" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2697" column="18" info="Calling function &apos;set_phr_config&apos;, 1st argument &apos;mac_CellGroupConfig&apos; value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="1599" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2697" column="18" info="Calling function &apos;set_phr_config&apos;, 1st argument &apos;mac_CellGroupConfig&apos; value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="1600" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2697" column="18" info="Calling function &apos;set_phr_config&apos;, 1st argument &apos;mac_CellGroupConfig&apos; value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="1601" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2697" column="18" info="Calling function &apos;set_phr_config&apos;, 1st argument &apos;mac_CellGroupConfig&apos; value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="1602" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2697" column="18" info="Calling function &apos;set_phr_config&apos;, 1st argument &apos;mac_CellGroupConfig&apos; value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="1603" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2697" column="18" info="Calling function &apos;set_phr_config&apos;, 1st argument &apos;mac_CellGroupConfig&apos; value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." verbose="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2063" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2061" column="52" info="Assignment &apos;mtc=calloc(1,sizeof(*mtc))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2062" column="19" info="Assuming that condition &apos;mtc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." verbose="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2064" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2061" column="52" info="Assignment &apos;mtc=calloc(1,sizeof(*mtc))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2062" column="19" info="Assuming that condition &apos;mtc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." verbose="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2065" column="15" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2061" column="52" info="Assignment &apos;mtc=calloc(1,sizeof(*mtc))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2062" column="19" info="Assuming that condition &apos;mtc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." verbose="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2066" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2061" column="52" info="Assignment &apos;mtc=calloc(1,sizeof(*mtc))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2062" column="19" info="Assuming that condition &apos;mtc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." verbose="Either the condition &apos;mtc!=NULL&apos; is redundant or there is possible null pointer dereference: mtc." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2069" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2061" column="52" info="Assignment &apos;mtc=calloc(1,sizeof(*mtc))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2062" column="19" info="Assuming that condition &apos;mtc!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc_ie!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_ie." verbose="Either the condition &apos;mtc_ie!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_ie." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2070" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2067" column="59" info="Assignment &apos;mtc_ie=calloc(1,sizeof(*mtc_ie))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2068" column="22" info="Assuming that condition &apos;mtc_ie!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc_ie!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_ie." verbose="Either the condition &apos;mtc_ie!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_ie." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2071" column="15" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2067" column="59" info="Assignment &apos;mtc_ie=calloc(1,sizeof(*mtc_ie))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2068" column="22" info="Assuming that condition &apos;mtc_ie!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mtc_ie!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_ie." verbose="Either the condition &apos;mtc_ie!=NULL&apos; is redundant or there is possible null pointer dereference: mtc_ie." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2073" column="20" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2067" column="59" info="Assignment &apos;mtc_ie=calloc(1,sizeof(*mtc_ie))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2068" column="22" info="Assuming that condition &apos;mtc_ie!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." verbose="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2275" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2273" column="50" info="Assignment &apos;sib1_message=CALLOC(1,sizeof(NR_BCCH_DL_SCH_Message_t))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2274" column="28" info="Assuming that condition &apos;sib1_message!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." verbose="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2276" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2273" column="50" info="Assignment &apos;sib1_message=CALLOC(1,sizeof(NR_BCCH_DL_SCH_Message_t))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2274" column="28" info="Assuming that condition &apos;sib1_message!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." verbose="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2277" column="15" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2273" column="50" info="Assignment &apos;sib1_message=CALLOC(1,sizeof(NR_BCCH_DL_SCH_Message_t))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2274" column="28" info="Assuming that condition &apos;sib1_message!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." verbose="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2278" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2273" column="50" info="Assignment &apos;sib1_message=CALLOC(1,sizeof(NR_BCCH_DL_SCH_Message_t))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2274" column="28" info="Assuming that condition &apos;sib1_message!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." verbose="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2279" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2273" column="50" info="Assignment &apos;sib1_message=CALLOC(1,sizeof(NR_BCCH_DL_SCH_Message_t))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2274" column="28" info="Assuming that condition &apos;sib1_message!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." verbose="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2280" column="15" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2273" column="50" info="Assignment &apos;sib1_message=CALLOC(1,sizeof(NR_BCCH_DL_SCH_Message_t))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2274" column="28" info="Assuming that condition &apos;sib1_message!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." verbose="Either the condition &apos;sib1_message!=NULL&apos; is redundant or there is possible null pointer dereference: sib1_message." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2281" column="26" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2273" column="50" info="Assignment &apos;sib1_message=CALLOC(1,sizeof(NR_BCCH_DL_SCH_Message_t))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2274" column="28" info="Assuming that condition &apos;sib1_message!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;physicalCellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: physicalCellGroupConfig." verbose="Either the condition &apos;physicalCellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: physicalCellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2583" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2581" column="65" info="Assignment &apos;physicalCellGroupConfig=calloc(1,sizeof(*physicalCellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2582" column="39" info="Assuming that condition &apos;physicalCellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2686" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2687" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2688" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2689" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2690" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2691" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2699" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." verbose="Either the condition &apos;mac_CellGroupConfig!=NULL&apos; is redundant or there is possible null pointer dereference: mac_CellGroupConfig." cwe="476">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2700" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2684" column="58" info="Assignment &apos;mac_CellGroupConfig=calloc(1,sizeof(*mac_CellGroupConfig))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2685" column="35" info="Assuming that condition &apos;mac_CellGroupConfig!=NULL&apos; is not redundant"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="86" column="23"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="88" column="23"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="90" column="21"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="95" column="30"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="97" column="30"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="99" column="28"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="102" column="36"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="106" column="33"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="111" column="34"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair2/UTIL/OTG/main.c" line="246" column="37"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;g_otg-&gt;dst_ip[i]&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;g_otg-&gt;dst_ip[i]&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="80" column="21" info="g_otg-&gt;dst_ip[i] is overwritten"/>
            <location file="openair2/UTIL/OTG/main.c" line="79" column="21" info="g_otg-&gt;dst_ip[i] is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_packet_out&apos; can be reduced." verbose="The scope of the variable &apos;rx_packet_out&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/main.c" line="127" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/main.c" line="254" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg.c" line="98" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;simu_time&apos; shadows outer variable" verbose="Local variable &apos;simu_time&apos; shadows outer variable" cwe="398">
            <location file="openair2/UTIL/OTG/main.c" line="124" column="38" info="Shadow variable"/>
            <location file="openair2/UTIL/OTG/main.c" line="51" column="5" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;packet&apos; shadows outer variable" verbose="Local variable &apos;packet&apos; shadows outer variable" cwe="398">
            <location file="openair2/UTIL/OTG/main.c" line="148" column="19" info="Shadow variable"/>
            <location file="openair2/UTIL/OTG/main.c" line="126" column="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;simu_time&apos; shadows outer variable" verbose="Local variable &apos;simu_time&apos; shadows outer variable" cwe="398">
            <location file="openair2/UTIL/OTG/main.c" line="199" column="17" info="Shadow variable"/>
            <location file="openair2/UTIL/OTG/main.c" line="51" column="5" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_otg&apos; is assigned a value that is never used." verbose="Variable &apos;rx_otg&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="124" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ctime&apos; is assigned a value that is never used." verbose="Variable &apos;ctime&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="124" column="56"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_packet_out&apos; is assigned a value that is never used." verbose="Variable &apos;rx_packet_out&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="162" column="30"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: l" verbose="Unused variable: l" cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="124" column="16"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: p" verbose="Unused variable: p" cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="125" column="9"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: packet" verbose="Unused variable: packet" cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="126" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ctime&apos; is assigned a value that is never used." verbose="Variable &apos;ctime&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="199" column="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ctime&apos; is assigned a value that is never used." verbose="Variable &apos;ctime&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="210" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ctime&apos; is assigned a value that is never used." verbose="Variable &apos;ctime&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="216" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx&apos; is assigned a value that is never used." verbose="Variable &apos;tx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="332" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx&apos; is assigned a value that is never used." verbose="Variable &apos;tx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="334" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j" cwe="563">
            <location file="openair2/UTIL/OTG/main.c" line="270" column="9"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;obj&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;obj&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_form.c" line="55" column="7" info="obj is overwritten"/>
            <location file="openair2/UTIL/OTG/otg_form.c" line="50" column="7" info="obj is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;obj&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;obj&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_form.c" line="321" column="7" info="obj is overwritten"/>
            <location file="openair2/UTIL/OTG/otg_form.c" line="320" column="7" info="obj is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="144" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;src_idx&apos; can be reduced." verbose="The scope of the variable &apos;src_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="144" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;curve_id&apos; can be reduced." verbose="The scope of the variable &apos;curve_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="144" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;loss_rate&apos; can be reduced." verbose="The scope of the variable &apos;loss_rate&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="145" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;simu_time&apos; can be reduced." verbose="The scope of the variable &apos;simu_time&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="146" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;curve_label&apos; can be reduced." verbose="The scope of the variable &apos;curve_label&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="147" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x_key_position&apos; can be reduced." verbose="The scope of the variable &apos;x_key_position&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="148" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y_key_position&apos; can be reduced." verbose="The scope of the variable &apos;y_key_position&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="149" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="225" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dst_idx&apos; can be reduced." verbose="The scope of the variable &apos;dst_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="225" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;curve_id&apos; can be reduced." verbose="The scope of the variable &apos;curve_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="225" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;loss_rate&apos; can be reduced." verbose="The scope of the variable &apos;loss_rate&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="226" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;curve_label&apos; can be reduced." verbose="The scope of the variable &apos;curve_label&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="227" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;simu_time&apos; can be reduced." verbose="The scope of the variable &apos;simu_time&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="228" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x_key_position&apos; can be reduced." verbose="The scope of the variable &apos;x_key_position&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="229" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y_key_position&apos; can be reduced." verbose="The scope of the variable &apos;y_key_position&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_form.c" line="230" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;src_idx&apos; is assigned a value that is never used." verbose="Variable &apos;src_idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_form.c" line="144" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dst_idx&apos; is assigned a value that is never used." verbose="Variable &apos;dst_idx&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_form.c" line="225" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_ul_slot_period&apos; can be reduced." verbose="The scope of the variable &apos;first_ul_slot_period&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="599" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nrofSRS_Ports&apos; can be reduced." verbose="The scope of the variable &apos;nrofSRS_Ports&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="734" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;DELTA&apos; can be reduced." verbose="The scope of the variable &apos;DELTA&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="962" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bitmap8&apos; can be reduced." verbose="The scope of the variable &apos;bitmap8&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2458" column="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;curr_bwp&apos; shadows outer variable" verbose="Local variable &apos;curr_bwp&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2882" column="9" info="Shadow variable"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="2732" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;curr_bwp&apos; shadows outer variable" verbose="Local variable &apos;curr_bwp&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="3439" column="9" info="Shadow variable"/>
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="3309" column="7" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="3820" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="116" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inputsamples&apos; can be reduced." verbose="The scope of the variable &apos;inputsamples&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="281" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;proc&apos; can be reduced." verbose="The scope of the variable &apos;proc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="282" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frameidx&apos; can be reduced." verbose="The scope of the variable &apos;frameidx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="283" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cntp&apos; can be reduced." verbose="The scope of the variable &apos;cntp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="284" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cntpy&apos; can be reduced." verbose="The scope of the variable &apos;cntpy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="284" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numNewSessions&apos; can be reduced." verbose="The scope of the variable &apos;numNewSessions&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="572" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnts&apos; can be reduced." verbose="The scope of the variable &apos;cnts&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="572" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;period&apos; can be reduced." verbose="The scope of the variable &apos;period&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="572" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnts&apos; can be reduced." verbose="The scope of the variable &apos;cnts&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="609" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cntact&apos; can be reduced." verbose="The scope of the variable &apos;cntact&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="609" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mrate&apos; can be reduced." verbose="The scope of the variable &apos;mrate&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="611" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnts&apos; can be reduced." verbose="The scope of the variable &apos;cnts&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_models.c" line="638" column="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;is_size_ok==0&apos; is always false" verbose="Condition &apos;is_size_ok==0&apos; is always false" cwe="570">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="417" column="22" info="Condition &apos;is_size_ok==0&apos; is always false"/>
            <location file="openair2/UTIL/OTG/otg_rx.c" line="77" column="19" info="Assignment &apos;is_size_ok=1&apos;, assigned value is 1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;msg&apos; since the value of &apos;msg&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;msg&apos; since the value of &apos;msg&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="2154" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;msg&apos; since the value of &apos;msg&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;msg&apos; since the value of &apos;msg&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair2/RRC/LTE/MESSAGES/asn1_msg.c" line="4182" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bytes_read&apos; can be reduced." verbose="The scope of the variable &apos;bytes_read&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="51" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;otg_hdr_info_rx&apos; can be reduced." verbose="The scope of the variable &apos;otg_hdr_info_rx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="52" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_size_ok&apos; can be reduced." verbose="The scope of the variable &apos;is_size_ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="54" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lost_packet&apos; can be reduced." verbose="The scope of the variable &apos;lost_packet&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="57" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;src_instance&apos; can be reduced." verbose="The scope of the variable &apos;src_instance&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="58" column="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dst_instance&apos; can be reduced." verbose="The scope of the variable &apos;dst_instance&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="59" column="20"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;buffer!=NULL&apos; is always true" verbose="Condition &apos;buffer!=NULL&apos; is always true" cwe="571">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="91" column="17" info="Condition &apos;buffer!=NULL&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!erreur&apos; is always true" verbose="Condition &apos;!erreur&apos; is always true" cwe="571">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="149" column="6" info="Condition &apos;!erreur&apos; is always true"/>
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="138" column="16" info="Assignment &apos;erreur=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sock&apos; can be reduced." verbose="The scope of the variable &apos;sock&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="142" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="831" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sock_err&apos; can be reduced." verbose="The scope of the variable &apos;sock_err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="145" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="832" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;csock&apos; can be reduced." verbose="The scope of the variable &apos;csock&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="172" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;node_actif&apos; can be reduced." verbose="The scope of the variable &apos;node_actif&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="833" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_size_ok&apos; is assigned a value that is never used." verbose="Variable &apos;is_size_ok&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="54" column="36"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lost_packet&apos; is assigned a value that is never used." verbose="Variable &apos;lost_packet&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_rx.c" line="57" column="36"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first_ul_slot_period&apos; is assigned a value that is never used." verbose="Variable &apos;first_ul_slot_period&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/NR/nr_rrc_config.c" line="599" column="28"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: payload" verbose="Uninitialized variable: payload" cwe="908">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="256" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sock_rcv" verbose="Unused variable: sock_rcv" cwe="563">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="145" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;node_actif&apos; is assigned a value that is never used." verbose="Variable &apos;node_actif&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="833" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sock_err&apos; can be reduced." verbose="The scope of the variable &apos;sock_err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx_socket.c" line="101" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: idt" verbose="Unused variable: idt" cwe="563">
            <location file="openair2/UTIL/OTG/otg_tx_socket.c" line="102" column="10"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: size" verbose="Unused variable: size" cwe="563">
            <location file="openair2/UTIL/OTG/otg_tx_socket.c" line="103" column="7"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ok" verbose="Unused variable: ok" cwe="563">
            <location file="openair2/UTIL/OTG/otg_tx_socket.c" line="166" column="15"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686">
            <location file="openair2/UTIL/OTG/otg_rx_socket.c" line="100" column="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!erreur&apos; is always true" verbose="Condition &apos;!erreur&apos; is always true" cwe="571">
            <location file="openair2/UTIL/OTG/otg_tx_socket.c" line="106" column="6" info="Condition &apos;!erreur&apos; is always true"/>
            <location file="openair2/UTIL/OTG/otg_tx_socket.c" line="97" column="16" info="Assignment &apos;erreur=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sock&apos; can be reduced." verbose="The scope of the variable &apos;sock&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx_socket.c" line="99" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;enb_mod_idP&apos; is assigned a value that is never used." verbose="Variable &apos;enb_mod_idP&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/M3AP/m3ap_MCE_generate_messsages.c" line="48" column="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;du_mod_idP&apos; is assigned a value that is never used." verbose="Variable &apos;du_mod_idP&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/M3AP/m3ap_MCE_generate_messsages.c" line="49" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/M3AP/m3ap_MCE_generate_messsages.c" line="58" column="15"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="6128" column="18" info="Second condition"/>
            <location file="openair2/RRC/LTE/rrc_UE.c" line="6119" column="18" info="First condition"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (info-&gt;dl_dcch_msg!=NULL) info-&gt;dl_dcch_msg=NULL&apos; is logically equivalent to &apos;info-&gt;dl_dcch_msg=NULL&apos;." verbose="The statement &apos;if (info-&gt;dl_dcch_msg!=NULL) info-&gt;dl_dcch_msg=NULL&apos; is logically equivalent to &apos;info-&gt;dl_dcch_msg=NULL&apos;." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2501" column="39" info="Condition &apos;info-&gt;dl_dcch_msg!=NULL&apos; is redundant"/>
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2502" column="37" info="Assignment &apos;info-&gt;dl_dcch_msg=NULL&apos;"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (info-&gt;dl_dcch_msg!=NULL) info-&gt;dl_dcch_msg=NULL&apos; is logically equivalent to &apos;info-&gt;dl_dcch_msg=NULL&apos;." verbose="The statement &apos;if (info-&gt;dl_dcch_msg!=NULL) info-&gt;dl_dcch_msg=NULL&apos; is logically equivalent to &apos;info-&gt;dl_dcch_msg=NULL&apos;." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2516" column="37" info="Condition &apos;info-&gt;dl_dcch_msg!=NULL&apos; is redundant"/>
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2517" column="35" info="Assignment &apos;info-&gt;dl_dcch_msg=NULL&apos;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/MME_APP/mme_app.c" line="228" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mme_port_for_m3c&apos; can be reduced." verbose="The scope of the variable &apos;mme_port_for_m3c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/MME_APP/mme_config.c" line="65" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;data&apos; is assigned a value that is never used." verbose="Variable &apos;data&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/API/NETWORK/as_message.c" line="175" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/API/NETWORK/as_message.c" line="368" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx_total_bytes_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;tx_total_bytes_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="232" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx_total_pkts_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;tx_total_pkts_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="233" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_total_bytes_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;rx_total_bytes_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="234" column="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_total_pkts_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;rx_total_pkts_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="235" column="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_active_source&apos; is assigned a value that is never used." verbose="Variable &apos;num_active_source&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="236" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dl_ok&apos; is assigned a value that is never used." verbose="Variable &apos;dl_ok&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="237" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ul_ok&apos; is assigned a value that is never used." verbose="Variable &apos;ul_ok&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="237" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx_total_bytes_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;tx_total_bytes_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="282" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx_total_pkts_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;tx_total_pkts_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="283" column="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_total_bytes_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;rx_total_bytes_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="284" column="38"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_total_pkts_dl_multicast&apos; is assigned a value that is never used." verbose="Variable &apos;rx_total_pkts_dl_multicast&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="285" column="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_active_source&apos; is assigned a value that is never used." verbose="Variable &apos;num_active_source&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_kpi.c" line="328" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/EMM/MSG/EmmInformation.c" line="122" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rv&apos; can be reduced." verbose="The scope of the variable &apos;rv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="446" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SRB_id&apos; can be reduced." verbose="The scope of the variable &apos;SRB_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1201" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;DRB_id&apos; can be reduced." verbose="The scope of the variable &apos;DRB_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1201" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1202" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1202" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SRB1_logicalChannelConfig&apos; can be reduced." verbose="The scope of the variable &apos;SRB1_logicalChannelConfig&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1203" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;SRB2_logicalChannelConfig&apos; can be reduced." verbose="The scope of the variable &apos;SRB2_logicalChannelConfig&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1203" column="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffer&apos; can be reduced." verbose="The scope of the variable &apos;buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1487" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1488" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;kRRCenc&apos; can be reduced." verbose="The scope of the variable &apos;kRRCenc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1551" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;kUPenc&apos; can be reduced." verbose="The scope of the variable &apos;kUPenc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1552" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;kRRCint&apos; can be reduced." verbose="The scope of the variable &apos;kRRCint&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="1553" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pdu_length&apos; can be reduced." verbose="The scope of the variable &apos;pdu_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2032" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2034" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;target_eNB_index&apos; can be reduced." verbose="The scope of the variable &apos;target_eNB_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2206" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2207" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2635" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2942" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ifcfInfo&apos; can be reduced." verbose="The scope of the variable &apos;ifcfInfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="3742" column="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eNB_offset&apos; can be reduced." verbose="The scope of the variable &apos;eNB_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="4286" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ue_mod_id&apos; can be reduced." verbose="The scope of the variable &apos;ue_mod_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="4863" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="5674" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;received_nr_msg&apos; can be reduced." verbose="The scope of the variable &apos;received_nr_msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="6567" column="10"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;eNB_index&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;eNB_index&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="823" column="63" info="Unsigned positive"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;eNB_index&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;eNB_index&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="906" column="66" info="Unsigned positive"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_result&apos; can be reduced." verbose="The scope of the variable &apos;encode_result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/EMM/MSG/SecurityModeComplete.c" line="74" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/EMM/MSG/SecurityModeComplete.c" line="74" column="21"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;eNB_index&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;eNB_index&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="945" column="62" info="Unsigned positive"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/EMM/MSG/TrackingAreaUpdateAccept.c" line="223" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_result&apos; can be reduced." verbose="The scope of the variable &apos;encode_result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/ActivateDedicatedEpsBearerContextAccept.c" line="74" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/ActivateDedicatedEpsBearerContextAccept.c" line="74" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_result&apos; can be reduced." verbose="The scope of the variable &apos;encode_result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/ActivateDefaultEpsBearerContextAccept.c" line="74" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/ActivateDefaultEpsBearerContextAccept.c" line="74" column="21"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;msg_p&apos; shadows outer variable" verbose="Local variable &apos;msg_p&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2256" column="25" info="Shadow variable"/>
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2207" column="15" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;info&apos; shadows outer variable" verbose="Local variable &apos;info&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2500" column="30" info="Shadow variable"/>
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2440" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;info&apos; shadows outer variable" verbose="Local variable &apos;info&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2515" column="28" info="Shadow variable"/>
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2440" column="24" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sib1&apos; shadows outer variable" verbose="Local variable &apos;sib1&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2890" column="48" info="Shadow variable"/>
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2850" column="38" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_result&apos; can be reduced." verbose="The scope of the variable &apos;encode_result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/DeactivateEpsBearerContextAccept.c" line="74" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/DeactivateEpsBearerContextAccept.c" line="74" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;down_link&apos; can be reduced." verbose="The scope of the variable &apos;down_link&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/EMM/MSG/emm_msg.c" line="91" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;down_link&apos; can be reduced." verbose="The scope of the variable &apos;down_link&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/EMM/MSG/emm_msg.c" line="283" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/EsmInformationResponse.c" line="86" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_result&apos; can be reduced." verbose="The scope of the variable &apos;encode_result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/ModifyEpsBearerContextAccept.c" line="74" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/ModifyEpsBearerContextAccept.c" line="74" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/PdnConnectivityRequest.c" line="106" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_result&apos; can be reduced." verbose="The scope of the variable &apos;encode_result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/PdnDisconnectRequest.c" line="79" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/PdnDisconnectRequest.c" line="79" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encode_result&apos; is assigned a value that is never used." verbose="Variable &apos;encode_result&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/ESM/MSG/ModifyEpsBearerContextRequest.c" line="158" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;apn&apos; can be reduced." verbose="The scope of the variable &apos;apn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/PduSessionEstablishmentAccept.c" line="181" column="14"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;index&apos; is used before limits check." verbose="Defensive programming: The variable &apos;index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair3/NAS/COMMON/IES/AccessPointName.c" line="86" column="54"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." verbose="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3277" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3275" column="25" info="Assignment &apos;cg_configinfo=calloc(1,sizeof(struct NR_CG_ConfigInfo))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3276" column="29" info="Assuming that condition &apos;cg_configinfo!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." verbose="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3278" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3275" column="25" info="Assignment &apos;cg_configinfo=calloc(1,sizeof(struct NR_CG_ConfigInfo))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3276" column="29" info="Assuming that condition &apos;cg_configinfo!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." verbose="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3280" column="15" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3275" column="25" info="Assignment &apos;cg_configinfo=calloc(1,sizeof(struct NR_CG_ConfigInfo))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3276" column="29" info="Assuming that condition &apos;cg_configinfo!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." verbose="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3282" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3275" column="25" info="Assignment &apos;cg_configinfo=calloc(1,sizeof(struct NR_CG_ConfigInfo))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3276" column="29" info="Assuming that condition &apos;cg_configinfo!=NULL&apos; is not redundant"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/AdditionalUpdateResult.c" line="83" column="10"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." verbose="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3284" column="3" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3275" column="25" info="Assignment &apos;cg_configinfo=calloc(1,sizeof(struct NR_CG_ConfigInfo))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3276" column="29" info="Assuming that condition &apos;cg_configinfo!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." verbose="Either the condition &apos;cg_configinfo!=NULL&apos; is redundant or there is possible null pointer dereference: cg_configinfo." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3286" column="15" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3275" column="25" info="Assignment &apos;cg_configinfo=calloc(1,sizeof(struct NR_CG_ConfigInfo))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3276" column="29" info="Assuming that condition &apos;cg_configinfo!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_cap_rat_container_MRDC!=NULL&apos; is redundant or there is possible null pointer dereference: ue_cap_rat_container_MRDC." verbose="Either the condition &apos;ue_cap_rat_container_MRDC!=NULL&apos; is redundant or there is possible null pointer dereference: ue_cap_rat_container_MRDC." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3296" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3294" column="39" info="Assignment &apos;ue_cap_rat_container_MRDC=calloc(1,sizeof(*ue_cap_rat_container_MRDC))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3295" column="43" info="Assuming that condition &apos;ue_cap_rat_container_MRDC!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_cap_rat_container_nr!=NULL&apos; is redundant or there is possible null pointer dereference: ue_cap_rat_container_nr." verbose="Either the condition &apos;ue_cap_rat_container_nr!=NULL&apos; is redundant or there is possible null pointer dereference: ue_cap_rat_container_nr." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3310" column="5" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3308" column="37" info="Assignment &apos;ue_cap_rat_container_nr=calloc(1,sizeof(*ue_cap_rat_container_nr))&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3309" column="41" info="Assuming that condition &apos;ue_cap_rat_container_nr!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." verbose="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." cwe="476">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7817" column="13" info="Null pointer dereference"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7813" column="44" info="Assignment &apos;ue_context_p=rrc_eNB_get_ue_context(RC.rrc[instance],X2AP_UE_CONTEXT_RELEASE(msg_p).rnti)&apos;, assigned value is 0"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7815" column="30" info="Assuming that condition &apos;ue_context_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;down_link&apos; can be reduced." verbose="The scope of the variable &apos;down_link&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/esm_msg.c" line="91" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;down_link&apos; can be reduced." verbose="The scope of the variable &apos;down_link&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/ESM/MSG/esm_msg.c" line="250" column="7"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;encode_result=encode_octet_string(&amp;authenticationparameterrand-&gt;rand,buffer+encoded,len-encoded)&apos; is less than zero." verbose="The unsigned expression &apos;encode_result=encode_octet_string(&amp;authenticationparameterrand-&gt;rand,buffer+encoded,len-encoded)&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair3/NAS/COMMON/IES/AuthenticationParameterRand.c" line="68" column="114" info="Unsigned less than zero"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/CipheringKeySequenceNumber.c" line="83" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/CsfbResponse.c" line="83" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/DetachType.c" line="89" column="10"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rval&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rval&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="6032" column="10" info="rval is overwritten"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="6028" column="14" info="rval is assigned"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;CC_id&apos; is not assigned a value." verbose="Variable &apos;CC_id&apos; is not assigned a value." cwe="665">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="5373" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;syncOffsetIndicator&apos; is assigned a value that is never used." verbose="Variable &apos;syncOffsetIndicator&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="5457" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/EpsAttachResult.c" line="85" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/EpsAttachType.c" line="85" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="986" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/EpsUpdateResult.c" line="83" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="1311" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;MeasId6&apos; can be reduced." verbose="The scope of the variable &apos;MeasId6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="2556" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3360" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;neighboring_cells&apos; can be reduced." verbose="The scope of the variable &apos;neighboring_cells&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3361" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/EsmInformationTransferFlag.c" line="83" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ncell_max&apos; can be reduced." verbose="The scope of the variable &apos;ncell_max&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3363" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;earfcn_dl&apos; can be reduced." verbose="The scope of the variable &apos;earfcn_dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3364" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;KeNB_star&apos; can be reduced." verbose="The scope of the variable &apos;KeNB_star&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3365" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;enc_buf&apos; can be reduced." verbose="The scope of the variable &apos;enc_buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3366" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced." verbose="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3436" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/EpsUpdateType.c" line="87" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oip_ifup&apos; can be reduced." verbose="The scope of the variable &apos;oip_ifup&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="5162" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dest_ip_offset&apos; can be reduced." verbose="The scope of the variable &apos;dest_ip_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="5163" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;stmsi_received&apos; can be reduced." verbose="The scope of the variable &apos;stmsi_received&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="5594" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;xid&apos; can be reduced." verbose="The scope of the variable &apos;xid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="6295" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dedicated_DRB&apos; can be reduced." verbose="The scope of the variable &apos;dedicated_DRB&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="6296" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;release_num&apos; can be reduced." verbose="The scope of the variable &apos;release_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7053" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;release_total&apos; can be reduced." verbose="The scope of the variable &apos;release_total&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7054" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;release_ctrl&apos; can be reduced." verbose="The scope of the variable &apos;release_ctrl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7055" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced." verbose="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7209" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_name_p&apos; can be reduced." verbose="The scope of the variable &apos;msg_name_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7642" column="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip_offset&apos; can be reduced." verbose="The scope of the variable &apos;ip_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="7780" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_destinations&apos; can be reduced." verbose="The scope of the variable &apos;n_destinations&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="8008" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n_discoveryMessages&apos; can be reduced." verbose="The scope of the variable &apos;n_discoveryMessages&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="8009" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/FGSRegistrationResult.c" line="58" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/FGSRegistrationType.c" line="61" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/IdentityType2.c" line="85" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/GutiType.c" line="85" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/ImeisvRequest.c" line="83" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/LinkedEpsBearerIdentity.c" line="85" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/NasKeySetIdentifier.c" line="89" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/NasRequestType.c" line="85" column="10"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;encode_result=encode_octet_string(&amp;ptmsisignature-&gt;ptmsisignaturevalue,buffer+encoded,len-encoded)&apos; is less than zero." verbose="The unsigned expression &apos;encode_result=encode_octet_string(&amp;ptmsisignature-&gt;ptmsisignaturevalue,buffer+encoded,len-encoded)&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair3/NAS/COMMON/IES/PTmsiSignature.c" line="68" column="116" info="Unsigned less than zero"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/PdnType.c" line="85" column="10"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3623" column="14" info="Shadow variable"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3360" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="6497" column="23" info="Shadow variable"/>
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="6293" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_result&apos; can be reduced." verbose="The scope of the variable &apos;encode_result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/IES/ProtocolConfigurationOptions.c" line="89" column="7"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;ctime&gt;otg_info-&gt;start_voip_silence[src_instance][dst_instance][application]&apos; and inner condition is &apos;ctime&gt;otg_info-&gt;start_voip_silence[src_instance][dst_instance][application]&apos;)." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="2141" column="16" info="identical inner condition: ctime&gt;otg_info-&gt;start_voip_silence[src_instance][dst_instance][application]"/>
            <location file="openair2/UTIL/OTG/otg_tx.c" line="2140" column="14" info="outer condition: ctime&gt;otg_info-&gt;start_voip_silence[src_instance][dst_instance][application]"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/RadioPriority.c" line="83" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/ServiceType.c" line="83" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/TmsiStatus.c" line="83" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;encoded&apos; is assigned a value that is never used." verbose="Variable &apos;encoded&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/IES/UeRadioCapabilityInformationUpdateNeeded.c" line="83" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size_print&apos; can be reduced." verbose="The scope of the variable &apos;size_print&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/UTIL/OctetString.c" line="116" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size_print&apos; is assigned a value that is never used." verbose="Variable &apos;size_print&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/UTIL/OctetString.c" line="107" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size_print&apos; is assigned a value that is never used." verbose="Variable &apos;size_print&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/UTIL/OctetString.c" line="116" column="22"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;len-encoded&gt;0&apos; and inner condition is &apos;len-encoded&lt;=0&apos;)." cwe="398">
            <location file="openair3/NAS/COMMON/IES/TrafficFlowTemplate.c" line="346" column="23" info="opposite inner condition: len-encoded&lt;=0"/>
            <location file="openair3/NAS/COMMON/IES/TrafficFlowTemplate.c" line="345" column="55" info="outer condition: len-encoded&gt;0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffer_size&apos; can be reduced." verbose="The scope of the variable &apos;buffer_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="252" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;argument_not_found&apos; can be reduced." verbose="The scope of the variable &apos;argument_not_found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/UTIL/parser.c" line="109" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flow&apos; can be reduced." verbose="The scope of the variable &apos;flow&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="253" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flow_id_background&apos; can be reduced." verbose="The scope of the variable &apos;flow_id_background&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="254" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;seq_num&apos; can be reduced." verbose="The scope of the variable &apos;seq_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="255" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag&apos; can be reduced." verbose="The scope of the variable &apos;flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="256" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;header_size&apos; can be reduced." verbose="The scope of the variable &apos;header_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="259" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size_header&apos; can be reduced." verbose="The scope of the variable &apos;size_header&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="696" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size_header&apos; can be reduced." verbose="The scope of the variable &apos;size_header&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="732" column="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size_header&apos; can be reduced." verbose="The scope of the variable &apos;size_header&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="1920" column="7"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;otg_info-&gt;header_size[src_instance][dst_instance]&apos; is less than zero." verbose="The unsigned expression &apos;otg_info-&gt;header_size[src_instance][dst_instance]&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="286" column="61" info="Unsigned less than zero"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;it.it_interval.tv_sec&apos; is assigned a value that is never used." verbose="Variable &apos;it.it_interval.tv_sec&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/UTIL/nas_timer.c" line="513" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;it.it_value&apos; is assigned a value that is never used." verbose="Variable &apos;it.it_value&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/UTIL/nas_timer.c" line="514" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;it.it_interval.tv_sec&apos; is assigned a value that is never used." verbose="Variable &apos;it.it_interval.tv_sec&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/COMMON/UTIL/nas_timer.c" line="609" column="27"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mode&apos; can be reduced." verbose="The scope of the variable &apos;mode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="224" column="8"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;B115200&apos; since the value of &apos;B115200&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;B115200&apos; since the value of &apos;B115200&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="91" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;B230400&apos; since the value of &apos;B230400&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;B230400&apos; since the value of &apos;B230400&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="94" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;B57600&apos; since the value of &apos;B57600&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;B57600&apos; since the value of &apos;B57600&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="88" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CRTSCTS&apos; since the value of &apos;CRTSCTS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CRTSCTS&apos; since the value of &apos;CRTSCTS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="105" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CTSFLOW&apos; since the value of &apos;CTSFLOW&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CTSFLOW&apos; since the value of &apos;CTSFLOW&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="111" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ECHOCTL&apos; since the value of &apos;ECHOCTL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ECHOCTL&apos; since the value of &apos;ECHOCTL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="172" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ECHOKE&apos; since the value of &apos;ECHOKE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ECHOKE&apos; since the value of &apos;ECHOKE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="178" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ECHOPRT&apos; since the value of &apos;ECHOPRT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ECHOPRT&apos; since the value of &apos;ECHOPRT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="175" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FLUSHO&apos; since the value of &apos;FLUSHO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FLUSHO&apos; since the value of &apos;FLUSHO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="181" column="0"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;header_size&apos; shadows outer function" verbose="Local variable &apos;header_size&apos; shadows outer function" cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="259" column="7" info="Shadow variable"/>
            <location file="openair2/UTIL/OTG/otg_tx.c" line="829" column="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;otg_hdr_size&apos; shadows outer function" verbose="Local variable &apos;otg_hdr_size&apos; shadows outer function" cwe="398">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="403" column="7" info="Shadow variable"/>
            <location file="openair2/UTIL/OTG/otg_tx.h" line="205" column="5" info="Shadowed declaration"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IMAXBEL&apos; since the value of &apos;IMAXBEL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IMAXBEL&apos; since the value of &apos;IMAXBEL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="openair3/NAS/COMMON/UTIL/stty.c" line="132" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_id&apos; can be reduced." verbose="The scope of the variable &apos;msg_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/TEST/AS_SIMULATOR/as_simulator.c" line="321" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_id&apos; can be reduced." verbose="The scope of the variable &apos;msg_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/TEST/AS_SIMULATOR/as_simulator.c" line="403" column="7"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &apos;len&lt;1024-1&apos; is redundant or the array &apos;_user_simulator_send_buffer[1024]&apos; is accessed at index 1024, which is out of bounds." verbose="Either the condition &apos;len&lt;1024-1&apos; is redundant or the array &apos;_user_simulator_send_buffer[1024]&apos; is accessed at index 1024, which is out of bounds." cwe="788">
            <location file="openair3/NAS/TEST/USER/user_simulator.c" line="218" column="32" info="Array index out of bounds"/>
            <location file="openair3/NAS/TEST/USER/user_simulator.c" line="217" column="33" info="len is incremented&apos;, new value is 1024"/>
            <location file="openair3/NAS/TEST/USER/user_simulator.c" line="209" column="18" info="Assuming that condition &apos;len&lt;1024-1&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(devpath)&apos; is redundant or there is possible null pointer dereference: devpath." verbose="Either the condition &apos;if(devpath)&apos; is redundant or there is possible null pointer dereference: devpath." cwe="476">
            <location file="openair3/NAS/TEST/USER/user_simulator.c" line="124" column="31" info="Null pointer dereference"/>
            <location file="openair3/NAS/TEST/USER/user_simulator.c" line="129" column="6" info="Assuming that condition &apos;if(devpath)&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bytes&apos; can be reduced." verbose="The scope of the variable &apos;bytes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/TEST/AS_SIMULATOR/nas_process.c" line="645" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/TOOLS/conf_parser.c" line="10" column="6"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/TOOLS/conf_parser.c" line="10" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/TOOLS/conf_user_plmn.c" line="40" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;option_short&apos; can be reduced." verbose="The scope of the variable &apos;option_short&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/TOOLS/nvram.c" line="72" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;option_short&apos; can be reduced." verbose="The scope of the variable &apos;option_short&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/TOOLS/usim.c" line="72" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buffer_size&apos; is assigned a value that is never used." verbose="Variable &apos;buffer_size&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="252" column="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size&apos; is assigned a value that is never used." verbose="Variable &apos;size&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="397" column="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;byte_tx_count&apos; is assigned a value that is never used." verbose="Variable &apos;byte_tx_count&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/UTIL/OTG/otg_tx.c" line="895" column="17"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;input_size+1&apos; to function malloc is always 101" verbose="Argument &apos;input_size+1&apos; to function malloc is always 101" cwe="570">
            <location file="openair3/NAS/UE/API/USER/tst/at_parser.c" line="123" column="37" info="Argument &apos;input_size+1&apos; to function malloc is always 101"/>
            <location file="openair3/NAS/UE/API/USER/tst/at_parser.c" line="116" column="23" info="Assignment &apos;input_size=100&apos;, assigned value is 100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/API/USIM/aka_functions.c" line="423" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/API/USIM/aka_functions.c" line="423" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp0&apos; can be reduced." verbose="The scope of the variable &apos;tmp0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/API/USIM/aka_functions.c" line="423" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="1311" column="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;delete_tunnels.from_gnb&apos; is assigned a value that is never used." verbose="Variable &apos;delete_tunnels.from_gnb&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="3850" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;oip_ifup&apos; is assigned a value that is never used." verbose="Variable &apos;oip_ifup&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="5162" column="48"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dest_ip_offset&apos; is assigned a value that is never used." verbose="Variable &apos;dest_ip_offset&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="5163" column="54"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n_destinations&apos; is assigned a value that is never used." verbose="Variable &apos;n_destinations&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="8008" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n_discoveryMessages&apos; is assigned a value that is never used." verbose="Variable &apos;n_discoveryMessages&apos; is assigned a value that is never used." cwe="563">
            <location file="openair2/RRC/LTE/rrc_eNB.c" line="8009" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/EMM/Detach.c" line="425" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/EMM/Attach.c" line="351" column="7"/>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &apos;value&apos; is freed twice." verbose="Memory pointed to by &apos;value&apos; is freed twice." cwe="415">
            <location file="openair3/NAS/UE/EMM/Authentication.c" line="258" column="5"/>
            <location file="openair3/NAS/UE/EMM/Authentication.c" line="253" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode&apos; can be reduced." verbose="The scope of the variable &apos;encode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/API/USER/at_response.c" line="153" column="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/API/USER/at_response.c" line="529" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/API/USER/at_response.c" line="931" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/API/USER/at_response.c" line="1009" column="9"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;handler_index&apos; is used before limits check." verbose="Defensive programming: The variable &apos;handler_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair3/NAS/UE/API/USER/at_command.c" line="322" column="38"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;pdu_length&apos; is less than zero." verbose="The unsigned expression &apos;pdu_length&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="openair3/NAS/NR_UE/nr_nas_msg_sim.c" line="1139" column="43" info="Unsigned less than zero"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;nas&apos; shadows outer variable" verbose="Local variable &apos;nas&apos; shadows outer variable" cwe="398">
            <location file="openair3/NAS/NR_UE/nr_nas_msg_sim.c" line="1352" column="22" info="Shadow variable"/>
            <location file="openair3/NAS/NR_UE/nr_nas_msg_sim.c" line="1328" column="22" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;nas&apos; shadows outer variable" verbose="Local variable &apos;nas&apos; shadows outer variable" cwe="398">
            <location file="openair3/NAS/NR_UE/nr_nas_msg_sim.c" line="1377" column="22" info="Shadow variable"/>
            <location file="openair3/NAS/NR_UE/nr_nas_msg_sim.c" line="1328" column="22" info="Shadowed declaration"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair3/NAS/UE/EMM/IdleMode.c" line="121" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/EMM/IdleMode.c" line="471" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;oldS[33]&apos; is assigned a value that is never used." verbose="Variable &apos;oldS[33]&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/NR_UE/nr_nas_msg_sim.c" line="313" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/ESM/EpsBearerContextDeactivation.c" line="120" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/ESM/PdnDisconnect.c" line="412" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sent_by_ue&apos; can be reduced." verbose="The scope of the variable &apos;sent_by_ue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/ESM/SAP/esm_sap.c" line="700" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/ESM/PdnDisconnect.c" line="451" column="12"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;pti&apos; shadows outer argument" verbose="Local variable &apos;pti&apos; shadows outer argument" cwe="398">
            <location file="openair3/NAS/UE/ESM/PdnConnectivity.c" line="149" column="13" info="Shadow variable"/>
            <location file="openair3/NAS/UE/ESM/PdnConnectivity.c" line="137" column="45" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pid&apos; shadows outer variable" verbose="Local variable &apos;pid&apos; shadows outer variable" cwe="398">
            <location file="openair3/NAS/UE/ESM/PdnConnectivity.c" line="203" column="13" info="Shadow variable"/>
            <location file="openair3/NAS/UE/ESM/PdnConnectivity.c" line="142" column="9" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/ESM/PdnConnectivity.c" line="641" column="16"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair3/NAS/UE/EMM/emm_main.c" line="453" column="27"/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="openair3/NAS/UE/ESM/esm_ebr.c" line="141" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bytes&apos; can be reduced." verbose="The scope of the variable &apos;bytes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/UEprocess.c" line="247" column="7"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;&amp;&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair3/NAS/UE/ESM/esm_ebr_context.c" line="231" column="48"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;&amp;&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair3/NAS/UE/ESM/esm_ebr_context.c" line="243" column="49"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;&amp;&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair3/NAS/UE/ESM/esm_ebr_context.c" line="255" column="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/ESM/esm_ebr_context.c" line="460" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/ESM/esm_ebr_context.c" line="630" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offset&apos; is assigned a value that is never used." verbose="Variable &apos;offset&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/nas_proc.c" line="281" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;converter.ext_ton_npi.ext&apos; is assigned a value that is never used." verbose="Variable &apos;converter.ext_ton_npi.ext&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/nas_proc.c" line="320" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;converter.ext_ton_npi.ton&apos; is assigned a value that is never used." verbose="Variable &apos;converter.ext_ton_npi.ton&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/nas_proc.c" line="321" column="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;converter.ext_ton_npi.npi&apos; is assigned a value that is never used." verbose="Variable &apos;converter.ext_ton_npi.npi&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NAS/UE/nas_proc.c" line="322" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NGAP/ngap_gNB_management_procedures.c" line="95" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_events&apos; can be reduced." verbose="The scope of the variable &apos;nb_events&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NAS/UE/nas_ue_task.c" line="88" column="25"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." verbose="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="121" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="119" column="27" info="Assignment &apos;ngap_amf_data_p=calloc(1,sizeof(*ngap_amf_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="120" column="29" info="Assuming that condition &apos;ngap_amf_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." verbose="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="122" column="44" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="119" column="27" info="Assignment &apos;ngap_amf_data_p=calloc(1,sizeof(*ngap_amf_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="120" column="29" info="Assuming that condition &apos;ngap_amf_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." verbose="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="123" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="119" column="27" info="Assignment &apos;ngap_amf_data_p=calloc(1,sizeof(*ngap_amf_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="120" column="29" info="Assuming that condition &apos;ngap_amf_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." verbose="Either the condition &apos;ngap_amf_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_amf_data_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="124" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="119" column="27" info="Assignment &apos;ngap_amf_data_p=calloc(1,sizeof(*ngap_amf_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="120" column="29" info="Assuming that condition &apos;ngap_amf_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="175" column="5" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="171" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct ngap_gNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="172" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="176" column="5" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="171" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct ngap_gNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="172" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="177" column="5" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="171" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct ngap_gNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="172" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="178" column="5" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="171" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct ngap_gNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="172" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="179" column="5" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="171" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct ngap_gNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="172" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." verbose="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="437" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="257" column="38" info="Calling function &apos;ngap_gNB_generate_ng_setup_request&apos;, 1st argument &apos;instance_p&apos; value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="237" column="37" info="Assignment &apos;instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="238" column="24" info="Assuming that condition &apos;instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." verbose="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="438" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="257" column="38" info="Calling function &apos;ngap_gNB_generate_ng_setup_request&apos;, 1st argument &apos;instance_p&apos; value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="237" column="37" info="Assignment &apos;instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="238" column="24" info="Assuming that condition &apos;instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." verbose="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="439" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="257" column="38" info="Calling function &apos;ngap_gNB_generate_ng_setup_request&apos;, 1st argument &apos;instance_p&apos; value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="237" column="37" info="Assignment &apos;instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="238" column="24" info="Assuming that condition &apos;instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." verbose="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="442" column="30" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="257" column="38" info="Calling function &apos;ngap_gNB_generate_ng_setup_request&apos;, 1st argument &apos;instance_p&apos; value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="237" column="37" info="Assignment &apos;instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="238" column="24" info="Assuming that condition &apos;instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." verbose="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="444" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="257" column="38" info="Calling function &apos;ngap_gNB_generate_ng_setup_request&apos;, 1st argument &apos;instance_p&apos; value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="237" column="37" info="Assignment &apos;instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="238" column="24" info="Assuming that condition &apos;instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." verbose="Either the condition &apos;instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB.c" line="452" column="7" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="257" column="38" info="Calling function &apos;ngap_gNB_generate_ng_setup_request&apos;, 1st argument &apos;instance_p&apos; value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="237" column="37" info="Assignment &apos;instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB.c" line="238" column="24" info="Assuming that condition &apos;instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NGAP/ngap_gNB.c" line="283" column="15"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="160" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="98" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="101" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="409" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="295" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="297" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="477" column="35" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="481" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="482" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="483" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="487" column="27" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="488" column="23" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="489" column="23" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="490" column="23" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="501" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="425" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="427" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="765" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="517" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="519" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="835" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="782" column="48" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_context_management_procedures.c" line="784" column="35" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="176" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="177" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="178" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="179" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="190" column="39" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="217" column="38" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="218" column="38" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="219" column="38" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="224" column="40" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="225" column="40" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="226" column="40" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="269" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="288" column="3" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="291" column="52" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="173" column="51" info="Assignment &apos;ue_desc_p=calloc(1,sizeof(*ue_desc_p))&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="174" column="23" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="446" column="35" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="449" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="450" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="451" column="21" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="455" column="27" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="456" column="23" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="457" column="23" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="458" column="23" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="468" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="381" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="382" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="549" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="488" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="489" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="738" column="38" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="569" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="571" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="816" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="752" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="754" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1000" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="831" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="833" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1167" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1015" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1017" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." verbose="Either the condition &apos;ngap_gNB_instance_p!=NULL&apos; is redundant or there is possible null pointer dereference: ngap_gNB_instance_p." cwe="476">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1239" column="36" info="Null pointer dereference"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1182" column="46" info="Assignment &apos;ngap_gNB_instance_p=ngap_gNB_get_instance(instance)&apos;, assigned value is 0"/>
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1184" column="33" info="Assuming that condition &apos;ngap_gNB_instance_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NGAP/ngap_gNB_nas_procedures.c" line="1180" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_management_procedures.c" line="95" column="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_nnsf.c" line="54" column="13"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." verbose="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="158" column="3" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="156" column="27" info="Assignment &apos;s1ap_mme_data_p=calloc(1,sizeof(*s1ap_mme_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="157" column="29" info="Assuming that condition &apos;s1ap_mme_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." verbose="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="159" column="44" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="156" column="27" info="Assignment &apos;s1ap_mme_data_p=calloc(1,sizeof(*s1ap_mme_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="157" column="29" info="Assuming that condition &apos;s1ap_mme_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." verbose="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="160" column="3" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="156" column="27" info="Assignment &apos;s1ap_mme_data_p=calloc(1,sizeof(*s1ap_mme_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="157" column="29" info="Assuming that condition &apos;s1ap_mme_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." verbose="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="161" column="3" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="156" column="27" info="Assignment &apos;s1ap_mme_data_p=calloc(1,sizeof(*s1ap_mme_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="157" column="29" info="Assuming that condition &apos;s1ap_mme_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." verbose="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="165" column="3" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="156" column="27" info="Assignment &apos;s1ap_mme_data_p=calloc(1,sizeof(*s1ap_mme_data_p))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="157" column="29" info="Assuming that condition &apos;s1ap_mme_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="213" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="208" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct s1ap_eNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="209" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="214" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="208" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct s1ap_eNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="209" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="215" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="208" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct s1ap_eNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="209" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="216" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="208" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct s1ap_eNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="209" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." verbose="Either the condition &apos;new_instance!=NULL&apos; is redundant or there is possible null pointer dereference: new_instance." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="217" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="208" column="26" info="Assignment &apos;new_instance=calloc(1,sizeof(struct s1ap_eNB_instance_s))&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="209" column="28" info="Assuming that condition &apos;new_instance!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." verbose="Either the condition &apos;s1ap_mme_data_p!=NULL&apos; is redundant or there is possible null pointer dereference: s1ap_mme_data_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB.c" line="301" column="7" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="297" column="37" info="Assignment &apos;s1ap_mme_data_p=s1ap_eNB_get_MME(instance_p,-1,sctp_new_association_resp-&gt;ulp_cnx_id)&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB.c" line="299" column="29" info="Assuming that condition &apos;s1ap_mme_data_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timer_kind&apos; can be reduced." verbose="The scope of the variable &apos;timer_kind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB.c" line="287" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;plmnInfo&apos; can be reduced." verbose="The scope of the variable &apos;plmnInfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB.c" line="288" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;groupInfo&apos; can be reduced." verbose="The scope of the variable &apos;groupInfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB.c" line="289" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mmeCode&apos; can be reduced." verbose="The scope of the variable &apos;mmeCode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB.c" line="291" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB.c" line="292" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timer_ind&apos; can be reduced." verbose="The scope of the variable &apos;timer_ind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB.c" line="436" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;weight&apos; can be reduced." verbose="The scope of the variable &apos;weight&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_nnsf.c" line="56" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;capacity_sum&apos; can be reduced." verbose="The scope of the variable &apos;capacity_sum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_nnsf.c" line="128" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_nnsf.c" line="130" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;weight&apos; can be reduced." verbose="The scope of the variable &apos;weight&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_nnsf.c" line="132" column="13"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;timer_kind&apos; is assigned a value that is never used." verbose="Variable &apos;timer_kind&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/S1AP/s1ap_eNB.c" line="287" column="43"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;timer_ind&apos; is assigned a value that is never used." verbose="Variable &apos;timer_ind&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/S1AP/s1ap_eNB.c" line="436" column="39"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ue_context_p&apos; is assigned a value that is never used." verbose="Variable &apos;ue_context_p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/S1AP/s1ap_eNB.c" line="615" column="25"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ue_desc_p" verbose="Possible null pointer dereference: ue_desc_p" cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="68" column="39" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="137" column="41" info="Calling function &apos;s1ap_eNB_generate_trace_failure&apos;, 1st argument &apos;NULL&apos; value is 0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ue_desc_p" verbose="Possible null pointer dereference: ue_desc_p" cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="76" column="39" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="137" column="41" info="Calling function &apos;s1ap_eNB_generate_trace_failure&apos;, 1st argument &apos;NULL&apos; value is 0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ue_desc_p" verbose="Possible null pointer dereference: ue_desc_p" cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="99" column="38" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="137" column="41" info="Calling function &apos;s1ap_eNB_generate_trace_failure&apos;, 1st argument &apos;NULL&apos; value is 0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ue_desc_p" verbose="Possible null pointer dereference: ue_desc_p" cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="100" column="38" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="137" column="41" info="Calling function &apos;s1ap_eNB_generate_trace_failure&apos;, 1st argument &apos;NULL&apos; value is 0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ue_desc_p" verbose="Possible null pointer dereference: ue_desc_p" cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="101" column="46" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_trace.c" line="137" column="41" info="Calling function &apos;s1ap_eNB_generate_trace_failure&apos;, 1st argument &apos;NULL&apos; value is 0"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair3/SECU/aes_128_cbc_cmac.c" line="157" column="19"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rc&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rc&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair3/SECU/aes_128_ecb.c" line="47" column="6" info="rc is overwritten"/>
            <location file="openair3/SECU/aes_128_ecb.c" line="42" column="6" info="rc is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rc&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rc&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="openair3/SECU/aes_128_ctr.c" line="56" column="6" info="rc is overwritten"/>
            <location file="openair3/SECU/aes_128_ctr.c" line="51" column="6" info="rc is assigned"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s[8]&apos; is assigned a value that is never used." verbose="Variable &apos;s[8]&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/SECU/key_nas_deriver.c" line="186" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s[9]&apos; is assigned a value that is never used." verbose="Variable &apos;s[9]&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/SECU/key_nas_deriver.c" line="193" column="10"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="176" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="180" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="181" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="182" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="183" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="184" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="185" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="openair3/SECU/nas_stream_eea2.c" line="60" column="10" info="Null pointer dereference"/>
            <location file="openair3/SECU/nas_stream_eea2.c" line="58" column="21" info="Assignment &apos;ret=calloc(1,16)&apos;, assigned value is 0"/>
            <location file="openair3/SECU/nas_stream_eea2.c" line="59" column="19" info="Assuming that condition &apos;ret!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="186" column="17" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="172" column="33" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="174" column="35" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="openair3/SECU/nas_stream_eea1.c" line="109" column="10" info="Null pointer dereference"/>
            <location file="openair3/SECU/nas_stream_eea1.c" line="107" column="21" info="Assignment &apos;ret=calloc(1,16)&apos;, assigned value is 0"/>
            <location file="openair3/SECU/nas_stream_eea1.c" line="108" column="19" info="Assuming that condition &apos;ret!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="518" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="516" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="517" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="520" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="516" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="517" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="521" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="516" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="517" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="522" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="516" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="517" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="523" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="516" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="517" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="524" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="516" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="517" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="525" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="516" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="517" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="680" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="681" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="682" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="683" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="684" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="685" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="686" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." verbose="Either the condition &apos;sctp_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: sctp_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="687" column="3" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="677" column="48" info="Assignment &apos;sctp_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="678" column="24" info="Assuming that condition &apos;sctp_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="735" column="9" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="731" column="25" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="733" column="27" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="737" column="9" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="731" column="25" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="733" column="27" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="738" column="9" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="731" column="25" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="733" column="27" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="739" column="9" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="731" column="25" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="733" column="27" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="740" column="9" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="731" column="25" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="733" column="27" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="741" column="9" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="731" column="25" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="733" column="27" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." verbose="Either the condition &apos;new_cnx!=NULL&apos; is redundant or there is possible null pointer dereference: new_cnx." cwe="476">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="742" column="9" info="Null pointer dereference"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="731" column="25" info="Assignment &apos;new_cnx=calloc(1,sizeof(*sctp_cnx))&apos;, assigned value is 0"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="733" column="27" info="Assuming that condition &apos;new_cnx!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ns&apos; can be reduced." verbose="The scope of the variable &apos;ns&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="121" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="946" column="25"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;hints&apos; shadows outer variable" verbose="Local variable &apos;hints&apos; shadows outer variable" cwe="398">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="461" column="21" info="Shadow variable"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="391" column="19" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;serv&apos; shadows outer variable" verbose="Local variable &apos;serv&apos; shadows outer variable" cwe="398">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="462" column="22" info="Shadow variable"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="394" column="20" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;status&apos; shadows outer variable" verbose="Local variable &apos;status&apos; shadows outer variable" cwe="398">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="466" column="9" info="Shadow variable"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="396" column="7" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;p&apos; shadows outer variable" verbose="Local variable &apos;p&apos; shadows outer variable" cwe="398">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="469" column="22" info="Shadow variable"/>
            <location file="openair3/SCTP/sctp_eNB_task.c" line="400" column="20" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;address_index&apos; is assigned a value that is never used." verbose="Variable &apos;address_index&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/SCTP/sctp_eNB_task.c" line="301" column="26"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="openair3/SECU/nas_stream_eia1.c" line="234" column="10" info="Null pointer dereference"/>
            <location file="openair3/SECU/nas_stream_eia1.c" line="232" column="21" info="Assignment &apos;ret=calloc(1,16)&apos;, assigned value is 0"/>
            <location file="openair3/SECU/nas_stream_eia1.c" line="233" column="19" info="Assuming that condition &apos;ret!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;ret!=NULL&apos; is redundant or there is possible null pointer dereference: ret." cwe="476">
            <location file="openair3/SECU/nas_stream_eia2.c" line="70" column="4" info="Null pointer dereference"/>
            <location file="openair3/SECU/nas_stream_eia2.c" line="68" column="31" info="Assignment &apos;ret=calloc(1,sizeof(struct cbc_cmac_ctx_t))&apos;, assigned value is 0"/>
            <location file="openair3/SECU/nas_stream_eia2.c" line="69" column="19" info="Assuming that condition &apos;ret!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="167" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="164" column="49" info="Assignment &apos;ue_desc_p=s1ap_eNB_allocate_new_UE_context()&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="165" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="168" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="164" column="49" info="Assignment &apos;ue_desc_p=s1ap_eNB_allocate_new_UE_context()&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="165" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="169" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="164" column="49" info="Assignment &apos;ue_desc_p=s1ap_eNB_allocate_new_UE_context()&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="165" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." verbose="Either the condition &apos;ue_desc_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_desc_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="170" column="5" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="164" column="49" info="Assignment &apos;ue_desc_p=s1ap_eNB_allocate_new_UE_context()&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="165" column="25" info="Assuming that condition &apos;ue_desc_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." verbose="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1376" column="3" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1372" column="50" info="Assignment &apos;ue_context_p=s1ap_eNB_allocate_new_UE_context()&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1373" column="26" info="Assuming that condition &apos;ue_context_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." verbose="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." cwe="476">
            <location file="openair3/SECU/secu_defs.c" line="131" column="3" info="Null pointer dereference"/>
            <location file="openair3/SECU/secu_defs.c" line="128" column="50" info="Assignment &apos;container=calloc(1,sizeof(*container))&apos;, assigned value is 0"/>
            <location file="openair3/SECU/secu_defs.c" line="129" column="25" info="Assuming that condition &apos;container!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." verbose="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1377" column="3" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1372" column="50" info="Assignment &apos;ue_context_p=s1ap_eNB_allocate_new_UE_context()&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1373" column="26" info="Assuming that condition &apos;ue_context_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." verbose="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." cwe="476">
            <location file="openair3/SECU/secu_defs.c" line="132" column="3" info="Null pointer dereference"/>
            <location file="openair3/SECU/secu_defs.c" line="128" column="50" info="Assignment &apos;container=calloc(1,sizeof(*container))&apos;, assigned value is 0"/>
            <location file="openair3/SECU/secu_defs.c" line="129" column="25" info="Assuming that condition &apos;container!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." verbose="Either the condition &apos;ue_context_p!=NULL&apos; is redundant or there is possible null pointer dereference: ue_context_p." cwe="476">
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1378" column="3" info="Null pointer dereference"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1372" column="50" info="Assignment &apos;ue_context_p=s1ap_eNB_allocate_new_UE_context()&apos;, assigned value is 0"/>
            <location file="openair3/S1AP/s1ap_eNB_nas_procedures.c" line="1373" column="26" info="Assuming that condition &apos;ue_context_p!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." verbose="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." cwe="476">
            <location file="openair3/SECU/secu_defs.c" line="134" column="3" info="Null pointer dereference"/>
            <location file="openair3/SECU/secu_defs.c" line="128" column="50" info="Assignment &apos;container=calloc(1,sizeof(*container))&apos;, assigned value is 0"/>
            <location file="openair3/SECU/secu_defs.c" line="129" column="25" info="Assuming that condition &apos;container!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." verbose="Either the condition &apos;container!=NULL&apos; is redundant or there is possible null pointer dereference: container." cwe="476">
            <location file="openair3/SECU/secu_defs.c" line="135" column="3" info="Null pointer dereference"/>
            <location file="openair3/SECU/secu_defs.c" line="128" column="50" info="Assignment &apos;container=calloc(1,sizeof(*container))&apos;, assigned value is 0"/>
            <location file="openair3/SECU/secu_defs.c" line="129" column="25" info="Assuming that condition &apos;container!=NULL&apos; is not redundant"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair3/SECU/secu_defs.c" line="46" column="19"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;!=&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="openair3/SECU/secu_defs.c" line="63" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;F&apos; can be reduced." verbose="The scope of the variable &apos;F&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/SECU/snow3g.c" line="286" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;F&apos; can be reduced." verbose="The scope of the variable &apos;F&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/SECU/snow3g.c" line="330" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;F&apos; is assigned a value that is never used." verbose="Variable &apos;F&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/SECU/snow3g.c" line="286" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;F&apos; is assigned a value that is never used." verbose="Variable &apos;F&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/SECU/snow3g.c" line="330" column="14"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="openair3/UICC/usim_interface.c" line="65" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wroteSamples&apos; can be reduced." verbose="The scope of the variable &apos;wroteSamples&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/COMMON/common_lib.c" line="240" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;antenna&apos; shadows outer variable" verbose="Local variable &apos;antenna&apos; shadows outer variable" cwe="398">
            <location file="radio/ETHERNET/benetel/4g/benetel.c" line="205" column="9" info="Shadow variable"/>
            <location file="radio/ETHERNET/benetel/4g/benetel.c" line="195" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff_tsc&apos; can be reduced." verbose="The scope of the variable &apos;diff_tsc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/ETHERNET/benetel/4g/dpdk_driver.c" line="313" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur_tsc&apos; can be reduced." verbose="The scope of the variable &apos;cur_tsc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/ETHERNET/benetel/4g/dpdk_driver.c" line="313" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;all_ports_up&apos; can be reduced." verbose="The scope of the variable &apos;all_ports_up&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/ETHERNET/benetel/4g/dpdk_driver.c" line="519" column="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prach_ctrl&apos; is assigned a value that is never used." verbose="Variable &apos;prach_ctrl&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/ETHERNET/benetel/4g/dpdk_driver.c" line="155" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/ETHERNET/benetel/4g/dpdk_driver.c" line="165" column="6"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buf_tx" verbose="Unused variable: buf_tx" cwe="563">
            <location file="radio/ETHERNET/benetel/4g/dpdk_driver.c" line="150" column="23"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;antenna&apos; shadows outer variable" verbose="Local variable &apos;antenna&apos; shadows outer variable" cwe="398">
            <location file="radio/ETHERNET/benetel/5g/benetel.c" line="214" column="9" info="Shadow variable"/>
            <location file="radio/ETHERNET/benetel/5g/benetel.c" line="203" column="7" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff_tsc&apos; can be reduced." verbose="The scope of the variable &apos;diff_tsc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/ETHERNET/benetel/5g/dpdk_driver.c" line="357" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/BLADERF/bladerf_lib.c" line="350" column="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip4&apos; can be reduced." verbose="The scope of the variable &apos;ip4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/ocp-gtpu/gtp_itf.cpp" line="457" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;extension_header_length&apos; can be reduced." verbose="The scope of the variable &apos;extension_header_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/ocp-gtpu/gtp_itf.cpp" line="1078" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur_tsc&apos; can be reduced." verbose="The scope of the variable &apos;cur_tsc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/ETHERNET/benetel/5g/dpdk_driver.c" line="357" column="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;all_ports_up&apos; can be reduced." verbose="The scope of the variable &apos;all_ports_up&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/ETHERNET/benetel/5g/dpdk_driver.c" line="578" column="24"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="openair3/ocp-gtpu/gtp_itf.cpp" line="668" column="14" info="Shadow variable"/>
            <location file="openair3/ocp-gtpu/gtp_itf.cpp" line="662" column="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;offset&apos; shadows outer variable" verbose="Local variable &apos;offset&apos; shadows outer variable" cwe="398">
            <location file="openair3/ocp-gtpu/gtp_itf.cpp" line="1208" column="13" info="Shadow variable"/>
            <location file="openair3/ocp-gtpu/gtp_itf.cpp" line="1066" column="16" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prach_ctrl&apos; is assigned a value that is never used." verbose="Variable &apos;prach_ctrl&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/ETHERNET/benetel/5g/dpdk_driver.c" line="155" column="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/ETHERNET/benetel/5g/dpdk_driver.c" line="166" column="6"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tx_frame&apos; is assigned a value that is never used." verbose="Variable &apos;tx_frame&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/ETHERNET/benetel/5g/dpdk_driver.c" line="281" column="32"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buf_tx" verbose="Unused variable: buf_tx" cwe="563">
            <location file="radio/ETHERNET/benetel/5g/dpdk_driver.c" line="150" column="23"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;(void*)&amp;buff_tx[1]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;(void*)&amp;buff_tx[1]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_udp.c" line="327" column="31"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff[i]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff[i]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="146" column="34"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff[i]-(4+2+sizeof(openair0_timestamp))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff[i]-(4+2+sizeof(openair0_timestamp))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="146" column="56"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="150" column="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="151" column="63"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="151" column="87"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="155" column="24"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="155" column="48"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="156" column="35"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="156" column="59"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="182" column="24"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="183" column="35"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="183" column="59"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff[i]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff[i]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="249" column="36"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff[i]-(4+2+sizeof(openair0_timestamp))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff[i]-(4+2+sizeof(openair0_timestamp))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="249" column="58"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="253" column="42"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="254" column="65"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="254" column="89"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="302" column="48"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="302" column="72"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="321" column="26"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="322" column="37"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="322" column="61"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff[0]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff[0]&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="338" column="59"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="432" column="14"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="464" column="14"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="498" column="35"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="500" column="50"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;msg&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="527" column="35"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_udp.c" line="333" column="22"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_udp.c" line="345" column="25"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_udp.c" line="349" column="24"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_udp.c" line="350" column="24"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_udp.c" line="354" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bytes_sent&apos; is assigned a value that is never used." verbose="Variable &apos;bytes_sent&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/ETHERNET/eth_udp.c" line="305" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/ETHERNET/eth_udp.c" line="339" column="10"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;band_info_s::nbands&apos; is never used." verbose="struct member &apos;band_info_s::nbands&apos; is never used." cwe="563">
            <location file="radio/AW2SORI/oaiori.c" line="44" column="7"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="radio/LMSSDR/lms_lib.cpp" line="107" column="9" info="ret is overwritten"/>
            <location file="radio/LMSSDR/lms_lib.cpp" line="105" column="11" info="ret is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/LMSSDR/lms_lib.cpp" line="121" column="25"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="310" column="25"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="311" column="26"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="311" column="50"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="312" column="37"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;buff2+(sizeof(struct ether_header))&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/ETHERNET/eth_raw.c" line="312" column="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;interval_sec&apos; can be reduced." verbose="The scope of the variable &apos;interval_sec&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_handlers.c" line="240" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timer_kind&apos; can be reduced." verbose="The scope of the variable &apos;timer_kind&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_handlers.c" line="241" column="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_handlers.c" line="779" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_handlers.c" line="1036" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_handlers.c" line="1325" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nb_of_e_rabs_failed&apos; can be reduced." verbose="The scope of the variable &apos;nb_of_e_rabs_failed&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_handlers.c" line="1325" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/S1AP/s1ap_eNB_handlers.c" line="1459" column="7"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="radio/IRIS/iris_lib.cpp" line="269" column="15" info="Second condition"/>
            <location file="radio/IRIS/iris_lib.cpp" line="255" column="15" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/IRIS/iris_lib.cpp" line="213" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flags&apos; can be reduced." verbose="The scope of the variable &apos;flags&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/IRIS/iris_lib.cpp" line="219" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/IRIS/iris_lib.cpp" line="405" column="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffsize&apos; can be reduced." verbose="The scope of the variable &apos;buffsize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="217" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bufindex&apos; can be reduced." verbose="The scope of the variable &apos;bufindex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="219" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="418" column="25"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="501" column="14" info="Shadow variable"/>
            <location file="radio/LMSSDR/sodera_lib.cpp" line="477" column="10" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="198" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offset&apos; is assigned a value that is never used." verbose="Variable &apos;offset&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="214" column="15"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j" cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="209" column="29"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: nsamps2" verbose="Unused variable: nsamps2" cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="210" column="8"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="355" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="366" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="384" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;opStreamStatus&apos; is assigned a value that is never used." verbose="Variable &apos;opStreamStatus&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="629" column="20"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="radio/LMSSDR/sodera_lib.cpp" line="477" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/IRIS/iris_lib.cpp" line="213" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_slice_support_p&apos; can be reduced." verbose="The scope of the variable &apos;new_slice_support_p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair3/NGAP/ngap_gNB_handlers.c" line="264" column="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot2&apos; can be reduced." verbose="The scope of the variable &apos;slot2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="76" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_slot&apos; can be reduced." verbose="The scope of the variable &apos;last_slot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="79" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_frame&apos; can be reduced." verbose="The scope of the variable &apos;last_frame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="80" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rx_RU&apos; can be reduced." verbose="The scope of the variable &apos;rx_RU&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="88" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sym_idx&apos; can be reduced." verbose="The scope of the variable &apos;sym_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="171" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;old_rx_counter&apos; can be reduced." verbose="The scope of the variable &apos;old_rx_counter&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="249" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;old_tx_counter&apos; can be reduced." verbose="The scope of the variable &apos;old_tx_counter&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="250" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u8dptr&apos; can be reduced." verbose="The scope of the variable &apos;u8dptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/fhi_72/oaioran.c" line="465" column="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sym_idx&apos; is assigned a value that is never used." verbose="Variable &apos;sym_idx&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/fhi_72/oaioran.c" line="171" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rx_data&apos; is assigned a value that is never used." verbose="Variable &apos;rx_data&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/fhi_72/oaioran.c" line="298" column="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/fhi_72/oaioran.c" line="443" column="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;elapsed_usecs&apos; can be reduced." verbose="The scope of the variable &apos;elapsed_usecs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/iqplayer/iqplayer_lib.c" line="45" column="12"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;mptr&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;mptr&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="radio/iqplayer/iqplayer_lib.c" line="95" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/rfsimulator/stored_node.c" line="32" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/rfsimulator/stored_node.c" line="86" column="7"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;sin_family&apos; is not used." verbose="Label &apos;sin_family&apos; is not used." cwe="398">
            <location file="radio/rfsimulator/stored_node.c" line="113" column="1"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;s_addr&apos; is not used." verbose="Label &apos;s_addr&apos; is not used." cwe="398">
            <location file="radio/rfsimulator/stored_node.c" line="118" column="7"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;sin_family&apos; is not used." verbose="Label &apos;sin_family&apos; is not used." cwe="398">
            <location file="radio/rfsimulator/stored_node.c" line="129" column="1"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;s_addr&apos; is not used." verbose="Label &apos;s_addr&apos; is not used." cwe="398">
            <location file="radio/rfsimulator/stored_node.c" line="134" column="7"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;buff&apos; shadows outer variable" verbose="Local variable &apos;buff&apos; shadows outer variable" cwe="398">
            <location file="radio/rfsimulator/stored_node.c" line="249" column="12" info="Shadow variable"/>
            <location file="radio/rfsimulator/stored_node.c" line="195" column="9" info="Shadowed declaration"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686">
            <location file="targets/TEST/PDCP/with_rlc/test_pdcp_rlc.c" line="125" column="7"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rlc_status&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rlc_status&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="428" column="14" info="rlc_status is overwritten"/>
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="412" column="14" info="rlc_status is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rlc_status&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rlc_status&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="466" column="14" info="rlc_status is overwritten"/>
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="458" column="14" info="rlc_status is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;sdu_len&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;sdu_len&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="470" column="11" info="sdu_len is overwritten"/>
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="462" column="11" info="sdu_len is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c0&apos; can be reduced." verbose="The scope of the variable &apos;c0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="104" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;byte&apos; can be reduced." verbose="The scope of the variable &apos;byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="105" column="17"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k" cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="176" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tb_src&apos; can be reduced." verbose="The scope of the variable &apos;tb_src&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="targets/TEST/PDCP/with_rlc/test_pdcp_rlc.c" line="114" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;g_log_level&apos; is assigned a value that is never used." verbose="Variable &apos;g_log_level&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PDCP/with_rlc/test_pdcp_rlc.c" line="221" column="22"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rlc_status&apos; is assigned a value that is never used." verbose="Variable &apos;rlc_status&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="384" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rlc_status&apos; is assigned a value that is never used." verbose="Variable &apos;rlc_status&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="428" column="14"/>
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="targets/TEST/ROHDE_SCHWARZ/EthernetRawCommand.cpp" line="103" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;port&apos; can be reduced." verbose="The scope of the variable &apos;port&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="targets/TEST/ROHDE_SCHWARZ/EthernetRawCommand.cpp" line="38" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rlc_status&apos; is assigned a value that is never used." verbose="Variable &apos;rlc_status&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="466" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sdu_len0&apos; is assigned a value that is never used." verbose="Variable &apos;sdu_len0&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="570" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sdu_len0&apos; is assigned a value that is never used." verbose="Variable &apos;sdu_len0&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="639" column="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sdu_len0&apos; is assigned a value that is never used." verbose="Variable &apos;sdu_len0&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="660" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sdu_len0&apos; is assigned a value that is never used." verbose="Variable &apos;sdu_len0&apos; is assigned a value that is never used." cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="691" column="15"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: frame_parms0" verbose="Unused variable: frame_parms0" cwe="563">
            <location file="targets/TEST/PACKET_TRACER/pt.c" line="484" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/rfsimulator/simulator.c" line="330" column="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;t&apos; shadows outer variable" verbose="Local variable &apos;t&apos; shadows outer variable" cwe="398">
            <location file="radio/rfsimulator/simulator.c" line="421" column="28" info="Shadow variable"/>
            <location file="radio/rfsimulator/simulator.c" line="402" column="24" info="Shadowed declaration"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." cwe="476">
            <location file="radio/USRP/usrp_lib.cpp" line="354" column="7" info="Null pointer dereference"/>
            <location file="radio/USRP/usrp_lib.cpp" line="397" column="30" info="Calling function &apos;trx_usrp_send_end_of_burst&apos;, 1st argument &apos;s&apos; value is 0"/>
            <location file="radio/USRP/usrp_lib.cpp" line="387" column="21" info="Assignment &apos;s=(struct usrp_state_t*)device-&gt;priv&apos;, assigned value is 0"/>
            <location file="radio/USRP/usrp_lib.cpp" line="389" column="17" info="Assuming that condition &apos;s!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." cwe="476">
            <location file="radio/USRP/usrp_lib.cpp" line="366" column="3" info="Null pointer dereference"/>
            <location file="radio/USRP/usrp_lib.cpp" line="398" column="22" info="Calling function &apos;trx_usrp_finish_rx&apos;, 1st argument &apos;s&apos; value is 0"/>
            <location file="radio/USRP/usrp_lib.cpp" line="387" column="21" info="Assignment &apos;s=(struct usrp_state_t*)device-&gt;priv&apos;, assigned value is 0"/>
            <location file="radio/USRP/usrp_lib.cpp" line="389" column="17" info="Assuming that condition &apos;s!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." cwe="476">
            <location file="radio/USRP/usrp_lib.cpp" line="400" column="3" info="Null pointer dereference"/>
            <location file="radio/USRP/usrp_lib.cpp" line="387" column="21" info="Assignment &apos;s=(struct usrp_state_t*)device-&gt;priv&apos;, assigned value is 0"/>
            <location file="radio/USRP/usrp_lib.cpp" line="389" column="17" info="Assuming that condition &apos;s!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." cwe="476">
            <location file="radio/USRP/usrp_lib.cpp" line="401" column="3" info="Null pointer dereference"/>
            <location file="radio/USRP/usrp_lib.cpp" line="387" column="21" info="Assignment &apos;s=(struct usrp_state_t*)device-&gt;priv&apos;, assigned value is 0"/>
            <location file="radio/USRP/usrp_lib.cpp" line="389" column="17" info="Assuming that condition &apos;s!=NULL&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;s!=NULL&apos; is redundant or there is possible null pointer dereference: s." cwe="476">
            <location file="radio/USRP/usrp_lib.cpp" line="402" column="3" info="Null pointer dereference"/>
            <location file="radio/USRP/usrp_lib.cpp" line="387" column="21" info="Assignment &apos;s=(struct usrp_state_t*)device-&gt;priv&apos;, assigned value is 0"/>
            <location file="radio/USRP/usrp_lib.cpp" line="389" column="17" info="Assuming that condition &apos;s!=NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="429" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nsamps2&apos; can be reduced." verbose="The scope of the variable &apos;nsamps2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="432" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." verbose="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NGAP/ngap_gNB_handlers.c" line="844" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;end&apos; can be reduced." verbose="The scope of the variable &apos;end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="437" column="7"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." verbose="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NGAP/ngap_gNB_handlers.c" line="1087" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="566" column="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nsamps2&apos; can be reduced." verbose="The scope of the variable &apos;nsamps2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="567" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;start&apos; can be reduced." verbose="The scope of the variable &apos;start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="568" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buff&apos; can be reduced." verbose="The scope of the variable &apos;buff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="570" column="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nsamps&apos; can be reduced." verbose="The scope of the variable &apos;nsamps&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="571" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="572" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_packet&apos; can be reduced." verbose="The scope of the variable &apos;first_packet&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="573" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_packet&apos; can be reduced." verbose="The scope of the variable &apos;last_packet&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="574" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flags_gpio&apos; can be reduced." verbose="The scope of the variable &apos;flags_gpio&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="575" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="radio/USRP/usrp_lib.cpp" line="948" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/USRP/usrp_lib.cpp" line="429" column="10"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." verbose="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NGAP/ngap_gNB_handlers.c" line="1172" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." verbose="Variable &apos;amf_desc_p&apos; is assigned a value that is never used." cwe="563">
            <location file="openair3/NGAP/ngap_gNB_handlers.c" line="1508" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563">
            <location file="radio/USRP/usrp_lib.cpp" line="561" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i1&apos; can be reduced." verbose="The scope of the variable &apos;i1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair1/PHY/CODING/nrLDPC_encoder/ldpc_encoder_optim8seg.c" line="53" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2054" column="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2325" column="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="2380" column="59"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x128&apos; is assigned a value that is never used." verbose="Variable &apos;x128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7335" column="19"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y128&apos; is assigned a value that is never used." verbose="Variable &apos;y128&apos; is assigned a value that is never used." cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7335" column="40"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw0" verbose="Unused variable: tw0" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7333" column="32"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw1" verbose="Unused variable: tw1" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7333" column="36"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw2" verbose="Unused variable: tw2" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7333" column="40"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tw3" verbose="Unused variable: tw3" cwe="563">
            <location file="openair1/PHY/TOOLS/oai_dfts_neon.c" line="7333" column="44"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: estimated_distance" verbose="Unused variable: estimated_distance" cwe="563">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="6360" column="34"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ctxt" verbose="Unused variable: ctxt" cwe="563">
            <location file="openair2/RRC/LTE/rrc_UE.c" line="6361" column="34"/>
        </error>
        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: missingIncludeSystem" verbose="Unmatched suppression: missingIncludeSystem"/>
    </errors>
</results>
